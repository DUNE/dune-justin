#!/usr/bin/python3
#
#  dashboard-cgi - Workflow System dashboard
#
#  Andrew McNab, University of Manchester.
#  Copyright (c) 2013-22. All rights reserved.
#
#  Redistribution and use in source and binary forms, with or
#  without modification, are permitted provided that the following
#  conditions are met:
#
#    o Redistributions of source code must retain the above
#      copyright notice, this list of conditions and the following
#      disclaimer. 
#    o Redistributions in binary form must reproduce the above
#      copyright notice, this list of conditions and the following
#      disclaimer in the documentation and/or other materials
#      provided with the distribution. 
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
#  CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
#  INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
#  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
#  BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
#  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
#  TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
#  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
#  ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
#  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
#  OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#  POSSIBILITY OF SUCH DAMAGE.
#

import os
import io
import re
import sys
import cgi
import time
import json
import uuid
import html
import urllib
import string
import MySQLdb

# wfs/conf.py must define these variables in a way that is both
# valid Python and valid Bash!
#
# mysqlUser='username'
# mysqlPassword='PAsSWoRd'
#
import wfs

def header(title):
  print("Status: 200 OK")
  print("Content-Type: text/html")
  print()
  print("<html><head><title>%s</title>" % title)
  print(
"""<style>
table { border-collapse: collapse; border: medium solid black;}
tr { text-align: left }
td,th { border: thin solid black; padding: 0.75ex }
</style>
</head><body>
<p>
<a href="/dashboard/">Dashboard</a> . 
<a href="/dashboard/?method=list-requests">Requests</a> . 
<a href="/dashboard/?method=list-jobs">Jobs</a> . 
<a href="/dashboard/?method=list-sites">Sites</a> . 
<a href="/dashboard/?method=list-storages">Storages</a>
</p>
""")

def footer():
  print("<hr>Time now: %s" % time.strftime('%Y-%m-%d %H:%M:%S %Z'))
  print("</body></html>")
  sys.exit()

def errorPage(message):
  header("Error")
  print("<h1>Error</h1>")
  print("<p>%s</p>" % message)
  footer()
  
def mainPage():
  header("WFS: Dashboard")

  print("<h1>Dashboard</h1>")
  
  print('<ul>')
  print('<li><a href="/dashboard/?method=list-requests">Requests</a></li>')
  print('<li><a href="/dashboard/?method=list-jobs">Jobs</a></li>')
  print('<li><a href="/dashboard/?method=list-sites">Sites</a></li>')
  print('<li><a href="/dashboard/?method=list-storages">Storages</a></li>')
  print('</ul>')
  
  footer()

def listRequests(cgiValues):
  header("WFS: Requests")

  print("<h1>Requests</h1>")
  
  query = ('SELECT request_id,name,username,state,mql FROM requests '
           'LEFT JOIN users ON requests.user_id=users.user_id '
           'ORDER BY request_id DESC')

  wfs.db.cur.execute(query)
  rows = wfs.db.cur.fetchall()

  print('<table')
  print('<tr><th>Request ID</th><th>Name</th><th>User</th><th>State</th>'
        '<th>MQL</th><tr>')

  for row in rows:
    print('<tr><td><a href="/dashboard/?method=show-request&request_id=%s">'
          '%s</a></td><td>%s</td><td>%s</td><td>%s</td><td>%s</td></tr>' % 
          (row["request_id"], row["request_id"],
           html.escape(row["name"], quote=True),
           row["username"],
           row["state"],
           html.escape(row["mql"], quote=True)
          )
         )

  print("</table>")
  
  footer()

def showRequest(cgiValues):
  try:
    requestID = int(cgiValues.getfirst("request_id"))
  except:
    errorPage("request_id must be given")
  
  header("WFS: Request %d" % requestID)

  query = ("SELECT requests.name,requests.state,"
           "users.username,"
           "requests.created,requests.submitted,requests.started,"
           "requests.checking,requests.completed,mql,"
           "requests.refind_seconds,requests.refind_start_time,"
           "requests.refind_end_time "
           "FROM requests "
           "LEFT JOIN users ON users.user_id=requests.user_id "
           "WHERE request_id=%d "
           "ORDER BY request_id" % requestID)

  wfs.db.cur.execute(query)
  requestRows = wfs.db.cur.fetchall()
  
  state = requestRows[0]['state']

  print("<h1>Request %d</h1>" % requestID)
  
  print('<table')

  print('<tr><td>Name</td><td>%s</td></tr>' % 
        html.escape(requestRows[0]['name'], quote=True))
  print('<tr><td>State</td><td>%s</td></tr>' % state)
  print('<tr><td>MQL</td><td>%s</td></tr>' % 
        html.escape(requestRows[0]['mql'], quote=True))

  print('<tr><td>Created by</td><td>%s</td></tr>' % 
        requestRows[0]['username'])

  print('<tr><td>Created</td><td>%s</td></tr>' % requestRows[0]['created'])

  if requestRows[0]['refind_seconds'] == 0:
    print('<tr><td>Finding</td><td>Once</td></tr>')
  else:
    print('<tr><td>Finding</td><td>Every %d hour(s), %s to %s</td></tr>' %
          (int(requestRows[0]['refind_seconds'] / 3600), 
           requestRows[0]['refind_start_time'],
           requestRows[0]['refind_end_time'])
         )
      
  print('<tr><td>Submitted</td>')
  if requestRows[0]['submitted']:
    print('<td>%s</td></tr>' % str(requestRows[0]['submitted']))
  else:
    print('<td>-</td></tr>')

  print('<tr><td>Started</td>')
  if requestRows[0]['started']:
    print('<td>%s</td></tr>' % str(requestRows[0]['started']))
  else:
    print('<td>-</td></tr>')
    
  print('<tr><td>Checking</td>')
  if requestRows[0]['checking']:
    print('<td>%s</td></tr>' % str(requestRows[0]['checking']))
  else:
    print('<td>-</td></tr>')

  print('<tr><td>Completed</td>') 
  if requestRows[0]['completed']:
    print('<td>%s</td></tr>' % str(requestRows[0]['completed']))
  else:
    print('<td>-</td></tr>')
  
  print("</table>")
  
  query = ("SELECT * "
           "FROM stages "
           "WHERE request_id=%d "
           "ORDER BY stage_id" % requestID)

  wfs.db.cur.execute(query)
  stagesRows = wfs.db.cur.fetchall()
  
  print('<h2>Stages</h2>')
  print('<table')
  print("<tr><th>Stage ID</th><th>Files</th><th>Finding</th>"
        "<th>Unallocated</th><th>Allocated</th><th>Processed</th>"
        "<th>Not found</th><tr>")

  for stageRow in stagesRows:
    numFinding     = int(stageRow["num_finding"])
    numUnallocated = int(stageRow["num_unallocated"])
    numAllocated   = int(stageRow["num_allocated"])
    numProcessed   = int(stageRow["num_processed"])
    numNotfound    = int(stageRow["num_notfound"])
    numFiles       = (numFinding + numUnallocated + numAllocated + 
                      numProcessed + numNotfound)
    
    print('<tr><td><a href="/dashboard/?method=show-stage&request_id=%s&stage_id=%s">'
          '%s</a></td>'
          '<td><a href="/dashboard/?method=list-files&request_id=%s&stage_id=%s">%s</a></td>'
          '<td><a href="/dashboard/?method=list-files&request_id=%s&stage_id=%s&state=finding">%s</a></td>'
          '<td><a href="/dashboard/?method=list-files&request_id=%s&stage_id=%s&state=unallocated">%s</a></td>'
          '<td><a href="/dashboard/?method=list-files&request_id=%s&stage_id=%s&state=allocated">%s</a></td>'
          '<td><a href="/dashboard/?method=list-files&request_id=%s&stage_id=%s&state=processed">%s</a></td>'
          '<td><a href="/dashboard/?method=list-files&request_id=%s&stage_id=%s&state=notfound">%s</a></td>'
          '</tr>' % 
          (stageRow["request_id"], stageRow["stage_id"], stageRow["stage_id"],
           stageRow["request_id"], stageRow["stage_id"], numFiles, 
           stageRow["request_id"], stageRow["stage_id"], numFinding, 
           stageRow["request_id"], stageRow["stage_id"], numUnallocated, 
           stageRow["request_id"], stageRow["stage_id"], numAllocated, 
           stageRow["request_id"], stageRow["stage_id"], numProcessed,
           stageRow["request_id"], stageRow["stage_id"], numNotfound))

  print("</table>")

  footer()

def showStage(cgiValues):
  try:
    requestID = int(cgiValues.getfirst("request_id"))
  except:
    errorPage("request_id must be given")
  
  try:
    stageID = int(cgiValues.getfirst("stage_id"))
  except:
    errorPage("stage_id must be given")
  
  header("WFS: Request %d, Stage %d" % (requestID, stageID))

  query = ("SELECT "
           "stages.processors,"
           "stages.wall_seconds,"
           "stages.rss_bytes,"
           "stages.max_distance,"
           "stages.num_finding,"
           "stages.num_unallocated,"
           "stages.num_allocated,"
           "stages.num_processed,"
           "stages.num_notfound,"
           "bootstraps.bootstrap "
           "FROM stages "
           "LEFT JOIN bootstraps ON bootstraps.request_id=stages.request_id"
           " AND bootstraps.stage_id=stages.stage_id "
           "WHERE stages.request_id=%d AND stages.stage_id=%d" %
           (requestID, stageID))

  wfs.db.cur.execute(query)
  stageRows = wfs.db.cur.fetchall()
  
  print("<h1>Request %d, Stage %d</h1>" % (requestID, stageID))
  
  print('<table')

  print('<tr><td>Processors</td>'
        '<td>%s</td></tr>' % stageRows[0]["processors"])

  print('<tr><td>Wall seconds</td>'
        '<td>%s</td></tr>' % stageRows[0]["wall_seconds"])

  print('<tr><td>RSS bytes</td>'
        '<td>%s (%d MB)</td></tr>' % 
        (stageRows[0]["rss_bytes"], 
         int(stageRows[0]["rss_bytes"]) / 1048576))

  print('<tr><td>Max distance for inputs</td>'
        '<td>%.1f</td></tr>' % stageRows[0]["max_distance"])

  print('<tr><td>Output RSEs</td>'
        '<td>')
        
  query = ("SELECT rse_name "
           "FROM stages_output_storages "
           "LEFT JOIN storages ON stages_output_storages.rse_id=storages.rse_id "
           "WHERE request_id=%d AND stage_id=%d "
           "ORDER BY rse_name" %
           (requestID, stageID))

  wfs.db.cur.execute(query)
  rseRows = wfs.db.cur.fetchall()
  
  if (len(rseRows) == 0):
    print("(any)")
  else:
    for rseRow in rseRows:
      print("%s " % rseRow['rse_name'])
        
  print('</td></tr>')

  numFinding     = int(stageRows[0]["num_finding"])
  numUnallocated = int(stageRows[0]["num_unallocated"])
  numAllocated   = int(stageRows[0]["num_allocated"])
  numProcessed   = int(stageRows[0]["num_processed"])
  numNotfound    = int(stageRows[0]["num_notfound"])
  numFiles       = (numFinding + numUnallocated + numAllocated + 
                    numProcessed + numNotfound)

  print('<tr><td>Total files</td>'
        '<td><a href="/dashboard/?method=list-files&request_id=%d&stage_id=%d">%d</a></td></tr>'
        % (requestID, stageID,numFiles))
    
  print('<tr><td>Finding</td>'
        '<td><a href="/dashboard/?method=list-files&request_id=%d&stage_id=%d&state=finding">%d</a></td></tr>'
        % (requestID, stageID, numFinding))
    
  print('<tr><td>Unallocated</td>'
        '<td><a href="/dashboard/?method=list-files&request_id=%d&stage_id=%d&state=unallocated">%d</a></td></tr>'
        % (requestID, stageID, numUnallocated))
    
  print('<tr><td>Allocated</td>'
        '<td><a href="/dashboard/?method=list-files&request_id=%d&stage_id=%d&state=allocated">%d</a></td></tr>'
        % (requestID, stageID, numAllocated))
    
  print('<tr><td>Processed</td>'
        '<td><a href="/dashboard/?method=list-files&request_id=%d&stage_id=%d&state=processed">%d</a></td></tr>'
        % (requestID, stageID, numProcessed))
        
  print('<tr><td>Not found</td>'
        '<td><a href="/dashboard/?method=list-files&request_id=%d&stage_id=%d&state=notfound">%d</a></td></tr>'
        % (requestID, stageID, numNotfound))
        
  print('</table>')
    
  print("<h2>Output patterns</h2>")
  print('<table><tr><th>Dataset</th><th>Scope</th><th>Pattern</th>'
        '<th>For next stage</th></tr>') 

  query = ("SELECT dataset,file_scope,file_pattern,for_next_stage "
           "FROM stages_outputs "
           "WHERE request_id=%d AND stage_id=%d "
           "ORDER BY dataset,file_scope,file_pattern" %
           (requestID, stageID))

  wfs.db.cur.execute(query)
  patternRows = wfs.db.cur.fetchall()

  for patternRow in patternRows:
    print("<tr><td>%s</td><td>%s</td><td>%s</td><td>%s</td></tr>" %
           (patternRow["dataset"],
            patternRow["file_scope"],
            html.escape(patternRow["file_pattern"], quote=True),
            bool(patternRow["for_next_stage"])))

  print('</table>') 

  print("<h2>Bootstrap script</h2>")
  print('<table><tr><td><pre>') 

  print(html.escape(
   stageRows[0]["bootstrap"].encode('ascii',errors='ignore').decode(), 
   quote=True))
  
  print('</pre></td></tr></table>') 

  footer()

def listFiles(cgiValues):
  try:
    requestID = int(cgiValues.getfirst("request_id"))
  except:
    errorPage("request_id must be given")
  
  try:
    stageID = int(cgiValues.getfirst("stage_id"))
  except:
    errorPage("stage_id must be given")

  state = str(cgiValues.getfirst("state"))

  if state == 'finding' or state == 'unallocated' or state == 'allocated' \
     or state == 'processed' or state == 'notfound':
    stateFilter = 'AND files.state="' + state + '"'
    stateText = ' (state = ' + state + ')'
  else:
    stateFilter = ''
    stateText = ''
    
  header("WFS: Files for Request %d, Stage %d%s" 
         % (requestID, stageID, stateText))

  print("<h1>Files  for Request %d, Stage %d%s</h1>" 
         % (requestID, stageID, stateText))
  
  query = ("SELECT files.file_did,files.state,allocations.allocation_time,"
           "storages.rse_name,jobs.jobsub_id,sites.site_name "
           "FROM files "
           "LEFT JOIN allocations"
           " ON wfs_job_id=allocations.wfs_job_id "
           "LEFT JOIN storages ON allocations.rse_id=storages.rse_id "
           "LEFT JOIN jobs ON jobs.wfs_job_id=wfs_job_id "
           "LEFT JOIN sites ON jobs.site_id=sites.site_id "
           "WHERE files.request_id=%d AND files.stage_id=%d %s "
           "ORDER BY files.file_id" % (requestID, stageID, stateFilter))

  wfs.db.cur.execute(query)
  filesRows = wfs.db.cur.fetchall()

  print(
"""<table>
<tr><th rowspan="2">DID</th><th rowspan="2">State</th><th colspan="4">Allocated</th></tr>
<tr><th>Time</th><th>RSE</th><th>Site</th><th>Jobsub ID</th></tr>""")

  for fileRow in filesRows:
    print('<tr><td><a href="/dashboard/?method=show-file&request_id=%d&stage_id=%d&file_did=%s">'
          '%s</a></td><td>%s</td>' % 
          (requestID, 
           stageID, 
           urllib.parse.quote(fileRow["file_did"], safe=''),
           html.escape(fileRow["file_did"], quote=True),
           fileRow["state"],
          )
         )
         
    if fileRow["state"] == 'allocated' or fileRow["state"] == 'processed':
      print('<td>%s</td>'
            '<td>%s</td>'
            '<td>%s</td>'
            '<td><a href="/dashboard/?method=show-job&jobsub_id=%s">%s</a></td></tr>' % 
            (str(fileRow["allocation_time"]),
             str(fileRow["rse_name"]),
             str(fileRow["site_name"]),
             str(fileRow["jobsub_id"]), str(fileRow["jobsub_id"])
            )
           )
    else:
      print('<td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>')
      
  print("</table>")
  
  footer()

def showFile(cgiValues):

  try:
    fileDID = cgiValues.getfirst("file_did")
  except:
    errorPage("file_did must be given")

  if '"' in fileDID:
    errorPage("Bad format of file_did")
      
  try:
    requestID = int(cgiValues.getfirst("request_id"))
  except:
    errorPage("request_id must be given")
  
  try:
    stageID = int(cgiValues.getfirst("stage_id"))
  except:
    errorPage("stage_id must be given")

  header("WFS: File %s" 
         % html.escape(fileDID, quote=True))

  print("<h1>File %s</h1>"
         % html.escape(fileDID, quote=True))
  
  query = ('SELECT file_id,state '
           'FROM files '
           'WHERE request_id=%d AND stage_id=%d and file_did="%s"' %
           (requestID, stageID, fileDID))

  wfs.db.cur.execute(query)
  filesRows = wfs.db.cur.fetchall()

  fileID = int(filesRows[0]["file_id"])

  query = ("SELECT jobs.state,jobsub_id,allocations.allocation_time,"
           "rse_name FROM allocations "
           "LEFT JOIN storages ON storages.rse_id=allocations.rse_id "
           "LEFT JOIN jobs ON allocations.wfs_job_id=jobs.wfs_job_id "
           "WHERE file_id=%d ORDER BY allocation_id" % fileID)

  wfs.db.cur.execute(query)
  jobsRows = wfs.db.cur.fetchall()

  query = ('SELECT pfn,rse_name '
           'FROM replicas '
           'LEFT JOIN storages ON storages.rse_id=replicas.rse_id '
           'WHERE file_id=%d' % fileID)

  wfs.db.cur.execute(query)
  replicaRows = wfs.db.cur.fetchall()

  print('<p><table>')
  
  print('<tr><td>Request ID</td>'
        '<td><a href="/dashboard/?method=show-request&request_id=%d">%d</a></td></tr>'
        % (requestID, requestID))
        
  print('<tr><td>Stage ID</td>'
        '<td><a href="/dashboard/?method=show-stage&request_id=%d&stage_id=%d">%d</a></td></tr>'
        % (requestID, stageID, stageID))
        
  print('<tr><td>State</td>'
        '<td>%s</td></tr>'
        % filesRows[0]["state"])
      
  print('<tr><td>Replicas</td><td>')
  
  for replicaRow in replicaRows:  
    print('<small>%s: %s </small><br>' % 
          (replicaRow["rse_name"], 
           replicaRow["pfn"]))

  print('</td></tr>')

  print('<tr><td>Jobs</td><td>')
  
  for jobRow in jobsRows:
  
    print('<a href="/dashboard/?method=show-job&jobsub_id=%s">%s</a><br>' % 
          (jobRow["jobsub_id"], jobRow["jobsub_id"]))

  print('</td></tr>')

  print("</table>")
  
  footer()

def showJob(cgiValues):
  try:
    jobsubID = cgiValues.getfirst("jobsub_id")
  except:
    errorPage("jobsub_id must be given")
      
  header("WFS: Jobsub %s" % jobsubID)

  print("<h1>Jobsub %s</h1>" % jobsubID)
  
  query = ("SELECT jobs.wfs_job_id,jobs.request_id,jobs.stage_id,sites.site_name,"
           "jobs.hostname,jobs.cpuinfo,jobs.os_release,username,"
           "jobs.rss_bytes,jobs.processors,jobs.wall_seconds,"
           "jobs.allocator_name,jobs.allocation_state,jobs.allocation_time,"
           "jobs.submitted_time,jobs.finished_time,jobs.jobsub_state,"
           "slot_sizes.max_processors,slot_sizes.min_processors,"
           "slot_sizes.max_rss_bytes,slot_sizes.min_rss_bytes,"
           "slot_sizes.max_wall_seconds,bootstrap_log "
           "FROM jobs "
           "LEFT JOIN requests ON requests.request_id=jobs.request_id "
           "LEFT JOIN users ON requests.user_id=users.user_id "
           "LEFT JOIN sites ON jobs.site_id=sites.site_id "
           "LEFT JOIN slot_sizes ON jobs.slot_size_id=slot_sizes.slot_size_id "
           "LEFT JOIN jobs_logs ON jobs_logs.wfs_job_id=jobs.wfs_job_id "
           "WHERE jobs.jobsub_id='%s'" % jobsubID)

  wfs.db.cur.execute(query)
  jobRows = wfs.db.cur.fetchall()

  query = ("SELECT file_did FROM allocations "
           "LEFT JOIN files ON allocations.file_id=files.file_id "
           "WHERE allocations.wfs_job_id=%d ORDER BY allocation_id" % 
           jobRows[0]['wfs_job_id'])

  wfs.db.cur.execute(query)
  filesRows = wfs.db.cur.fetchall()

  print('<table>')
  
  print('<tr><td>Jobsub state</td>'
        '<td>%s</td></tr>'
        % jobRows[0]["jobsub_state"])
      
  print('<tr><td>Allocation state</td>'
        '<td>%s</td></tr>'
        % jobRows[0]["allocation_state"])
      
  print('<tr><td>Jobsub ID</td>'
        '<td>%s</td></tr>'
        % html.escape(jobsubID, quote=True))

  print('<tr><td>Submitted time</td>'
        '<td>%s</td></tr>'
        % jobRows[0]["submitted_time"])
      
  print('<tr><td>Allocator name</td>'
        '<td>%s</td></tr>'
        % html.escape(jobRows[0]["allocator_name"], quote=True))

  if jobRows[0]["site_name"]:
    print('<tr><td>Site</td>'
          '<td>%s</td></tr>'
          % html.escape(jobRows[0]["site_name"], quote=True))

  print('<tr><td>Slot</td><td>'
        '%d &lt; processors &le; %d<br>'
        '%d &lt; rss bytes &le; %d<br>'
        'wall seconds &le; %d</td></tr>'
        % (jobRows[0]["min_processors"], jobRows[0]["max_processors"],
           jobRows[0]["min_rss_bytes"], jobRows[0]["max_rss_bytes"],
           jobRows[0]["max_wall_seconds"]
          )
       )

  if jobRows[0]["hostname"]:
    print('<tr><td>Hostname</td>'
          '<td>%s</td></tr>'
          % html.escape(jobRows[0]["hostname"], quote=True))
  
  if jobRows[0]["cpuinfo"]:
    print('<tr><td>cpuinfo</td>'
          '<td>%s</td></tr>'
          % html.escape(jobRows[0]["cpuinfo"], quote=True))

  if jobRows[0]["os_release"]:
    print('<tr><td>OS release</td>'
          '<td>%s</td></tr>'
          % html.escape(jobRows[0]["os_release"], quote=True))

  if jobRows[0]["rss_bytes"]:
    print('<tr><td>RSS bytes</td>'
          '<td>%s (%d MB)</td></tr>' % 
          (jobRows[0]["rss_bytes"], 
           int(jobRows[0]["rss_bytes"]) / 1048576))

  if jobRows[0]["processors"]:
    print('<tr><td>Processors</td>'
          '<td>%s</td></tr>'
          % jobRows[0]["processors"])

  if jobRows[0]["wall_seconds"]:
    print('<tr><td>Wall seconds limit</td>'
          '<td>%s (%d hours)</td></tr>'
          % (jobRows[0]["wall_seconds"],
             int(jobRows[0]["wall_seconds"]) / 3600))

  print('<tr><td>Request by</td><td>%s</td></tr>' 
        % jobRows[0]['username'])

  print('<tr><td>Request ID</td>'
        '<td><a href="/dashboard/?method=show-request&request_id=%s">%s</a></td></tr>'
        % (jobRows[0]["request_id"],
           jobRows[0]["request_id"]))
        
  print('<tr><td>Stage ID</td>'
        '<td><a href="/dashboard/?method=show-stage&request_id=%s&stage_id=%s">%s</a></td></tr>'
        % (jobRows[0]["request_id"], jobRows[0]["stage_id"],
           jobRows[0]["stage_id"]))
        
  print('<tr><td>Started</td>'
        '<td>%s</td></tr>'
        % jobRows[0]["allocation_time"])

  print('<tr><td>Finished</td>'
        '<td>%s</td></tr>'
        % jobRows[0]["finished_time"])

  print('<tr><td>Files</td><td>')
  
  for fileRow in filesRows:
    print('<a href="/dashboard/?method=show-file&request_id=%d&stage_id=%d&file_did=%s">'
          '%s</a><br>' % 
          (jobRows[0]["request_id"], 
           jobRows[0]["stage_id"],
           urllib.parse.quote(fileRow["file_did"], safe=''),
           html.escape(fileRow["file_did"], quote=True)
          )
       )
  print('</td></tr>')

  print("</table>")

  if jobRows[0]['bootstrap_log']:
    print("<h2>Bootstrap log</h2>")
    print('<table><tr><td><pre>') 
 
    print(html.escape(jobRows[0]["bootstrap_log"], 
          quote=True))
  
    print('</pre></td></tr></table>') 

  footer()

def listJobs(cgiValues):
      
  header("WFS: Jobs")

  print("<h1>Jobs</h1>")
  
  query = ("SELECT jobs.jobsub_id,jobs.request_id,jobs.stage_id,sites.site_name,"
           "jobs.allocation_state,jobs.allocation_time,"
           "jobs.finished_time,jobs.jobsub_state,users.username "
           "FROM jobs "
           "LEFT JOIN requests ON requests.request_id=jobs.request_id "
           "LEFT JOIN users ON requests.user_id=users.user_id "
           "LEFT JOIN sites ON jobs.site_id=sites.site_id "
           "ORDER BY jobs.wfs_job_id DESC"
          )

  wfs.db.cur.execute(query)
  jobRows = wfs.db.cur.fetchall()

  print('<table>')
  
  print('<tr>'
        '<th>Jobsub ID</th>'
        '<th>Jobsub State</th>'
        '<th>Allocation state</th>'
        '<th>Site</th>'
        '<th>User</th>'
        '<th>Request</th>'
        '<th>Stage</th>'
        '<th>Started</th>'
        '<th>Finished</th>'
        '</tr>')
  
  for jobRow in jobRows:
    if jobRow['username']:
      usernameStr = jobRow["username"]
    else:
      usernameStr = ' '
      
    if jobRow['request_id']:
      requestIdStr = ('<a href="/dashboard/?method=show-request&'
                      'request_id=%s">%s</a>' %
                      (jobRow["request_id"], jobRow["request_id"]))
    else:
      requestIdStr = ' '
      
    if jobRow['stage_id']:
      stageIdStr = ('<a href="/dashboard/?method=show-stage&request_id=%s&'
                    'stage_id=%s">%s</a>' %
                    (jobRow["request_id"], 
                     jobRow["stage_id"], jobRow["stage_id"]))
    else:
      stageIdStr = ' '  
  
    print('<tr>'
          '<td><a href="/dashboard/?method=show-job&jobsub_id=%s">%s</a></td>'
          '<td>%s</td>'
          '<td>%s</td>'
          '<td>%s</td>'          
          '<td>%s</td>'          
          '<td>%s</td>'
          '<td>%s</td>'
          '<td>%s</td>'
          '<td>%s</td>'
          '</tr>'
          % (jobRow['jobsub_id'], html.escape(jobRow['jobsub_id'], quote=True),
             jobRow['jobsub_state'],
             jobRow['allocation_state'],
             jobRow['site_name'],
             usernameStr,
             requestIdStr,
             stageIdStr,
             jobRow["allocation_time"],
             jobRow["finished_time"]             
            )
         )    

  print("</table>")
  footer()

def listSites(cgiValues):
      
  header("WFS: Sites")

  print("<h1>Sites</h1>")
  
  query = ("SELECT * FROM sites "
           "ORDER BY site_name"
          )

  wfs.db.cur.execute(query)
  siteRows = wfs.db.cur.fetchall()

  print('<table>')
  
  print('<tr>'
        '<th>Site name</th>'
        '<th>Jobsub site name</th>'
        '<th>WLCG site name</th>'
        '<th>Enabled?</th>'
        '<th>Max jobs</th>'
        '<th colspan=2>&nbsp;</th>'
        '</tr>')
  
  for siteRow in siteRows:  
    print('<tr>'
          '<td><a href="/dashboard/?method=show-site&site_name=%s">%s</a></td>'
          '<td>%s</td>'
          '<td>%s</td>'
          '<td>%s</td>'
          '<td>%d</td>'
          '<td><a '
          'href="https://dune-cric.cern.ch/core/experimentsite/detail/%s/">'
          'CRIC</a></td>'
          '<td><form method="post" style="display:inline" '
          'action="https://goc.egi.eu/portal/index.php?Page_Type=Search">'
          '<input type="hidden" name="SearchString" value="%s">'
          '<input type="submit" value="GOCDB"></form></td>'
          '</tr>'
          % (siteRow['site_name'], siteRow['site_name'],
             siteRow['jobsub_site_name'],
             siteRow['wlcg_site_name'],
             bool(siteRow['enabled']),
             siteRow['max_jobs'],
             siteRow['site_name'],
             siteRow['wlcg_site_name']
            )
         )    

  print("</table>")
  footer()

def listStorages(cgiValues):
      
  header("WFS: Storages")

  print("<h1>Storages</h1>")
  
  query = "SELECT * FROM storages ORDER BY rse_name"
  wfs.db.cur.execute(query)
  storageRows = wfs.db.cur.fetchall()

  print('<table>')
  
  print('<tr>'
        '<th>RSE name</th>'
        '<th>Occupancy</th>'
        '<th>Read</th>'
        '<th>Write</th>'
        '<th>Delete</th>'
        '<th>For output</th>'
        '</tr>')
  
  for storageRow in storageRows:  
    print('<tr>'
          '<td><a href="/dashboard/?method=show-storage&rse_name=%s">%s</a></td>'
          '<td>%.2f</td>'
          '<td>%s</td>'
          '<td>%s</td>'
          '<td>%s</td>'
          '<td>%s</td>'
          '</tr>' 
          % (storageRow['rse_name'], storageRow['rse_name'],
             storageRow['occupancy'],
             bool(storageRow['rse_read']),
             bool(storageRow['rse_write']),
             bool(storageRow['rse_delete']),
             bool(storageRow['use_for_output'])
            )
         )    

  print("</table>")
  footer()

def showSite(cgiValues):
      
  try:
    siteName = cgiValues.getfirst("site_name")
  except:
    errorPage("site_name must be given")
    
  if not wfs.db.stringIsSite(siteName):
    errorPage("Invalid site name!")
        
  header("WFS: Site " + siteName)

  print("<h1>Site %s</h1>" % siteName)
  
  query = 'SELECT * FROM sites WHERE site_name="%s"' % siteName
  wfs.db.cur.execute(query)
  siteRow = wfs.db.cur.fetchone()

  print('<table>')
  
  print('<tr><td>Site name</td><td>%s</td></tr>' % siteName)
  
  print('<tr><td>Jobsub site name</td><td>%s</td></tr>' 
        % siteRow['jobsub_site_name'])

  print('<tr><td>WLCG site name</td><td>%s</td></tr>' 
        % siteRow['wlcg_site_name'])

  print('<tr><td>Enabled?</td><td>%s</td></tr>' 
        % bool(siteRow['enabled']))

  print('<tr><td>Max number of jobs</td><td>%d</td></tr>' % siteRow['max_jobs'])
  
  print('<tr><td>External info</td><td><a '
          'href="https://dune-cric.cern.ch/core/experimentsite/detail/%s/">'
          'CRIC</a> '
        '<form method="post" style="display:inline" '
          'action="https://goc.egi.eu/portal/index.php?Page_Type=Search">'
          '<input type="hidden" name="SearchString" value="%s">'
          '<input type="submit" value="GOCDB"></form></td>'
          '</tr>' % (siteRow['site_name'], siteRow['wlcg_site_name']))

  print("</table>")

  print("<h2>Slot sizes</h2>")

  query = ('SELECT * FROM slot_sizes WHERE site_id=%d '
           'ORDER BY min_processors' % siteRow['site_id'])
  wfs.db.cur.execute(query)
  slotRows = wfs.db.cur.fetchall()

  print('<table>'
        '<tr><th colspan=2>Processors OR Memory (MB)</th>'
        '<th>Wall time (s)</th>'
        '<th>Last submission</th><th>Last no match</th>'
        '<th>Last allocation</th></tr>')

  for slotRow in slotRows:
    print('<tr><td>%d &lt; p &le; %d</td>'
          '<td>%d &lt; m &le; %d</td>'
          '<td>t &le; %d</td>'
          '<td>%s</td>'
          '<td>%s</td>'
          '<td>%s</td>'
          '</tr>' 
          % (slotRow['min_processors'],
             slotRow['max_processors'],
             int(slotRow['min_rss_bytes'] / 1048576), 
             int(slotRow['max_rss_bytes'] / 1048576),
             slotRow['max_wall_seconds'],
             slotRow['last_submitted_time'],
             slotRow['last_no_match_time'],
             slotRow['last_allocation_time']
            )
         )

  print('</table>')


  print("<h2>Storages by distance</h2>")

  query = ('SELECT rse_name,occupancy,rse_write,rse_read,rse_delete,'
           'use_for_output,distance FROM storages '
           'LEFT JOIN sites_storages ON sites_storages.rse_id=storages.rse_id '
           'WHERE site_id=%d '
           'ORDER BY distance,rse_name' % siteRow['site_id'])

  wfs.db.cur.execute(query)
  storageRows = wfs.db.cur.fetchall()

  print('<table>')
  
  print('<tr>'
        '<th>RSE name</th>'
        '<th>Distance</th>'
        '<th>Occupancy</th>'
        '<th>Read</th>'
        '<th>Write</th>'
        '<th>Delete</th>'
        '<th>For output</th>'
        '</tr>')
  
  for storageRow in storageRows:  
    print('<tr>'
          '<td><a href="/dashboard/?method=show-storage&rse_name=%s">%s</a></td>'
          '<td>%d</td>'
          '<td>%.2f</td>'
          '<td>%s</td>'
          '<td>%s</td>'
          '<td>%s</td>'
          '<td>%s</td>'
          '</tr>' 
          % (storageRow['rse_name'], storageRow['rse_name'],
             int(storageRow['distance']),
             storageRow['occupancy'],
             bool(storageRow['rse_read']),
             bool(storageRow['rse_write']),
             bool(storageRow['rse_delete']),
             bool(storageRow['use_for_output'])
            )
         )    

  print("</table>")

  footer()

def showStorage(cgiValues):
      
  try:
    rseName = cgiValues.getfirst("rse_name")
  except:
    errorPage("rse_name must be given")
    
  if not wfs.db.stringIsSite(rseName):
    errorPage("Invalid RSE name!")
        
  header("WFS: Storage " + rseName)

  print("<h1>Storage %s</h1>" % rseName)
  
  query = 'SELECT * FROM storages WHERE rse_name="%s"' % rseName
  wfs.db.cur.execute(query)
  storageRow = wfs.db.cur.fetchone()

  print('<table>')
  
  print('<tr><td>RSE name</td><td>%s</td></tr>' % rseName)
  
  print('<tr><td>Occupancy</td><td>%.2f</td></tr>' % storageRow['occupancy'])

  print('<tr><td>Read</td><td>%s</td></tr>' % bool(storageRow['rse_read']))
  print('<tr><td>Write</td><td>%s</td></tr>' % bool(storageRow['rse_write']))
  print('<tr><td>Delete</td><td>%s</td></tr>' % bool(storageRow['rse_delete']))
  print('<tr><td>For output</td><td>%s</td></tr>' 
        % bool(storageRow['use_for_output']))

  print('</table>')

  print("<h2>Sites by distance</h2>")

  query = ('SELECT site_name,distance,enabled FROM sites '
           'LEFT JOIN sites_storages ON sites_storages.site_id=sites.site_id '
           'WHERE rse_id=%d '
           'ORDER BY distance,site_name' % storageRow['rse_id'])

  wfs.db.cur.execute(query)
  siteRows = wfs.db.cur.fetchall()

  print('<table>')
  
  print('<tr>'
        '<th>Site name</th>'
        '<th>Distance</th>'
        '<th>Enabled</th>'
        '</tr>')
  
  for siteRow in siteRows:  
    print('<tr>'
          '<td><a href="/dashboard/?method=show-site&site_name=%s">%s</a></td>'
          '<td>%d</td>'
          '<td>%s</td>'
          '</tr>' 
          % (siteRow['site_name'], siteRow['site_name'],
             int(siteRow['distance']),
             bool(siteRow['enabled'])
            )
         )    

  print("</table>")

  footer()

#
# PROGRAM MAIN
#

try:
  wfs.db.conn = MySQLdb.connect(host="localhost", user=wfs.conf.mysqlUser, 
                        passwd=wfs.conf.mysqlPassword, db='wfdb')
  wfs.db.conn.autocommit(False)
  wfs.db.cur = wfs.db.conn.cursor(MySQLdb.cursors.DictCursor) 
except:
  print('Status: 500 Internal Server Error')
  print()
  print('Problem with database connection')
  sys.exit(0)

cgiValues = cgi.FieldStorage()

method = cgiValues.getfirst("method")

if method is None:
  mainPage()
  
if method == "list-requests":
  listRequests(cgiValues)

if method == "show-request":
  showRequest(cgiValues)

if method == "show-stage":
  showStage(cgiValues)

if method == "list-files":
  listFiles(cgiValues)

if method == "show-file":
  showFile(cgiValues)

if method == "show-job":
  showJob(cgiValues)

if method == "list-jobs":
  listJobs(cgiValues)

if method == "list-sites":
  listSites(cgiValues)

if method == "list-storages":
  listStorages(cgiValues)

if method == "show-site":
  showSite(cgiValues)

if method == "show-storage":
  showStorage(cgiValues)

print('Status: 400 Bad Request')
print()
print('Method not recognised')
sys.exit(0)
