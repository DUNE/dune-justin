#!/usr/bin/python3
#
#  dashboard-cgi - Workflow System dashboard
#
#  Andrew McNab, University of Manchester.
#  Copyright (c) 2013-22. All rights reserved.
#
#  Redistribution and use in source and binary forms, with or
#  without modification, are permitted provided that the following
#  conditions are met:
#
#    o Redistributions of source code must retain the above
#      copyright notice, this list of conditions and the following
#      disclaimer. 
#    o Redistributions in binary form must reproduce the above
#      copyright notice, this list of conditions and the following
#      disclaimer in the documentation and/or other materials
#      provided with the distribution. 
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
#  CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
#  INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
#  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
#  BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
#  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
#  TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
#  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
#  ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
#  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
#  OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#  POSSIBILITY OF SUCH DAMAGE.
#

import os
import io
import re
import sys
import cgi
import time
import json
import uuid
import html
import urllib
import urllib.parse
import string
import MySQLdb

# wfs/conf.py must define these variables in a way that is both
# valid Python and valid Bash!
#
# mysqlUser='username'
# mysqlPassword='PAsSWoRd'
#
import wfs

def header(title):
  print("Status: 200 OK")
  print("Content-Type: text/html")
  print()
  print("<html><head><title>%s</title>" % title)
  print(
"""<style>
table { border-collapse: collapse; border: medium solid black;}
tr { text-align: left }
td,th { border: thin solid black; padding: 0.75ex }
</style>
</head><body>
<p>
<a href="/dashboard/">Dashboard</a> . 
<a href="/dashboard/?method=list-requests">Requests</a> . 
<a href="/dashboard/?method=list-jobs">Jobs</a> . 
<a href="/dashboard/?method=list-events">Events</a> . 
<a href="/dashboard/?method=list-sites">Sites</a> . 
<a href="/dashboard/?method=list-storages">Storages</a> .
<a href="/dashboard/?method=wtf-results">AWT</a> .
<a href="https://dune.github.io/dune-wfs/">Docs</a>
</p>
""")

def footer():
  print("<hr>Time now: %s" % time.strftime('%Y-%m-%d %H:%M:%S %Z'))
  print("</body></html>")
  sys.exit()

def errorPage(message):
  header("Error")
  print("<h1>Error</h1>")
  print("<p>%s</p>" % message)
  footer()

def spaceForUnixEpoch(s):
#  print('<!-- %s %s -->' % (wfs.db.unixEpoch, s))
  if str(s) == wfs.db.unixEpoch:
    return '&nbsp;'
  else:
    return str(s)

def printPager(pageNumber, pageLength, rowsLen, urlTemplate):

  print('<p>Page: ')

  for pageno in range(pageNumber + 1):
    if pageno == pageNumber:
      print(' %d ' % (pageno + 1))
    else:
      print((' <a href="' + urlTemplate + '">%d</a> ') % 
            (pageno, pageLength, pageno + 1))
            
  if rowsLen > pageLength:
    print((' <a href="' + urlTemplate + '">Next</a> ') % 
          (pageNumber + 1, pageLength))
  
def mainPage():
  header("WFS: Dashboard")

  print("<h1>Dashboard</h1>")
  
  print('<ul>')
  print('<li><a href="/dashboard/?method=list-requests">Requests</a></li>')
  print('<li><a href="/dashboard/?method=list-jobs">Jobs</a></li>')
  print('<li><a href="/dashboard/?method=list-events">Events</a></li>')
  print('<li><a href="/dashboard/?method=list-sites">Sites</a></li>')
  print('<li><a href="/dashboard/?method=list-storages">Storages</a></li>')
  print('<li><a href="/dashboard/?method=wtf-results">Automated Workflow Tests</a></li>')
  print('<li><a href="https://dune.github.io/dune-wfs/">Docs</a></li>')
  print('</ul>')
  
  footer()

def listRequests(cgiValues, pageNumber, pageLength):
  header("WFS: Requests")

  print("<h1>Requests</h1>")
  
  query = ('SELECT request_id,name,username,state,mql,created,submitted,'
           'started,finished '
           'FROM requests '
           'LEFT JOIN users ON requests.user_id=users.user_id '
           'ORDER BY request_id DESC LIMIT %d,%d' %
           (pageNumber * pageLength, pageLength + 1))

  wfs.db.cur.execute(query)
  rows = wfs.db.cur.fetchall()

  printPager(pageNumber, pageLength, len(rows), 
             "/dashboard/?method=list-requests&page_number=%d&page_length=%d")
             
  print('<p><table')
  print('<tr><th>Request ID</th><th>Name</th><th>User</th><th>State</th>'
        '<th>MQL</th><th>Created</th><th>Submitted</th><th>Started</th>'
        '<th>Finished</th><tr>')

  for row in rows[:pageLength]:
    print('<tr><td><a href="/dashboard/?method=show-request&request_id=%s">'
          '%s</a></td><td>%s</td><td>%s</td><td>%s</td><td>%s</td>'
          '<td>%s</td><td>%s</td><td>%s</td><td>%s</td>'
          '</tr>' % 
          (row["request_id"], row["request_id"],
           html.escape(row["name"], quote=True),
           row["username"],
           row["state"],
           html.escape(row["mql"], quote=True),
           spaceForUnixEpoch(row['created']),
           spaceForUnixEpoch(row['submitted']),
           spaceForUnixEpoch(row['started']),
           spaceForUnixEpoch(row['finished'])
          )
         )

  print("</table>")
  
  printPager(pageNumber, pageLength, len(rows), 
             "/dashboard/?method=list-requests&page_number=%d&page_length=%d")
  footer()

def showRequest(cgiValues):
  try:
    requestID = int(cgiValues.getfirst("request_id"))
  except:
    errorPage("request_id must be given")
  
  header("WFS: Request %d" % requestID)

  query = ("SELECT requests.name,requests.state,"
           "users.username,"
           "requests.created,requests.submitted,requests.started,"
           "requests.checking,requests.finished,mql,"
           "requests.refind_seconds,requests.refind_start_time,"
           "requests.refind_end_time "
           "FROM requests "
           "LEFT JOIN users ON users.user_id=requests.user_id "
           "WHERE request_id=%d "
           "ORDER BY request_id" % requestID)

  wfs.db.cur.execute(query)
  requestRow = wfs.db.cur.fetchone()
  
  state = requestRow['state']

  print("<h1>Request %d</h1>" % requestID)
  
  print('<table')

  print('<tr><td>Name</td><td>%s</td></tr>' % 
        html.escape(requestRow['name'], quote=True))
  print('<tr><td>State</td><td>%s</td></tr>' % state)
  print('<tr><td>MQL</td><td>%s</td></tr>' % 
        html.escape(requestRow['mql'], quote=True))

  if requestRow['refind_seconds'] == 0:
    print('<tr><td>Finding</td><td>once</td></tr>')
  else:
    print('<tr><td>Finding</td><td>every %d hour(s), %s to %s</td></tr>' %
          (int(requestRow['refind_seconds'] / 3600), 
           requestRow['refind_start_time'],
           requestRow['refind_end_time'])
         )
      
  print('<tr><td>Created by</td><td>%s</td></tr>' % 
        requestRow['username'])

  print('<tr><td>Created</td><td>%s</td></tr>' % 
        spaceForUnixEpoch(requestRow['created']))

  print('<tr><td>Submitted</td><td>%s</td></tr>' % 
        spaceForUnixEpoch(requestRow['submitted']))

  print('<tr><td>Started</td><td>%s</td></tr>' % 
        spaceForUnixEpoch(requestRow['started']))

  print('<tr><td>Checking</td><td>%s</td></tr>' % 
        spaceForUnixEpoch(requestRow['checking']))

  print('<tr><td>Finished</td><td>%s</td></tr>' % 
        spaceForUnixEpoch(requestRow['finished']))
  
  print("</table>")
  
  query = ("SELECT * "
           "FROM stages "
           "WHERE request_id=%d "
           "ORDER BY stage_id" % requestID)

  wfs.db.cur.execute(query)
  stagesRows = wfs.db.cur.fetchall()
  
  print('<h2>Stages</h2>')
  print('<table')
  print("<tr><th>Stage ID</th><th>Rank</th><th>Files</th><th>Finding</th>"
        "<th>Unallocated</th><th>Allocated</th><th>Outputting</th>"
        "<th>Processed</th><th>Not found</th><th>Failed</th><tr>")

  for stageRow in stagesRows:
    numFinding      = int(stageRow["num_finding"])
    numUnallocated  = int(stageRow["num_unallocated"])
    numAllocated    = int(stageRow["num_allocated"])
    numOutputting   = int(stageRow["num_outputting"])
    numProcessed    = int(stageRow["num_processed"])
    numNotfound     = int(stageRow["num_notfound"])
    numFailed       = int(stageRow["num_failed"])
    numFiles        = (numFinding + numUnallocated + numAllocated + 
                      numOutputting + numProcessed + numNotfound + numFailed)
    
    print('<tr><td><a href="/dashboard/?method=show-stage&request_id=%s&stage_id=%s">'
          '%s</a></td>'
          '<td>%d</td>'
          '<td><a href="/dashboard/?method=list-files&request_id=%s&stage_id=%s">%s</a></td>'
          '<td><a href="/dashboard/?method=list-files&request_id=%s&stage_id=%s&state=finding">%s</a></td>'
          '<td><a href="/dashboard/?method=list-files&request_id=%s&stage_id=%s&state=unallocated">%s</a></td>'
          '<td><a href="/dashboard/?method=list-files&request_id=%s&stage_id=%s&state=allocated">%s</a></td>'
          '<td><a href="/dashboard/?method=list-files&request_id=%s&stage_id=%s&state=outputting">%s</a></td>'
          '<td><a href="/dashboard/?method=list-files&request_id=%s&stage_id=%s&state=processed">%s</a></td>'
          '<td><a href="/dashboard/?method=list-files&request_id=%s&stage_id=%s&state=notfound">%s</a></td>'
          '<td><a href="/dashboard/?method=list-files&request_id=%s&stage_id=%s&state=failed">%s</a></td>'
          '</tr>' % 
          (stageRow["request_id"], stageRow["stage_id"], stageRow["stage_id"],
           stageRow["stage_rank"],
           stageRow["request_id"], stageRow["stage_id"], numFiles, 
           stageRow["request_id"], stageRow["stage_id"], numFinding, 
           stageRow["request_id"], stageRow["stage_id"], numUnallocated, 
           stageRow["request_id"], stageRow["stage_id"], numAllocated, 
           stageRow["request_id"], stageRow["stage_id"], numOutputting, 
           stageRow["request_id"], stageRow["stage_id"], numProcessed,
           stageRow["request_id"], stageRow["stage_id"], numNotfound,
           stageRow["request_id"], stageRow["stage_id"], numFailed))

  print("</table>")

  footer()

def showStage(cgiValues):
  try:
    requestID = int(cgiValues.getfirst("request_id"))
  except:
    errorPage("request_id must be given")
  
  try:
    stageID = int(cgiValues.getfirst("stage_id"))
  except:
    errorPage("stage_id must be given")
  
  header("WFS: Request %d, Stage %d" % (requestID, stageID))

  query = ("SELECT "
           "stages.stage_rank,"
           "stages.processors,"
           "stages.wall_seconds,"
           "stages.rss_bytes,"
           "stages.max_distance,"
           "stages.num_finding,"
           "stages.num_unallocated,"
           "stages.num_allocated,"
           "stages.num_outputting,"
           "stages.num_processed,"
           "stages.num_notfound,"
           "stages.num_failed,"
           "bootstraps.bootstrap "
           "FROM stages "
           "LEFT JOIN bootstraps ON bootstraps.request_id=stages.request_id"
           " AND bootstraps.stage_id=stages.stage_id "
           "WHERE stages.request_id=%d AND stages.stage_id=%d" %
           (requestID, stageID))

  wfs.db.cur.execute(query)
  stageRow = wfs.db.cur.fetchone()
  
  print("<h1>Request %d, Stage %d</h1>" % (requestID, stageID))
  
  print('<table')

  print('<tr><td>Rank</td>'
        '<td>%d</td></tr>' % stageRow["stage_rank"])

  print('<tr><td>Processors</td>'
        '<td>%s</td></tr>' % stageRow["processors"])

  print('<tr><td>Wall seconds</td>'
        '<td>%s</td></tr>' % stageRow["wall_seconds"])

  print('<tr><td>RSS bytes</td>'
        '<td>%s (%d MB)</td></tr>' % 
        (stageRow["rss_bytes"], 
         int(stageRow["rss_bytes"]) / 1048576))

  print('<tr><td>Max distance for inputs</td>'
        '<td>%.1f</td></tr>' % stageRow["max_distance"])

  print('<tr><td>Output RSEs</td>'
        '<td>')
        
  query = ("SELECT rse_name "
           "FROM stages_output_storages "
           "LEFT JOIN storages ON stages_output_storages.rse_id=storages.rse_id "
           "WHERE request_id=%d AND stage_id=%d "
           "ORDER BY rse_name" %
           (requestID, stageID))

  wfs.db.cur.execute(query)
  rseRows = wfs.db.cur.fetchall()
  
  if (len(rseRows) == 0):
    print("(any)")
  else:
    for rseRow in rseRows:
      print("%s " % rseRow['rse_name'])
        
  print('</td></tr>')

  numFinding      = int(stageRow["num_finding"])
  numUnallocated  = int(stageRow["num_unallocated"])
  numAllocated    = int(stageRow["num_allocated"])
  numOutputting   = int(stageRow["num_outputting"])
  numProcessed    = int(stageRow["num_processed"])
  numNotfound     = int(stageRow["num_notfound"])
  numFailed       = int(stageRow["num_failed"])
  numFiles        = (numFinding + numUnallocated + numAllocated + 
                    numProcessed + numNotfound + numFailed)

  print('<tr><td>Total files</td>'
        '<td><a href="/dashboard/?method=list-files&request_id=%d&stage_id=%d">%d</a></td></tr>'
        % (requestID, stageID,numFiles))
    
  print('<tr><td>Finding</td>'
        '<td><a href="/dashboard/?method=list-files&request_id=%d&stage_id=%d&state=finding">%d</a></td></tr>'
        % (requestID, stageID, numFinding))
    
  print('<tr><td>Unallocated</td>'
        '<td><a href="/dashboard/?method=list-files&request_id=%d&stage_id=%d&state=unallocated">%d</a></td></tr>'
        % (requestID, stageID, numUnallocated))
    
  print('<tr><td>Allocated</td>'
        '<td><a href="/dashboard/?method=list-files&request_id=%d&stage_id=%d&state=allocated">%d</a></td></tr>'
        % (requestID, stageID, numAllocated))
    
  print('<tr><td>Outputting</td>'
        '<td><a href="/dashboard/?method=list-files&request_id=%d&stage_id=%d&state=outputting">%d</a></td></tr>'
        % (requestID, stageID, numOutputting))
        
  print('<tr><td>Processed</td>'
        '<td><a href="/dashboard/?method=list-files&request_id=%d&stage_id=%d&state=processed">%d</a></td></tr>'
        % (requestID, stageID, numProcessed))
        
  print('<tr><td>Not found</td>'
        '<td><a href="/dashboard/?method=list-files&request_id=%d&stage_id=%d&state=notfound">%d</a></td></tr>'
        % (requestID, stageID, numNotfound))
        
  print('<tr><td>Failed</td>'
        '<td><a href="/dashboard/?method=list-files&request_id=%d&stage_id=%d&state=failed">%d</a></td></tr>'
        % (requestID, stageID, numFailed))
        
  print('</table>')
    
  print("<h2>Output patterns</h2>")
  print('<table><tr><th>Dataset</th><th>Scope</th><th>Pattern</th>'
        '<th>For next stage</th></tr>') 

  query = ("SELECT dataset,file_scope,file_pattern,for_next_stage "
           "FROM stages_outputs "
           "WHERE request_id=%d AND stage_id=%d "
           "ORDER BY dataset,file_scope,file_pattern" %
           (requestID, stageID))

  wfs.db.cur.execute(query)
  patternRows = wfs.db.cur.fetchall()

  for patternRow in patternRows:
    print("<tr><td>%s</td><td>%s</td><td>%s</td><td>%s</td></tr>" %
           (patternRow["dataset"],
            patternRow["file_scope"],
            html.escape(patternRow["file_pattern"], quote=True),
            bool(patternRow["for_next_stage"])))

  print('</table>') 

  # RSE counts

  rseCounts = {}

  query = ('SELECT rse_name,COUNT(*) AS file_count FROM events '
           'LEFT JOIN storages ON storages.rse_id=events.rse_id '
           'WHERE request_id=%d AND stage_id=%d AND event_type_id=%d '
           'GROUP BY rse_name ORDER BY file_count DESC' %
           (requestID, stageID, wfs.db.event_FILE_ALLOCATED))

  wfs.db.cur.execute(query)
  rseRows = wfs.db.cur.fetchall()
  
  for rseRow in rseRows:
  
    if rseRow['rse_name'] not in rseCounts:
      rseCounts[rseRow['rse_name']] = { 'inputs': 0, 'outputs': 0 }

    rseCounts[rseRow['rse_name']]['inputs'] = rseRow['file_count']

  query = ('SELECT rse_name,COUNT(*) AS file_count FROM events '
           'LEFT JOIN storages ON storages.rse_id=events.rse_id '
           'WHERE request_id=%d AND stage_id=%d AND event_type_id=%d '
           'GROUP BY rse_name ORDER BY file_count DESC' %
           (requestID, stageID, wfs.db.event_FILE_CREATED))

  wfs.db.cur.execute(query)
  rseRows = wfs.db.cur.fetchall()
  
  for rseRow in rseRows:
  
    if rseRow['rse_name'] not in rseCounts:
      rseCounts[rseRow['rse_name']] = { 'inputs': 0, 'outputs': 0 }

    rseCounts[rseRow['rse_name']]['outputs'] = rseRow['file_count']
    
  if rseCounts:
    print("<h2>RSEs used</h2>")
    print('<table><tr><th>Name</th><th>Inputs</th><th>Outputs</th></tr>')

    for rseName in rseCounts:
      print("<tr><td>%s</td><td>%d</td><td>%d</td></tr>" %
            (rseName,
             rseCounts[rseName]['inputs'],
             rseCounts[rseName]['outputs']
            ))

    print('</table>') 

  # Reset event counts

  resetCounts = {}

  query = ('SELECT site_name,COUNT(*) AS site_count FROM events '
           'LEFT JOIN sites ON sites.site_id=events.site_id '
           'WHERE request_id=%d AND stage_id=%d AND event_type_id=%d '
           'GROUP BY site_name ORDER BY site_count DESC' %
           (requestID, stageID, wfs.db.event_FILE_ALLOCATED_RESET))

  wfs.db.cur.execute(query)
  resetRows = wfs.db.cur.fetchall()
  
  for resetRow in resetRows:
  
    if resetRow['site_name'] not in resetCounts:
      resetCounts[resetRow['site_name']] = { 'allocated': 0, 'outputting': 0 }

    resetCounts[resetRow['site_name']]['allocated'] = resetRow['site_count']

  query = ('SELECT site_name,COUNT(*) AS site_count FROM events '
           'LEFT JOIN sites ON sites.site_id=events.site_id '
           'WHERE request_id=%d AND stage_id=%d AND event_type_id=%d '
           'GROUP BY site_name ORDER BY site_count DESC' %
           (requestID, stageID, wfs.db.event_FILE_OUTPUTTING_RESET))

  wfs.db.cur.execute(query)
  resetRows = wfs.db.cur.fetchall()
  
  for resetRow in resetRows:
  
    if resetRow['site_name'] not in resetCounts:
      resetCounts[resetRow['site_name']] = { 'allocated': 0, 'outputting': 0 }

    resetCounts[resetRow['site_name']]['outputting'] = resetRow['site_count']

  if resetCounts:
    print("<h2>File reset events</h2>")
    print('<table><tr><th>Site</th><th>Allocated</th><th>Outputting</th></tr>')

    for siteName in resetCounts:
      print("<tr><td>%s</td><td>%d</td><td>%d</td></tr>" %
            (siteName,
             resetCounts[siteName]['allocated'],
             resetCounts[siteName]['outputting']
            ))

    print('</table>') 

  print("<h2>Bootstrap script</h2>")
  print('<table><tr><td><pre>') 

  print(html.escape(
   stageRow["bootstrap"].encode('ascii',errors='ignore').decode(), 
   quote=True))
  
  print('</pre></td></tr></table>') 

  footer()

def listFiles(cgiValues, pageNumber, pageLength):

  try:
    requestID = int(cgiValues.getfirst("request_id"))
  except:
    errorPage("request_id must be given")
  
  try:
    stageID = int(cgiValues.getfirst("stage_id"))
  except:
    errorPage("stage_id must be given")

  state = str(cgiValues.getfirst("state"))

  if state == 'finding' or state == 'unallocated' or state == 'allocated' \
     or state == 'outputting' or state == 'processed' or state == 'notfound' \
     or state == 'failed':
    stateFilter = 'AND files.state="' + state + '"'
    stateText = ' (state = ' + state + ')'
  else:
    stateFilter = ''
    stateText = ''
    state = ''
    
  header("WFS: Files for Request %d, Stage %d%s" 
         % (requestID, stageID, stateText))

  print("<h1>Files  for Request %d, Stage %d%s</h1>" 
         % (requestID, stageID, stateText))
  
  query = ("SELECT files.file_did,files.state,event_time,"
           "storages.rse_name,jobs.jobsub_id,sites.site_name,"
           "allocations "
           "FROM files "
           "LEFT JOIN events"
           " ON files.wfs_job_id=events.wfs_job_id AND events.event_type_id=%d "
           "LEFT JOIN storages ON events.rse_id=storages.rse_id "
           "LEFT JOIN jobs ON jobs.wfs_job_id=files.wfs_job_id "
           "LEFT JOIN sites ON jobs.site_id=sites.site_id "
           "WHERE files.request_id=%d AND files.stage_id=%d %s "
           "ORDER BY files.file_id LIMIT %d,%d" % 
           (wfs.db.event_FILE_ALLOCATED, requestID, stageID, stateFilter,
            pageNumber * pageLength, pageLength + 1))

  wfs.db.cur.execute(query)
  filesRows = wfs.db.cur.fetchall()

  printPager(pageNumber, pageLength, len(filesRows),
             '/dashboard/?method=list-files&page_number=%d&page_length=%d'
             '&request_id=' + str(requestID) + 
             '&stage_id=' + str(stageID) + 
             '&state=' + state)

  print(
"""<p><table>
<tr><th rowspan="2">DID</th><th rowspan="2">Attempts</th><th rowspan="2">State</th><th colspan="4">Allocated</th></tr>
<tr><th>Time</th><th>RSE</th><th>Site</th><th>Jobsub ID</th></tr>""")

  for fileRow in filesRows[:pageLength]:
    print('<tr><td><a href="/dashboard/?method=show-file&request_id=%d&stage_id=%d&file_did=%s">'
          '%s</a></td><td>%d</td><td>%s</td>' % 
          (requestID, 
           stageID, 
           urllib.parse.quote(fileRow["file_did"], safe=''),
           html.escape(fileRow["file_did"], quote=True),
           fileRow["allocations"], fileRow["state"]
          )
         )
         
    if fileRow["state"] in ['allocated', 'outputting', 'processed', 'failed']:
      print('<td>%s</td>'
            '<td><a href="/dashboard/?method=show-storage&rse_name=%s">%s</a></td>'
            '<td><a href="/dashboard/?method=show-site&site_name=%s">%s</a></td>'
            '<td><a href="/dashboard/?method=show-job&jobsub_id=%s">%s</a></td></tr>' % 
            (str(fileRow["event_time"]),
             str(fileRow["rse_name"]),  str(fileRow["rse_name"]),
             str(fileRow["site_name"]), str(fileRow["site_name"]),
             str(fileRow["jobsub_id"]), str(fileRow["jobsub_id"])
            )
           )
    else:
      print('<td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>')
      
  print("</table>")
  
  printPager(pageNumber, pageLength, len(filesRows),
             '/dashboard/?method=list-files&page_number=%d&page_length=%d'
             '&request_id=' + str(requestID) + 
             '&stage_id=' + str(stageID) + 
             '&state=' + state)

  footer()

def showFile(cgiValues):

  try:
    fileDID = cgiValues.getfirst("file_did")
  except:
    errorPage("file_did must be given")

  if '"' in fileDID:
    errorPage("Bad format of file_did")
      
  try:
    requestID = int(cgiValues.getfirst("request_id"))
  except:
    errorPage("request_id must be given")
  
  try:
    stageID = int(cgiValues.getfirst("stage_id"))
  except:
    errorPage("stage_id must be given")

  header("WFS: File %s" 
         % html.escape(fileDID, quote=True))

  print("<h1>File %s</h1>"
         % html.escape(fileDID, quote=True))
  
  query = ('SELECT file_id,state '
           'FROM files '
           'WHERE request_id=%d AND stage_id=%d and file_did="%s"' %
           (requestID, stageID, fileDID))

  wfs.db.cur.execute(query)
  filesRows = wfs.db.cur.fetchall()

  fileID = int(filesRows[0]["file_id"])

  query = ("SELECT allocation_state,jobsub_id,event_time,"
           "site_name,rse_name FROM events "
           "LEFT JOIN storages ON storages.rse_id=events.rse_id "
           "LEFT JOIN sites ON sites.site_id=events.site_id "
           "LEFT JOIN jobs ON events.wfs_job_id=jobs.wfs_job_id "
           "WHERE event_type_id=%d AND file_id=%d ORDER BY event_id" 
           % (wfs.db.event_FILE_ALLOCATED, fileID))

  wfs.db.cur.execute(query)
  jobsRows = wfs.db.cur.fetchall()

  query = ('SELECT wan_pfn,lan_pfn,rse_name '
           'FROM replicas '
           'LEFT JOIN storages ON storages.rse_id=replicas.rse_id '
           'WHERE file_id=%d' % fileID)

  wfs.db.cur.execute(query)
  replicaRows = wfs.db.cur.fetchall()

  print('<p><table>')
  
  print('<tr><td>Request ID</td>'
        '<td><a href="/dashboard/?method=show-request&request_id=%d">%d</a></td></tr>'
        % (requestID, requestID))
        
  print('<tr><td>Stage ID</td>'
        '<td><a href="/dashboard/?method=show-stage&request_id=%d&stage_id=%d">%d</a></td></tr>'
        % (requestID, stageID, stageID))
        
  print('<tr><td>State</td>'
        '<td>%s</td></tr>'
        % filesRows[0]["state"])
      
  print('<tr><td>Replicas</td><td>')
  
  for replicaRow in replicaRows:  
  
    if replicaRow["lan_pfn"]:
      print('<small>%s (wan): %s </small><br>' % 
            (replicaRow["rse_name"], 
             replicaRow["wan_pfn"]))
      print('<small>%s (lan): %s </small><br>' % 
            (replicaRow["rse_name"], 
             replicaRow["lan_pfn"]))

    else:
      print('<small>%s: %s </small><br>' % 
            (replicaRow["rse_name"], 
             replicaRow["wan_pfn"]))

  print('</td></tr>')

  print('<tr><td>Jobs</td><td>')
  
  for jobRow in jobsRows:
  
    print('<a href="/dashboard/?method=show-job&jobsub_id=%s">%s</a> '
          '(%s &nbsp; %s &nbsp; %s)<br>' % 
          (jobRow["jobsub_id"], jobRow["jobsub_id"], 
           jobRow["allocation_state"],
           jobRow["site_name"],
           jobRow["rse_name"])
         )

  print('</td></tr>')

  print('<tr><td colspan=2><a href="'
   'https://metacat.fnal.gov:9443/dune_meta_demo/app/gui/show_file?did=%s">'
   'Find in MetaCat</a></td></tr>' % urllib.parse.quote_plus(fileDID))

  print("</table>")
  
  footer()

def showJob(cgiValues):
  try:
    jobsubID = cgiValues.getfirst("jobsub_id")
  except:
    errorPage("jobsub_id must be given")
      
  header("WFS: Jobsub ID %s" % jobsubID)

  print("<h1>Jobsub ID %s</h1>" % jobsubID)
  
  query = ("SELECT jobs.wfs_job_id,jobs.request_id,jobs.stage_id,sites.site_name,"
           "jobs.hostname,jobs.cpuinfo,jobs.os_release,username,"
           "jobs.rss_bytes,jobs.processors,jobs.wall_seconds,"
           "jobs.allocator_name,jobs.allocation_state,jobs.allocation_time,"
           "jobs.submitted_time,jobs.finished_time,jobs.jobsub_state,"
           "jobs.heartbeat_time,jobs.outputting_time,"
           "jobs.for_wtf,jobs.site_job_id,"
           "slot_sizes.max_processors,slot_sizes.min_processors,"
           "slot_sizes.max_rss_bytes,slot_sizes.min_rss_bytes,"
           "slot_sizes.max_wall_seconds,bootstrap_log "
           "FROM jobs "
           "LEFT JOIN requests ON requests.request_id=jobs.request_id "
           "LEFT JOIN users ON requests.user_id=users.user_id "
           "LEFT JOIN sites ON jobs.site_id=sites.site_id "
           "LEFT JOIN slot_sizes ON jobs.slot_size_id=slot_sizes.slot_size_id "
           "LEFT JOIN jobs_logs ON jobs_logs.wfs_job_id=jobs.wfs_job_id "
           "WHERE jobs.jobsub_id='%s'" % jobsubID)

  wfs.db.cur.execute(query)
  jobRow = wfs.db.cur.fetchone()

  query = ("SELECT file_did FROM events "
           "LEFT JOIN files ON events.file_id=files.file_id "
           "WHERE events.wfs_job_id=%d AND event_type_id=%d "
           "ORDER BY event_id" % 
           (jobRow['wfs_job_id'], wfs.db.event_FILE_ALLOCATED))

  wfs.db.cur.execute(query)
  inputFilesRows = wfs.db.cur.fetchall()

  query = ("SELECT file_did,files.stage_id FROM events "
           "LEFT JOIN files ON events.file_id=files.file_id "
           "WHERE events.wfs_job_id=%d AND event_type_id=%d "
           "ORDER BY event_id" % 
           (jobRow['wfs_job_id'], wfs.db.event_FILE_CREATED))

  wfs.db.cur.execute(query)
  outputFilesRows = wfs.db.cur.fetchall()

  print('<table>')
  
  print('<tr><td>Jobsub state</td>'
        '<td>%s</td></tr>'
        % jobRow["jobsub_state"])
      
  print('<tr><td>Allocation state</td>'
        '<td>%s</td></tr>'
        % jobRow["allocation_state"])
      
  print('<tr><td>Jobsub ID</td>'
        '<td>%s</td></tr>'
        % html.escape(jobsubID, quote=True))

  print('<tr><td>Site job ID</td>'
        '<td>%s</td></tr>'
        % html.escape(jobRow['site_job_id'], quote=True))

  if jobRow['for_wtf']: 
    print('<tr><td>Workflow Testing</td>'
          '<td>Yes</td></tr>')

  print('<tr><td>Submitted time</td>'
        '<td>%s</td></tr>'
        % jobRow["submitted_time"])
      
  print('<tr><td>Last heartbeat</td>'
        '<td>%s</td></tr>'
        % spaceForUnixEpoch(jobRow["heartbeat_time"]))
      
  print('<tr><td>Allocator name</td>'
        '<td>%s</td></tr>'
        % html.escape(jobRow["allocator_name"], quote=True))

  if jobRow["site_name"]:
    print('<tr><td>Site</td>'
          '<td><a href="/dashboard/?method=show-site&site_name=%s">'
          '%s</a></td></tr>'
          % (jobRow["site_name"], jobRow["site_name"]))

  print('<tr><td>Slot</td><td>'
        '%d &lt; processors &le; %d<br>'
        '%d &lt; rss bytes &le; %d<br>'
        'wall seconds &le; %d</td></tr>'
        % (jobRow["min_processors"], jobRow["max_processors"],
           jobRow["min_rss_bytes"], jobRow["max_rss_bytes"],
           jobRow["max_wall_seconds"]
          )
       )

  if jobRow["hostname"]:
    print('<tr><td>Hostname</td>'
          '<td>%s</td></tr>'
          % html.escape(jobRow["hostname"], quote=True))
  
  if jobRow["cpuinfo"]:
    print('<tr><td>cpuinfo</td>'
          '<td>%s</td></tr>'
          % html.escape(jobRow["cpuinfo"], quote=True))

  if jobRow["os_release"]:
    print('<tr><td>OS release</td>'
          '<td>%s</td></tr>'
          % html.escape(jobRow["os_release"], quote=True))

  if jobRow["rss_bytes"]:
    print('<tr><td>RSS bytes</td>'
          '<td>%s (%d MB)</td></tr>' % 
          (jobRow["rss_bytes"], 
           int(jobRow["rss_bytes"]) / 1048576))

  if jobRow["processors"]:
    print('<tr><td>Processors</td>'
          '<td>%s</td></tr>'
          % jobRow["processors"])

  if jobRow["wall_seconds"]:
    print('<tr><td>Wall seconds limit</td>'
          '<td>%s (%d hours)</td></tr>'
          % (jobRow["wall_seconds"],
             int(jobRow["wall_seconds"]) / 3600))

  print('<tr><td>Request by</td>')
  
  if jobRow['username']:
    print('<td>%s</td></tr>' % jobRow['username'])
  else:
    print('<td>&nbsp;</td></tr>')

  print('<tr><td>Request ID</td>')
  
  if jobRow['request_id']:
    print('<td><a href="/dashboard/?method=show-request&request_id=%s">'
          '%s</a></td></tr>'
           % (jobRow["request_id"],
              jobRow["request_id"]))
  else:
    print('<td>&nbsp;</td></tr>')
        
  print('<tr><td>Stage ID</td>')
  
  if jobRow['stage_id']:
    print('<td><a href="/dashboard/?method=show-stage&request_id=%s&'
          'stage_id=%s">%s</a></td></tr>'
          % (jobRow["request_id"], jobRow["stage_id"],
             jobRow["stage_id"]))
  else:
    print('<td>&nbsp;</td></tr>')
        
  print('<tr><td>Started</td>'
        '<td>%s</td></tr>'
        % spaceForUnixEpoch(jobRow["allocation_time"]))

  print('<tr><td>Outputting started</td>'
        '<td>%s</td></tr>'
        % spaceForUnixEpoch(jobRow["outputting_time"]))

  print('<tr><td>Finished</td>'
        '<td>%s</td></tr>'
        % spaceForUnixEpoch(jobRow["finished_time"]))

  print('<tr><td>Input files</td><td>')
  
  for inputFileRow in inputFilesRows:
    try:
      print('<a href="/dashboard/?method=show-file&request_id=%d&stage_id=%d&file_did=%s">'
          '%s</a><br>' % 
          (jobRow["request_id"], 
           jobRow["stage_id"],
           urllib.parse.quote(str(inputFileRow["file_did"]), safe=''),
           html.escape(inputFileRow["file_did"], quote=True)
          )
         )
    except Exception as e:
      print('<!-- %s -->' % str(e))
      
  print('</td></tr>')

  print('<tr><td>Output files</td><td>')
  
  for outputFileRow in outputFilesRows:
    try:
      print('<a href="/dashboard/?method=show-file&request_id=%d&stage_id=%d&file_did=%s">'
          '%s</a><br>' % 
          (jobRow["request_id"], 
           outputFileRow["stage_id"],
           urllib.parse.quote(str(outputFileRow["file_did"]), safe=''),
           html.escape(outputFileRow["file_did"], quote=True)
          )
         )
    except Exception as e:
      print('<!-- %s -->' % str(e))
      
  print('</td></tr>')

  print('<tr><td colspan=2><a '
        'href="/dashboard/?method=list-events&jobsub_id=%s">List job events'
        '</a></td></tr>'
        % jobsubID)

  print("</table>")

  if jobRow['bootstrap_log']:
    print("<h2>Bootstrap log</h2>")
    print('<table><tr><td><pre>') 
 
    print(html.escape(jobRow["bootstrap_log"].strip(), 
          quote=True))
  
    print('</pre></td></tr></table>') 

  if os.path.isfile('/var/spool/wfs/fetchlog/%s' % jobsubID.replace('@','_')):
  
    try:
      showJobsubLog = cgiValues.getfirst("show_jobsub_log")
    except:
      showJobsubLog = 'false'

    print('<h2 id="jobsublog">Jobsub log</h2>')

    if showJobsubLog == 'true':
      print('<table><tr><td><pre>') 

      print(html.escape(
       open('/var/spool/wfs/fetchlog/%s' %
           jobsubID.replace('@','_')).read().encode('ascii',
                                                    errors='ignore').decode(), 
       quote=True))
  
      print('</pre></td></tr></table>') 
      
    else:
      print('<p><a href="/dashboard/show?method=show-job&jobsub_id=%s'
            '&show_jobsub_log=true#jobsublog">Show jobsub log</a></p>'
            % jobsubID)

  footer()

def listJobs(cgiValues, pageNumber, pageLength):
      
  urlTemplate   = '/dashboard/?method=list-jobs&page_number=%d&page_length=%d'
  filters       = []
  titleSuffixes = []

  try:
    requestID    = int(cgiValues.getfirst("request_id"))
    urlTemplate += ('&request_id=%d' % requestID)
    titleSuffixes.append('Request %d' % requestID) 
    filters.append('jobs.request_id=%d' % requestID)
  except:
    pass
  
  try:
    stageID      = int(cgiValues.getfirst("stage_id"))
    urlTemplate += '&stage_id=' + str(stageID)
    titleSuffixes.append('Stage %d' % stageID) 
    filters.append('jobs.stage_id=%d' % stageID)
  except:
    pass

  allocationState = str(cgiValues.getfirst("allocation_state"))

  if allocationState in ['submitted','started','processing','outputting',
                         'finished', 'notused','failed']:
    filters.append('jobs.allocation_state="%s"' % allocationState)
    urlTemplate += '&allocation_state=' + allocationState
    titleSuffixes.append('Allocation State %s' % allocationState)
  else:
    pass

  siteName = cgiValues.getfirst("site_name")
  if siteName and wfs.db.stringIsSite(siteName):
    filters.append('sites.site_name="%s"' % siteName)
    urlTemplate += '&site_name=' + siteName
    titleSuffixes.append('Site %s' % siteName)

  filter = ' AND '.join(filters)

  if filter:
    filter = 'WHERE ' + filter
  else:
    filter = ''
    
  if titleSuffixes:
    titleSuffix = ' for ' + ', '.join(titleSuffixes)
  else:
    titleSuffix = ''
    
  header("WFS: Jobs" + titleSuffix)

  print("<h1>Jobs%s</h1>" % titleSuffix)
  
  query = ("SELECT jobs.jobsub_id,jobs.request_id,jobs.stage_id,sites.site_name,"
           "jobs.allocation_state,jobs.allocation_time,jobs.submitted_time,"
           "jobs.finished_time,jobs.jobsub_state,users.username,jobs.for_wtf "
           "FROM jobs "
           "LEFT JOIN requests ON requests.request_id=jobs.request_id "
           "LEFT JOIN users ON requests.user_id=users.user_id "
           "LEFT JOIN sites ON jobs.site_id=sites.site_id "
           "%s "
           "ORDER BY jobs.wfs_job_id DESC LIMIT %d,%d" %
           (filter, pageNumber * pageLength, pageLength + 1)
          )

  wfs.db.cur.execute(query)
  jobRows = wfs.db.cur.fetchall()

  printPager(pageNumber, pageLength, len(jobRows), urlTemplate)

  print('<p><table>')
  
  print('<tr>'
        '<th>Jobsub ID</th>'
        '<th>Jobsub State</th>'
        '<th>Allocation state</th>'
        '<th>Site</th>'
        '<th>User</th>'
        '<th>Request</th>'
        '<th>Stage</th>'
        '<th>Submitted</th>'
        '<th>Started</th>'
        '<th>Finished</th>'
        '</tr>')
  
  for jobRow in jobRows[:pageLength]:
    if jobRow['username']:
      usernameStr = jobRow["username"]
    else:
      usernameStr = ' '

    if jobRow['for_wtf']:
      requestStageStr = '<td colspan=2>Workflow Testing</td>'
      
    else:
      if jobRow['request_id']:
        requestStageStr = ('<td><a href="/dashboard/?method=show-request&'
                      'request_id=%s">%s</a></td>' %
                      (jobRow["request_id"], jobRow["request_id"]))
      else:
        requestStageStr = '<td> </td>'
      
      if jobRow['stage_id']:
        requestStageStr += (
             '<td><a href="/dashboard/?method=show-stage&request_id=%s&'
             'stage_id=%s">%s</a></td>' %
             (jobRow["request_id"], 
              jobRow["stage_id"], jobRow["stage_id"]))
      else:
        requestStageStr += '<td> </td>'
  
    print('<tr>'
          '<td><a href="/dashboard/?method=show-job&jobsub_id=%s">%s</a></td>'
          '<td>%s</td>'
          '<td>%s</td>'
          '<td><a href="/dashboard/?method=show-site&site_name=%s">%s</a></td>'          
          '<td>%s</td>'
          '%s'
          '<td>%s</td>'
          '<td>%s</td>'
          '<td>%s</td>'
          '</tr>'
          % (jobRow['jobsub_id'], html.escape(jobRow['jobsub_id'], quote=True),
             jobRow['jobsub_state'],
             jobRow['allocation_state'],
             jobRow['site_name'], jobRow['site_name'],
             usernameStr,
             requestStageStr,
             spaceForUnixEpoch(jobRow["submitted_time"]),
             spaceForUnixEpoch(jobRow["allocation_time"]),
             spaceForUnixEpoch(jobRow["finished_time"])
            )
         )    

  print("</table>")

  printPager(pageNumber, pageLength, len(jobRows), urlTemplate)

  footer()

def listSites(cgiValues):
      
  header("WFS: Sites")

  print("<h1>Sites</h1>")
  
  query = ("SELECT * FROM sites "
           "ORDER BY site_name"
          )

  wfs.db.cur.execute(query)
  siteRows = wfs.db.cur.fetchall()

  print('<table>')
  
  print('<tr>'
        '<th>Site name</th>'
        '<th>Enabled?</th>'
        '<th>Last job</th>'
        '<th>Jobsub site name</th>'
        '<th>WLCG site name</th>'
        '<th>Submitted jobs</th>'
        '<th>Running jobs</th>'
        '<th>Max jobs</th>'
        '<th colspan=2>&nbsp;</th>'
        '</tr>')
  
  for siteRow in siteRows:  
    if str(siteRow['last_get_stage_time']) == wfs.db.unixEpoch:
      lastGetStageStr = '&nbsp;'
    else:
      lastGetStageStr = str(siteRow['last_get_stage_time'])
  
    print('<tr>'
          '<td><a href="/dashboard/?method=show-site&site_name=%s">%s</a></td>'
          '<td style="font-weight: %s">%s</td>'
          '<td>%s</td>'
          '<td>%s</td>'
          '<td>%s</td>'
          '<td>%d</td>'
          '<td>%d</td>'
          '<td>%d</td>'
          '<td><a '
          'href="https://dune-cric.cern.ch/core/experimentsite/detail/%s/">'
          'CRIC</a></td>'
          '<td><form method="post" style="display:inline" '
          'action="https://goc.egi.eu/portal/index.php?Page_Type=Search">'
          '<input type="hidden" name="SearchString" value="%s">'
          '<input type="submit" value="GOCDB"></form></td>'
          '</tr>'
          % (siteRow['site_name'], siteRow['site_name'],
             'bold' if siteRow['enabled'] else 'normal',
             'TRUE' if siteRow['enabled'] else 'False',
             lastGetStageStr,
             siteRow['jobsub_site_name'],
             siteRow['wlcg_site_name'],
             siteRow['submitted_jobs'],
             siteRow['running_jobs'],
             siteRow['max_jobs'],
             siteRow['site_name'],
             siteRow['wlcg_site_name']
            )
         )    

  print("</table>")
  footer()

def listStorages(cgiValues):
      
  header("WFS: Storages")

  print("<h1>Storages</h1>")
  
  query = "SELECT * FROM storages ORDER BY rse_name"
  wfs.db.cur.execute(query)
  storageRows = wfs.db.cur.fetchall()

  print('<table>')
  
  print('<tr>'
        '<th>RSE name</th>'
        '<th>Occupancy</th>'
        '<th>Read</th>'
        '<th>Write</th>'
        '<th>Delete</th>'
        '<th>For output</th>'
        '<th>Write protcol</th>'
        '<th>Deterministic</th>'
        '</tr>')
  
  for storageRow in storageRows:  
    print('<tr>'
          '<td><a href="/dashboard/?method=show-storage&rse_name=%s">%s</a></td>'
          '<td>%.2f</td>'
          '<td>%s</td>'
          '<td>%s</td>'
          '<td>%s</td>'
          '<td style="font-weight: %s">%s</td>'
          '<td>%s</td>'
          '<td>%s</td>'
          '</tr>' 
          % (storageRow['rse_name'], storageRow['rse_name'],
             storageRow['occupancy'],
             bool(storageRow['rse_read']),
             bool(storageRow['rse_write']),
             bool(storageRow['rse_delete']),
             'bold' if storageRow['use_for_output'] else 'normal',
             'TRUE' if storageRow['use_for_output'] else 'False',
             storageRow['write_protocol'],
             bool(storageRow['deterministic_rse'])
            )
         )    

  print("</table>")
  footer()

def showSite(cgiValues):
      
  try:
    siteName = cgiValues.getfirst("site_name")
  except:
    errorPage("site_name must be given")
    
  if not wfs.db.stringIsSite(siteName):
    errorPage("Invalid site name!")
        
  header("WFS: Site " + siteName)

  print("<h1>Site %s</h1>" % siteName)
  
  query = 'SELECT * FROM sites WHERE site_name="%s"' % siteName
  wfs.db.cur.execute(query)
  siteRow = wfs.db.cur.fetchone()

  print('<table>')
  
  print('<tr><td>Site name</td><td>%s</td></tr>' % siteName)
  
  print('<tr><td>Jobsub site name</td><td>%s</td></tr>' 
        % siteRow['jobsub_site_name'])

  print('<tr><td>WLCG site name</td><td>%s</td></tr>' 
        % siteRow['wlcg_site_name'])

  print('<tr><td>Enabled?</td><td>%s</td></tr>' 
        % bool(siteRow['enabled']))

  print('<tr><td>Last submitted</td><td>%s</td></tr>' 
        % siteRow['last_submitted_time'])

  if str(siteRow['last_get_stage_time']) == wfs.db.unixEpoch:
    lastGetStageStr = '&nbsp;'
  else:
    lastGetStageStr = str(siteRow['last_get_stage_time'])

  print('<tr><td>Last job started</td><td>%s</td></tr>' % lastGetStageStr)

  print('<tr><td>Submitted jobs</td><td>%d</td></tr>' % siteRow['submitted_jobs'])

  print('<tr><td>Running jobs</td><td>%d</td></tr>' % siteRow['running_jobs'])

  print('<tr><td>Max number of jobs</td><td>%d</td></tr>' % siteRow['max_jobs'])

  print('<tr><td>Jobs</td><td>'
        '<a href="/dashboard/?method=list-jobs&site_name=%s">All</a> ' %
        siteName)
        
  for state in ['submitted', 'started', 'processing', 'outputting',
                'finished', 'notused', 'failed']:
    print('<a href="/dashboard/?method=list-jobs&allocation_state=%s&'
          'site_name=%s">%s</a> ' %
          (state, siteName, state.capitalize()))

  print('</td></tr>')
  
  print('<tr><td>External info</td><td><a '
          'href="https://dune-cric.cern.ch/core/experimentsite/detail/%s/">'
          'CRIC</a> '
        '<form method="post" style="display:inline" '
          'action="https://goc.egi.eu/portal/index.php?Page_Type=Search">'
          '<input type="hidden" name="SearchString" value="%s">'
          '<input type="submit" value="GOCDB"></form></td>'
          '</tr>' % (siteRow['site_name'], siteRow['wlcg_site_name']))

  print("</table>")

  print("<h2>Slot sizes</h2>")

  query = ('SELECT * FROM slot_sizes WHERE site_id=%d '
           'ORDER BY min_processors' % siteRow['site_id'])
  wfs.db.cur.execute(query)
  slotRows = wfs.db.cur.fetchall()

  print('<table>'
        '<tr><th colspan=2>Processors OR Memory (MB)</th>'
        '<th>Wall time (s)</th>'
        '<th>Last submission</th><th>Last no match</th>'
        '<th>Last allocation</th></tr>')

  for slotRow in slotRows:
    print('<tr><td>%d &lt; p &le; %d</td>'
          '<td>%d &lt; m &le; %d</td>'
          '<td>t &le; %d</td>'
          '<td>%s</td>'
          '<td>%s</td>'
          '<td>%s</td>'
          '</tr>' 
          % (slotRow['min_processors'],
             slotRow['max_processors'],
             int(slotRow['min_rss_bytes'] / 1048576), 
             int(slotRow['max_rss_bytes'] / 1048576),
             slotRow['max_wall_seconds'],
             slotRow['last_submitted_time'],
             slotRow['last_no_match_time'],
             slotRow['last_allocation_time']
            )
         )

  print('</table>')


  print("<h2>Storages by distance</h2>")

  query = ('SELECT rse_name,occupancy,rse_write,rse_read,rse_delete,'
           'use_for_output,distance,read_result,write_result,jobsub_id '
           'FROM storages '
           'LEFT JOIN sites_storages ON sites_storages.rse_id=storages.rse_id '
           'LEFT JOIN jobs ON sites_storages.wfs_job_id=jobs.wfs_job_id '
           'WHERE sites_storages.site_id=%d '
           'ORDER BY distance,rse_name' % siteRow['site_id'])

  wfs.db.cur.execute(query)
  storageRows = wfs.db.cur.fetchall()

  print("<p>Test values are xrdcp read and rucio write exit codes for jobs "
        "at each site contacting each RSE. 0 = success.</p>")

  print('<table>')
  
  print('<tr>'
        '<th>RSE name</th>'
        '<th>Distance</th>'
        '<th>Occupancy</th>'
        '<th>Read</th>'
        '<th>Write</th>'
        '<th>Delete</th>'
        '<th>For output</th>'
        '<th>Read test</th>'
        '<th>Write test</th>'
        '</tr>')
  
  for storageRow in storageRows:  
    print('<tr>'
          '<td><a href="/dashboard/?method=show-storage&rse_name=%s">%s</a></td>'
          '<td>%d</td>'
          '<td>%.2f</td>'
          '<td>%s</td>'
          '<td>%s</td>'
          '<td>%s</td>'
          '<td>%s</td>'
          % (storageRow['rse_name'], storageRow['rse_name'],
             int(storageRow['distance']),
             storageRow['occupancy'],
             bool(storageRow['rse_read']),
             bool(storageRow['rse_write']),
             bool(storageRow['rse_delete']),
             bool(storageRow['use_for_output'])
            )
         )    
         
    if int(storageRow['read_result']) == 255:
      print('<td> </td>')
    else:
      print('<td><a href="/dashboard/?method=show-job&jobsub_id=%s">'
            '%d</a></td>' % 
            (storageRow['jobsub_id'], int(storageRow['read_result'])))

    if int(storageRow['write_result']) == 255:
      print('<td> </td></tr>')
    else:
      print('<td><a href="/dashboard/?method=show-job&jobsub_id=%s">'
            '%d</a></td>' % 
            (storageRow['jobsub_id'], int(storageRow['write_result'])))

  print("</table>")

  footer()

def showStorage(cgiValues):
      
  try:
    rseName = cgiValues.getfirst("rse_name")
  except:
    errorPage("rse_name must be given")
    
  if not wfs.db.stringIsSite(rseName):
    errorPage("Invalid RSE name!")
        
  header("WFS: Storage " + rseName)

  print("<h1>Storage %s</h1>" % rseName)
  
  query = 'SELECT * FROM storages WHERE rse_name="%s"' % rseName
  wfs.db.cur.execute(query)
  storageRow = wfs.db.cur.fetchone()

  print('<table>')
  
  print('<tr><td>RSE name</td><td>%s</td></tr>' % rseName)
  
  print('<tr><td>Occupancy</td><td>%.2f</td></tr>' % storageRow['occupancy'])

  print('<tr><td>Read</td><td>%s</td></tr>' % bool(storageRow['rse_read']))
  print('<tr><td>Write</td><td>%s</td></tr>' % bool(storageRow['rse_write']))
  print('<tr><td>Delete</td><td>%s</td></tr>' % bool(storageRow['rse_delete']))
  print('<tr><td>For output</td><td>%s</td></tr>' 
        % bool(storageRow['use_for_output']))
  print('<tr><td>Deterministic</td><td>%s</td></tr>' 
        % bool(storageRow['deterministic_rse']))
  print('<tr><td>Write protocol</td><td>%s</td></tr>' 
        % storageRow['write_protocol'])

  print('</table>')

  print("<h2>Sites by distance</h2>")

  query = ('SELECT site_name,distance,enabled,'
           'read_result,write_result,jobsub_id '
           'FROM sites '
           'LEFT JOIN sites_storages ON sites_storages.site_id=sites.site_id '
           'LEFT JOIN jobs ON sites_storages.wfs_job_id=jobs.wfs_job_id '
           'WHERE rse_id=%d '
           'ORDER BY distance,site_name' % storageRow['rse_id'])

  wfs.db.cur.execute(query)
  siteRows = wfs.db.cur.fetchall()

  print("<p>Test values are xrdcp read and rucio write exit codes for jobs "
        "at each site contacting each RSE. 0 = success.</p>")

  print('<table>')
  
  print('<tr>'
        '<th>Site name</th>'
        '<th>Distance</th>'
        '<th>Enabled</th>'
        '<th>Read test</th>'
        '<th>Write test</th>'
        '</tr>')
  
  for siteRow in siteRows:  
    print('<tr>'
          '<td><a href="/dashboard/?method=show-site&site_name=%s">%s</a></td>'
          '<td>%d</td>'
          '<td>%s</td>'
          % (siteRow['site_name'], siteRow['site_name'],
             int(siteRow['distance']),
             bool(siteRow['enabled'])
            )
         )    

    if int(siteRow['read_result']) == 255:
      print('<td> </td>')
    else:
      print('<td><a href="/dashboard/?method=show-job&jobsub_id=%s">'
            '%d</a></td>' % 
            (siteRow['jobsub_id'], int(siteRow['read_result'])))

    if int(siteRow['write_result']) == 255:
      print('<td> </td></tr>')
    else:
      print('<td><a href="/dashboard/?method=show-job&jobsub_id=%s">'
            '%d</a></td>' % 
            (siteRow['jobsub_id'], int(siteRow['write_result'])))

  print("</table>")

  footer()

def listEvents(cgiValues, pageNumber, pageLength):

  whereList = []
  queryList = ''

  jobsubID = cgiValues.getfirst("jobsub_id")
  
  if jobsubID:
    whereList.append('jobsub_id="%s"' % jobsubID)
    queryList += '&jobsub_id=' + jobsubID

  if whereList:
    whereString = ' WHERE ' + 'AND'.join(whereList)
  else:
    whereString = ''
    
  header("WFS: Events")

  print("<h1>Events</h1>")
  
  query = ('SELECT event_id,event_type_id,events.request_id,events.stage_id,'
           'file_did,jobsub_id,site_name,rse_name,event_time '
           'FROM events '
           'LEFT JOIN files ON events.file_id=files.file_id '
           'LEFT JOIN jobs ON events.wfs_job_id=jobs.wfs_job_id '
           'LEFT JOIN sites ON events.site_id=sites.site_id '
           'LEFT JOIN storages ON events.rse_id=storages.rse_id '
           '%s '
           'ORDER BY event_id DESC LIMIT %d,%d' % 
           (whereString, pageNumber * pageLength, pageLength + 1))

  wfs.db.cur.execute(query)
  eventsRows = wfs.db.cur.fetchall()

  printPager(pageNumber, pageLength, len(eventsRows),
             '/dashboard/?method=list-events&page_number=%d&page_length=%d'
             + queryList)

  print(
"""<p><table>
<tr>
<th>Event</th><th>Type</th><th>Time</th>
<th>Request</th><th>Stage</th>
<th>File DID</th>
<th>Jobsub ID</th>
<th>Site</th>
<th>RSE</th>
</tr>""")

  for eventRow in eventsRows[:pageLength]:
    print('<tr><td>%d</td><td>%s</td><td>%s</td>' %
           (eventRow['event_id'], 
            wfs.db.eventTypes[eventRow['event_type_id']][0],
            eventRow['event_time']
          )          
         )

    if eventRow['request_id']: 
      print('<td><a href="/dashboard/?method=show-request&request_id=%d">'
            '%d</a></td>' 
            % (eventRow['request_id'], 
               eventRow['request_id']))
    else:
      print('<td>&nbsp;</td>')
         
    if eventRow['stage_id']: 
      print('<td><a href="/dashboard/?method=show-stage&request_id=%d'
            '&stage_id=%d">%d</a></td>' 
            % (eventRow['request_id'], 
               eventRow['stage_id'], 
               eventRow['stage_id']))
    else:
      print('<td>&nbsp;</td>')
         
    if eventRow['file_did']:
      print('<td><a href="/dashboard/?method=show-file&request_id=%d'
            '&stage_id=%d&file_did=%s">%s</td>' 
            % (eventRow['request_id'], 
               eventRow['stage_id'], 
               eventRow['file_did'], 
               eventRow['file_did']))
    else:
      print('<td>&nbsp;</td>')
         
    if eventRow['jobsub_id']: 
      print('<td><a href="/dashboard/?method=show-job&jobsub_id=%s">%s</a></td>'
            % (eventRow['jobsub_id'], eventRow['jobsub_id']))
    else:
      print('<td>&nbsp;</td>')
         
    if eventRow['site_name']: 
      print('<td><a href="/dashboard/?method=show-site&site_name=%s">%s</a></td>'
            % (eventRow['site_name'], eventRow['site_name']))
    else:
      print('<td>&nbsp;</td>')
         
    if eventRow['rse_name']: 
      print('<td><a href="/dashboard/?method=show-storage&rse_name=%s">%s</a></td>'
            % (eventRow['rse_name'], eventRow['rse_name']))
    else:
      print('<td>&nbsp;</td>')

    print('</tr>')
               
  print("</table>")
  
  printPager(pageNumber, pageLength, len(eventsRows),
             '/dashboard/?method=list-events&page_number=%d&page_length=%d'
             + queryList)

  footer()

def wtfResults(cgiValues):
              
  header("WFS: Automated Workflow Tests")

  print("<h1>Automated Workflow Tests</h1>")

  print("<p>Values are xrdcp read and rucio write exit codes for jobs at "
        "each site contacting each RSE. 0 = success. Enabled sites and "
        "storages allowed for output are in bold.</p>")

  sitesRows = wfs.db.select('SELECT site_name,enabled '
                            'FROM sites ORDER by site_name')
  siteNames        = []
  enabledSiteNames = []
  for siteRow in sitesRows:
    siteNames.append(siteRow['site_name'])
    if siteRow['enabled']:
      enabledSiteNames.append(siteRow['site_name'])

  storagesRows = wfs.db.select('SELECT rse_name,use_for_output '
                               'FROM storages '
                               'WHERE rse_name <> "MONTECARLO" '
                               'ORDER by rse_name')
  rseNames       = []
  outputRseNames = []
  for storageRow in storagesRows:
    rseNames.append(storageRow['rse_name'])
    if storageRow['use_for_output']:
      outputRseNames.append(storageRow['rse_name'])

  sitesStoragesMatrix = {}

  for siteName in siteNames:
    sitesStoragesMatrix[siteName] = {}
    for rseName in rseNames:
      sitesStoragesMatrix[siteName][rseName] = []
 
  resultsRows = wfs.db.select(
           'SELECT site_name,rse_name,read_result,write_result,jobsub_id '
           'FROM sites_storages '
           'LEFT JOIN sites ON sites_storages.site_id=sites.site_id '
           'LEFT JOIN storages ON sites_storages.rse_id=storages.rse_id '
           'LEFT JOIN jobs ON sites_storages.wfs_job_id=jobs.wfs_job_id '
           'WHERE rse_name <> "MONTECARLO"')

  # Put the results in nested dictionaries
  for results in resultsRows:
    sitesStoragesMatrix[results['site_name']][results['rse_name']] = \
      [results['read_result'], results['write_result'], results['jobsub_id']]

  print('<table>')

  # List of storages
  print('<tr><td> </td>')
  
  for rseName in rseNames:  
    if rseName in outputRseNames:
      cellType = 'th'
    else:
      cellType = 'td'
    print('<%s><div style="writing-mode: vertical-lr">'
          '<a href="/dashboard/?method=show-storage&rse_name=%s">%s</a>'
          '</div></%s>' % (cellType, rseName, rseName, cellType))

  print('<td> </td></tr>')

  # Go through the sites, Row by row 

  for siteName in siteNames:
    if siteName in enabledSiteNames:
      cellType = 'th'
    else:
      cellType = 'td'
    
    print('<tr><%s><a href="/dashboard/?method=show-site&site_name=%s">%s'
          '</a></%s>' % 
          (cellType, siteName, siteName, cellType))
  
    for rseName in rseNames:
      (readResult, writeResult, jobsubID) = \
                      sitesStoragesMatrix[siteName][rseName]

      if readResult == 255 and writeResult == 255:
        print('<td>&nbsp; &nbsp;</td>')
        
      else:
        if readResult == 255:
          s = '?'
        else:
          s = '%d' % readResult

        if writeResult == 255:
          s += '/?'
        else:
          s += '/%d' % writeResult
          
        print('<td><a href="/dashboard/?method=show-job&jobsub_id=%s">%s'
              '</a></td>' % (jobsubID, s))

    print('<%s><a href="/dashboard/?method=show-site&site_name=%s">%s'
          '</a></%s></tr>' % 
          (cellType, siteName, siteName, cellType))

  # List of storages
  print('<tr><td> </td>')
  
  for rseName in rseNames:
    if rseName in outputRseNames:
      cellType = 'th'
    else:
      cellType = 'td'
    print('<%s><div style="writing-mode: vertical-lr">'
          '<a href="/dashboard/?method=show-storage&rse_name=%s">%s</a>'
          '</div></%s>' % (cellType, rseName, rseName, cellType))

  print('<td> </td></tr>')

  print("</table>")

  footer()

#
# PROGRAM MAIN
#

wfs.conf.readConf()

try:
  wfs.db.conn = MySQLdb.connect(host=wfs.conf.mysqlHostname, 
                                user=wfs.conf.mysqlUsername, 
                                passwd=wfs.conf.mysqlPassword, 
                                db=wfs.conf.mysqlDbName)
  wfs.db.conn.autocommit(False)
  wfs.db.cur = wfs.db.conn.cursor(MySQLdb.cursors.DictCursor) 
except:
  print('Status: 500 Internal Server Error')
  print()
  print('Problem with database connection')
  sys.exit(0)

cgiValues = cgi.FieldStorage()

method = cgiValues.getfirst("method")

if method is None:
  mainPage()
  
try:
  pageNumber = int(cgiValues.getfirst("page_number"))
except:
  pageNumber = 0
    
try:
  pageLength = int(cgiValues.getfirst("page_length"))
except:
  pageLength = 30

if method == "list-requests":
  listRequests(cgiValues, pageNumber, pageLength)

if method == "show-request":
  showRequest(cgiValues)

if method == "show-stage":
  showStage(cgiValues)

if method == "list-files":
  listFiles(cgiValues, pageNumber, pageLength)

if method == "show-file":
  showFile(cgiValues)

if method == "show-job":
  showJob(cgiValues)

if method == "list-jobs":
  listJobs(cgiValues, pageNumber, pageLength)

if method == "list-sites":
  listSites(cgiValues)

if method == "list-storages":
  listStorages(cgiValues)

if method == "show-site":
  showSite(cgiValues)

if method == "show-storage":
  showStorage(cgiValues)

if method == "list-events":
  listEvents(cgiValues, pageNumber, pageLength)

if method == "wtf-results":
  wtfResults(cgiValues)

print('Status: 400 Bad Request')
print()
print('Method not recognised')
sys.exit(0)
