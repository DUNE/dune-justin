#
# justin-wsgi-dashboard - justIN workflow system dashboard
#
# Copyright 2013-25, Andrew McNab for the University of Manchester
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# This WSGI script relies on justin-api-import-script being run by
# the mod_wsgi directive WSGIImportScript

import re
import os
import sys
import ssl
import time
import html
import json
import secrets
import base64
import pprint
import textwrap
import urllib
import urllib.parse
import urllib.request

# install with pip3 install pygal
import pygal

# needs python36-markdown RPM
import markdown

import metacat.webapi

import justin

timeNow = None 
  
# Number of hours before AWT results go grey to indicate stale
awtGreyHours = 48

csvJsonMaxRows = 10000

class justinStackedLine(pygal.StackedLine):

  def __init__(self, imageSize, firstTime, hoursPerBin, numBins,
               legend_at_bottom_columns=3):
    self.imageSize = imageSize
    pygal.StackedLine.__init__(self, include_x_axis=True, 
                               stroke_style={'width': 2}, 
                               show_x_guides=True, 
                               style=pygal.style.LightColorizedStyle, 
                               x_label_rotation=30, 
                               width=800, 
                               height=500, 
                               x_title='Bin start times',
                               y_title='Number per bin',
#                               legend_at_bottom=True, 
                               legend_at_bottom_columns=legend_at_bottom_columns)
    self.x_labels = [ time.strftime('%b-%d %H:%M', 
                                    time.gmtime(
                             i * hoursPerBin * 3600 + firstTime
                                               ))
                        for i in range(0, numBins) ]

  def _points(self, x_pos):
        # Unfilled series to be overlayed rather than stacked
        """
        Convert given data values into drawable points (x, y)
        and interpolated points if interpolate option is specified
        """
        for series_group in (self.series, self.secondary_series):
            accumulation = [0] * self._len
            for serie in series_group[::-1 if self.stack_from_top else 1]:
              if serie.fill == False: # <--- this is the significant change
                serie.points = [ (x_pos[i], v) for i, v in enumerate(serie.values) ]
                if serie.points and self.interpolate:
                    serie.interpolated = self._interpolate(x_pos, serie.values)
                else:
                    serie.interpolated = []                
              else:
                accumulation = list(map(sum, zip(accumulation, serie.values)))
                serie.points = [
                    (x_pos[i], v)
                    for i, v in enumerate(accumulation)]
                if serie.points and self.interpolate:
                    serie.interpolated = self._interpolate(x_pos, accumulation)
                else:
                    serie.interpolated = []

def insertWBR(s):
  a = textwrap.wrap(text=s, width=20, drop_whitespace=False)

  for i in range(0, len(a)):
    a[i] = a[i].replace('<', '&lt;').replace('>', '&gt')

  return '<wbr>'.join(a)

def header(environ, user, title):

  if user is None:
    loginStr = (' &nbsp; &nbsp; &nbsp; '
                '<a href="%s&login" '
                'style="background: #E1703D; border-radius: 5px; padding: 5px">'
                'Login</a>'
                % environ['REQUEST_URI'])

  elif user == '':
    # Special for loginPage()
    loginStr = ''
  else:
    loginStr = (' &nbsp; &nbsp; &nbsp; '
                '<a href="/dashboard/?method=show-user&user_name=%s" '
                'style="background: #E1703D; border-radius: 5px; padding: 5px">'
                '%s</a>'
                % (user['user_name'], user['user_name']))

  if justin.bannerMessage:
    bannerMessageStr = '\n<p style="text-align: center">%s</p>\n' \
                       % justin.bannerMessage
  else:
    bannerMessageStr = ''

  return ("""<html><head><title>%s</title>
<link rel="icon" href="/favicon.png">
<style>
html,body { 
  font-family: Tahoma, Verdana, Arial, sans-serif; 
  font-size: 16px;
  color: #616161;
  background-color: #ffffff;
  margin: 0;
  padding: 0;
}
a {
  color: #337AB7;
  text-decoration: none;
}

label { white-space: nowrap; }

#top_strip,#bottomstrip { 
  color: #FFFFFF;
  font-weight: bold;
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 5px;
  background-color: #234D93;
  vertical-align: middle;
}
            
#top_strip a { color: #FFFFFF; text-decoration: none; }

#main_box {
  padding: 10px;
  overflow-x: auto;
  background-color: #FFFFFF;
}

.tooltip {
  position: relative;
  Xdisplay: inline-block;
  border-bottom: 1px dotted black;
}

.tooltip .tooltiptext {
  visibility: hidden;
  width: 120px;
  background-color: white;
  color: #000000;
  text-align: center;
  padding: 5px 0;
  border-radius: 6px;
  position: absolute;
  z-index: 1;
}

.tooltip:hover .tooltiptext {
  visibility: visible;
}

pre { background-color: #EEEEEE; padding: 5px; Xdisplay: block; }

table { border-collapse: collapse; border: medium solid #87ADD1; }
tr { text-align: left }
td,th { border: thin solid #87ADD1; padding: 0.75ex }

.center { margin-left: auto; margin-right: auto; }

.main_page_table table { margin-left: auto; 
                         margin-right: auto;
                         border: 20px solid white; 
                         border-collapse: separate;
                         padding: 10px; 
                       }
.main_page_table td    { background-color: #234D93; 
                         color: #FFFFFF; 
                         border: 20px solid white;
                         text-align: center;
                         font-size: 32px;
                         font-weight: bold;
                         width: 300px; 
                         height: 100px; 
                       }
.main_page_table a     { color: #E1703D; 
                         text-decoration: none;  
                       }

input[type=button], input[type=submit], input[type=reset] {
  background-color: #E1703D;
  border-style: none;
  border-radius: 5px; 
  padding: 5px;
  color: white;
  font-weight: bold;
}

</style>
<script type="text/javascript" 
 Xsrc="https://kozea.github.io/pygal.js/2.0.x/pygal-tooltips.min.js" 
 src="/pygal-tooltips.min.js"></script>
</head>
<body>
<div id="top_strip">
<a href="/dashboard/" style="font-size: 48px; color: #E1703D;">%s</a> &nbsp; &nbsp;
<a href="/dashboard/"><img src="/jclock50x50.png"></a> &nbsp; &nbsp; &nbsp;
<a href="/dashboard/">Dashboard</a> &nbsp; &nbsp; &nbsp;
<a href="/dashboard/?method=list-workflows">Workflows</a> &nbsp; &nbsp; &nbsp;
<a href="/dashboard/?method=list-jobs">Jobs</a> &nbsp; &nbsp; &nbsp;
<a href="/dashboard/?method=awt-results">AWT</a> &nbsp; &nbsp; &nbsp;
<a href="/dashboard/?method=list-sites">Sites</a> &nbsp; &nbsp; &nbsp;
<a href="/dashboard/?method=list-storages">Storages</a> &nbsp; &nbsp; &nbsp;
<a href="/docs/">Docs</a>%s
</div>
<div id="main_box">%s
""" % (title, 
       (environ['SERVER_NAME'].upper().split('.')[0]).split('-',1)[1] if '-' in environ['SERVER_NAME']
          else 'justIN',
       loginStr, bannerMessageStr))

def footer():
  return ('</div>'
          '<div id="bottomstrip">justIN time: %s &nbsp; '
          '&nbsp; &nbsp; justIN version: %s</div>\n</body></html>' 
          % (time.strftime('%Y-%m-%d %H:%M:%S %Z'), justin.justinVersion))

def errorPage(environ, user, message):
  output = header(environ, user, "Error")
  output += "<h1>Error</h1>\n<p>%s</p>" % html.escape(message, quote=True)
  output += footer()
  return output

def startResponseOK(startResponse, output, contentType = 'text/html',
                    contentDisposition = 'inline'):

  startResponse('200 OK',
                [('Content-type',        contentType),
                 ('Content-length',      str(len(output))),
                 ('Content-Disposition', contentDisposition)
                ])

def startResponseRedirect(startResponse, url):
  # HTTP redirect
  startResponse('302 Found', [('Location', url)] )

def spaceForUnixEpoch(s):
  if str(s) == justin.unixEpoch:
    return '&nbsp;'
  else:
    return str(s)

def daysHoursMinutes(seconds):
  # Convert integer seconds to a short string with days, hours, or minutes
  if seconds >= 86400:
    return '%dd' % int(seconds / 86400)
  
  if seconds >= 3600:
    return '%dh' % int(seconds / 3600)
    
  return '%dm' % int(seconds / 60)

def makePager(pageNumber, pageLength, rowsLen, urlTemplate):

  output = '<p>Page: '

  for pageno in range(pageNumber + 1):
    if pageno == pageNumber:
      output += ' %d ' % (pageno + 1)
    else:
      output += ((' <a href="' + urlTemplate + '">%d</a> ') % 
                 (pageno, pageLength, pageno + 1))
            
  if rowsLen > pageLength:
    output += ((' <a href="' + urlTemplate + '">Next</a> ') % 
               (pageNumber + 1, pageLength))

#  output += '\n<!-- ' + urlTemplate + '-->\n'
               
  return output

def buttonHTML(user = None, key = None, name = None, value = None, 
               label = None, nextURI = ''):

  return ( '<form style="display:inline">'
           '<input type="submit" value="%s" formmethod="post" '
           'formaction="/dashboard/">'
           '<input type="hidden" name="next_uri" value="%s">'
           '<input type="hidden" name="justin_code" value="%s">'
           '<input type="hidden" name="action_key" value="%s">'
           '<input type="hidden" name="action_name" value="%s">'
           '<input type="hidden" name="action_value" value="%s">'
           '</form>'
           % (label, nextURI, user['justin_code'], 
              str(key), name, str(value)) 
         )

def mainPage(environ, user):

  output = header(environ, user, "justIN: Dashboard")

  output += \
     ('<h1 style="text-align: center">DUNE justIN service</h1>'
      '<table class="center main_page_table">')

  query = ('SELECT ('
           'SELECT COUNT(*) FROM jobs WHERE job_state="started" OR '
           'job_state="processing" OR job_state="outputting") '
           'AS running_jobs,('
           'SELECT COUNT(*) FROM workflows '
           'WHERE state="running" AND workflow_id<>%d) AS running_workflows,('
           'SELECT COUNT(*) FROM files '
           'LEFT JOIN workflows ON files.workflow_id=workflows.workflow_id '
           'WHERE files.state="unallocated" AND workflows.state="running" '
           'AND workflows.workflow_id<>%d) AS unallocated_files,'
           '(SELECT key_value FROM keys_names_values '
           ' WHERE key_name="ping_rucio_milliseconds") '
           ' AS ping_rucio_milliseconds'  
           % (justin.awtWorkflowID, justin.awtWorkflowID))
  try:
    row = justin.select(query, justOne = True)
  except:
    pass
  else:
    output += \
     ('<p style="text-align: center">%d running job%s in %d running '
      'workflow%s. %d file%s not yet allocated to jobs. '
      'Rucio ping %.3fs.</p>\n' 
      % (row['running_jobs'], 
          '' if row['running_jobs'] == 1 else 's',
         row['running_workflows'], 
          '' if row['running_workflows'] == 1 else 's',
         row['unallocated_files'],
          '' if row['unallocated_files'] == 1 else 's',

         int(row['ping_rucio_milliseconds']) / 1000.0))

  cells = [
   { 'startRow'  : True,
     'endRow'    : False,
     'uri'       : '/dashboard/?method=list-workflows',
     'text'      : 'Workflows' },
   { 'startRow'  : False,
     'endRow'    : True,
     'uri'       : '/dashboard/?method=list-jobs',
     'text'      : 'Jobs' },
   { 'startRow'  : True,
     'endRow'    : False,
     'uri'       : '/dashboard/?method=list-events',
     'text'      : 'Events' },
   { 'startRow'  : False,
     'endRow'    : True,
     'uri'       : '/dashboard/?method=awt-results',
     'text'      : 'Automated Workflow Tests' },
   { 'startRow'  : True,
     'endRow'    : False,
     'uri'       : '/dashboard/?method=list-scopes',
     'text'      : 'Scopes' },
   { 'startRow'  : False,
     'endRow'    : True,
     'uri'       : '/dashboard/?method=list-archived-workflows',
     'text'      : 'Archived workflows' },
   { 'startRow'  : True,
     'endRow'    : False,
     'uri'       : '/dashboard/?method=list-sites',
     'text'      : 'Sites' },
   { 'startRow'  : False,
     'endRow'    : True,
     'uri'       : '/dashboard/?method=list-storages',
     'text'      : 'Storages' },
   { 'startRow'  : True,
     'endRow'    : False,
     'uri'       : '/dashboard/?method=list-quotas',
     'text'      : 'Quotas' },
   { 'startRow'  : False,
     'endRow'    : True,
     'uri'       : '/docs/',
     'text'      : 'Documentation' }
  ]

  for cellDict in cells:
 
    if cellDict['startRow'] and cellDict['endRow']:
      output += '<tr><td colspan=2 '
    elif cellDict['startRow']:
      output += '<tr><td '
    else:
      output += '<td '

    output += ('onclick="location.href=\'%s\'"><a href="%s">%s</a></td>' 
               % (cellDict['uri'], cellDict['uri'], cellDict['text']) )
   
    if cellDict['endRow']:
      output += '</tr>'

  output += '</table>' + footer()
  return output

def oidcTokensWorkflow(cilogonCode, environ):
  # Send an OIDC request to CILogon to get tokens for a user, using an
  # authorization code received from CILogon via the user's browser

  postData = urllib.parse.urlencode(
       { 'grant_type'    : 'authorization_code',
         'client_id'     : justin.cilogonClientID,
         'client_secret' : justin.cilogonSecret,
         'code'          : cilogonCode,
         'redirect_uri'  : 'https://%s/login/cilogon/login' % environ['SERVER_NAME']
       })

  httpRequest = urllib.request.Request('https://cilogon.org/oauth2/token',
                                       data = postData.encode(),
                                       method = 'POST')

  sslContext = ssl.SSLContext()
  sslContext.load_verify_locations(capath = '/etc/grid-security/certificates')

  try:
    response = urllib.request.urlopen(httpRequest, context = sslContext)
  except Exception as e:
    print('OIDC tokens HTTP request fails: ' + str(e), file=sys.stderr)
    return None
  else:
    if response.status != 200:
      print('OIDC tokens HTTP response not 200, code=%d' % response.status, 
          file=sys.stderr)
      return None
  
  try:
    responseData = response.read().decode('utf-8')
    responseDict = json.loads(responseData)
  except Exception as e:
    print('OIDC tokens request failed loading json: '+str(e), file=sys.stderr)
    return None

  print('responseDict=',responseDict,file=sys.stderr)

  try:
    tokensDict = {} 
    tokensDict['access_token'] = responseDict['access_token']
    tokensDict['access_dict']  = json.loads(base64.urlsafe_b64decode(
                     responseDict['access_token'].split('.')[1] + '=='))

    tokensDict['id_token'] = responseDict['id_token']
    tokensDict['id_dict']      = json.loads(base64.urlsafe_b64decode(
                     responseDict['id_token'].split('.')[1] + '=='))

    tokensDict['refresh_token'] = responseDict['refresh_token']
  except Exception as e:
    print('OIDC tokens parsing fails: '+str(e), file=sys.stderr)
    return None
  else:
    return tokensDict

def cilogonCallback(startResponse, environ):

  (justinSession, justinSecret) = getSessionCookies(environ)

  try:
    row = justin.select('SELECT saved_uri,linked_session_id FROM sessions '
                        'WHERE justin_session="%s" AND justin_secret="%s" AND '
                        'NOW() < expires_time AND session_type="web"'
                        % (justinSession, justinSecret), justOne = True)

    savedURI           = row['saved_uri']
    authorizeSessionID = int(row['linked_session_id'])
  except:
    justinSession      = None
    savedURI           = ''
    authorizeSessionID = 0

  cilogonCode  = None
  cilogonState = None
  rawValues = urllib.parse.parse_qs(environ.get('QUERY_STRING', ''))
  for i in rawValues:
    if str(i) == 'code' and justin.stringIsDomain(str(rawValues[i][0])):
      cilogonCode = str(rawValues[i][0])
    elif str(i) == 'state':
      cilogonState = str(rawValues[i][0])

  if not justinSession or (justinSession != cilogonState):
    output = errorPage(environ, None,
                       'Required session cookie not found! '
                       'Have you got cookies disabled in your web browser?')
    startResponseOK(startResponse, output)
    return output

  tokensDict = oidcTokensWorkflow(cilogonCode, environ)
  if not tokensDict:
    output = errorPage(environ, None,
                       'Failed to get your tokens from CILogon')
    startResponseOK(startResponse, output)
    return output

  pprint.pprint(tokensDict, stream = sys.stderr)

  try:
    wlcgGroups = tokensDict['access_dict']['wlcg.groups']
    if '/dune' not in wlcgGroups:
      raise
  except:
    output = errorPage(environ, None,
                       'You are not registered in the /dune group on CILogon!')
    startResponseOK(startResponse, output)
    return output

  try:
    eppn = tokensDict['id_dict']['eppn']
    if not justin.stringIsUsername(eppn):
      raise
  except:
    output = errorPage(environ,
                       'No eduPersonPrincipalName provided '
                       'by your identity provider / SSO!')
    startResponseOK(startResponse, output)
    return output

  # We have all the info from the tokens and have checked it, so now
  # associate the session with the corresponding user (and create if needed)

  try:
    row = justin.select('SELECT user_id '
                        'FROM principal_names '
                        'WHERE principal_name="%s"' % eppn, justOne = True)
    userID = int(row['user_id'])
  except:
    userID = None

  if not userID:
    # The user is ok but not in justIN's database yet - so try to add them
    userID = createUser(eppn)

    if not userID:
      output = errorPage(environ,
                       'Failed to create new user record for you!')
      startResponseOK(startResponse, output)
      return output
  
  try:
    query = ('UPDATE users SET access_token="%s",refresh_token="%s",'
             'access_token_created=FROM_UNIXTIME(%d),'
             'access_token_expires=FROM_UNIXTIME(%d) '
             'WHERE user_id=%d' 
             % (tokensDict['access_token'],
                tokensDict['refresh_token'],
                tokensDict['access_dict']['iat'],
                tokensDict['access_dict']['exp'],
                userID))

    justin.insertUpdate(query)

  except Exception as e:
    print('Failed to update users with tokens: ' + str(e), file=sys.stderr)
    output = errorPage(environ, 'Failed to store your tokens')
    startResponseOK(startResponse, output)
    return output

  namedQuotas      = []
  wlcgGroupsQuotes = []
  for i in wlcgGroups:
    wlcgGroupsQuotes.append('"' + i + '"')

  try:
    rows = justin.select('SELECT DISTINCT quota_name '
                    'FROM named_quotas '
                    'LEFT JOIN wlcg_groups '
                    'ON named_quotas.wlcg_group_id=wlcg_groups.wlcg_group_id '
                    'WHERE wlcg_groups.wlcg_group_name IN (%s) '
                    'OR named_quotas.user_id=%d' %
                    (','.join(wlcgGroupsQuotes), userID))
 
    for row in rows:
      if row['quota_name']:
        namedQuotas.append(row['quota_name'])

  except Exception as e:
    print('Failed to get named quotas: ' + str(e), file=sys.stderr)
    output = errorPage(environ, 'Failed to get named quotas')
    startResponseOK(startResponse, output)
    return output

  if authorizeSessionID:
     # If authorizing a computer, we create an extra session for that
     try:
        query = ('UPDATE sessions SET user_id=%d,wlcg_groups="%s",'
                 'named_quotas="%s",'
                 'expires_time=DATE_ADD(NOW(),INTERVAL 7 DAY) '
                 'WHERE session_id = %d AND NOW() < expires_time AND '
                 'user_id = 0 AND session_type = "command"'
                 % (userID, 
                    ' '.join(wlcgGroups), 
                    ' '.join(namedQuotas), 
                    authorizeSessionID))
        
        justin.insertUpdate(query)
     except Exception as e:
        print('UPDATE command sessions fails: ' + str(e), file=sys.stderr)
### NEED A PROPER RESPONSE HERE eg FOR EXPIRED command SESSION
        return ''

  # We always create a web session, since we are here anyway
  try:
      query = ('UPDATE sessions SET user_id=%d,wlcg_groups="%s",'
               'named_quotas="%s" '
               'WHERE justin_session="%s" AND justin_secret="%s" AND '
               'user_id=0 AND session_type="web"'
               % (userID, 
                  ' '.join(wlcgGroups),
                  ' '.join(namedQuotas),
                  justinSession, justinSecret))
      justin.insertUpdate(query)
  except Exception as e:
      print('UPDATE web sessions fails: ' + str(e), file=sys.stderr)
  else:
      # This is where the created user gets committed too
      justin.conn.commit()

  if not savedURI:
    savedURI = '/dashboard/'

  startResponse('302 Moved', [('Location',       savedURI),
                              ('Content-length', '0')
                             ])
  return ''

def loginPage(startResponse, environ, authorize=False):

  # Always create a new session
  justinSession = secrets.token_urlsafe(64)
  justinSecret  = secrets.token_urlsafe(64)
  justinCode    = secrets.token_urlsafe(64)
  userAgent     = environ.get('HTTP_USER_AGENT', '')
  ip            = environ.get('REMOTE_ADDR', '')

  if authorize:
    justinAuthorizeCode = environ['REQUEST_URI'].split('/')[-1]
    if not justin.stringIsSite(justinAuthorizeCode):
      output = errorPage(environ, '', "Failed to get authorize code")
      startResponseOK(startResponse, output)
      return output

    try:
      # Find the session ID created when the command contacted the 
      # justin-wsgi-commands service, so can link that and new web session
      authorizeRow = justin.select('SELECT session_id,justin_session,'
                          'os_release,hostname,ip '
                          'FROM sessions '
                          'WHERE justin_code="%s" AND sessions.user_id=0 '
                          'AND session_type="command"'
                          % justinAuthorizeCode, justOne = True)

      authorizeSessionID = int(authorizeRow['session_id'])
    except Exception as e:
      print('Get session for authorize fails: ' + str(e), file=sys.stderr)
      output = errorPage(environ, '', "Invalid authorize code")
      startResponseOK(startResponse, output)
      return output

    savedURI = '/dashboard/?method=authorized'
  else:
    authorizeSessionID = 0
    savedURI = environ['REQUEST_URI'][:-6] # remove '&login'

  try:
    justin.insertUpdate('INSERT INTO sessions SET '
                        'session_type="web",'
                        'created_time=NOW(),'
                        'expires_time=DATE_ADD(NOW(),INTERVAL 24 HOUR),'
                        'linked_session_id=%d,'
                        'justin_session="%s",'
                        'justin_secret="%s",'
                        'justin_code="%s",'
                        'user_agent="%s",'
                        'saved_uri="%s",'
                        'ip="%s"'
                        % (authorizeSessionID,
                           justinSession, justinSecret, justinCode,
                           userAgent.replace('\\','\\\\').replace('"','\\"'),
                           savedURI,
                           ip))
    justin.conn.commit()
  except:
    output = errorPage(environ, '', "Session creation fails")
    startResponseOK(startResponse, output)
    return output

  if authorize:
    output = header(environ, '', "justIN: Authorize computer")
    output += '<h1 style="text-align: center">Authorize computer</h1>'
  else:
    output = header(environ, '', "justIN: Login")
    output += '<h1 style="text-align: center">DUNE justIN service login</h1>'

  output += '<table style="border: 0"><tr>'
  output += '<td style="border: 0"><img src="/cilogon-login.png" width="300"></td>'

  if authorize:
    output += \
'''<td style="border: 0"><p>Session ID: %s</p>
<p>Computer: %s (%s) %s</p>
<p>You can use the button below to authorize your
computer to use the justin command. 
Your web browser will be directed to the CILogon website (screenshot to
the left) and you will be asked to select an identity provider. Currently 
only the Fermilab SSO is enabled for DUNE. The Log On button will then take 
you to Fermilab where you can authenticate with your Services username and 
password. (Screenshot to right.) 
Once you have successfully authenticated you will be directed
back to the justIN dashboard with a confirmation that the justin command
on your computer is now authorized for the next 7 days.</p>

''' % (authorizeRow['justin_session'][:7],
       authorizeRow['hostname'],
       authorizeRow['ip'],
       authorizeRow['os_release'])
  else:
    output += \
'''<td style="border: 0">You can use the button below to login to the 
justIN dashboard. 
Your web browser will be directed to the CILogon website (screenshot to
the left) and you will be asked to select an identity provider. Currently 
only the Fermilab SSO is enabled for DUNE. The Log On button will then take 
you to Fermilab where you can authenticate with your Services username and 
password. (Screenshot to right.) 
Once you have successfully authenticated you will be directed
back to the justIN dashboard, with your Fermilab eduPersonPrincipalName
now displayed on the top right of each page. justIN uses this name as 
your user name.

'''

  output += '<p><form style="text-align: center" method="GET" ' \
            'action="https://cilogon.org/authorize">\n'
  output += ('<input type="hidden" name="client_id" value="%s">\n'
             % justin.cilogonClientID)
  output += '<input type="hidden" name="state" value="%s">\n' % justinSession
  output += '<input type="hidden" name="response_type" value="code">\n'

  output += '''
<input type="hidden" name="redirect_uri" 
 value="https://%s/login/cilogon/login">
<input type="hidden" name="scope" value="%s">
<button type="submit" 
 style="background: #E1703D; border-radius: 5px; padding: 5px; color: white; font-weight: bold; font-size: 1em; border: 0; cursor: pointer">%s</button>
</form></p>''' % (environ['SERVER_NAME'], justin.cilogonScopes,
                  'Authorize' if authorize else 'Login')

  output += '</td>'

  output += '<td style="border: 0"><img src="/fermilab-login.png" width="300"></td>'

  output += '<tr></table>'
  output += footer()

  startResponse('200 OK',
     [('Content-type',   'text/html'),
      ('Content-length', str(len(output))),
      ('Set-Cookie',     'justin_session=%s; Max-Age=86400; Path=/; '
                         'Secure ; HttpOnly' % justinSession),
      ('Set-Cookie',     'justin_secret=%s; Max-Age=86400; Path=/; '
                         'Secure ; HttpOnly' % justinSecret)
     ])

  return output

def getSessionCookies(environ):

  justinSession = None
  justinSecret  = None

  httpCookie = environ.get('HTTP_COOKIE', '') 

  for nameValue in httpCookie.split(';'):
    if nameValue.strip().startswith('justin_session='):
      justinSession = nameValue.split('=')[1]
    elif nameValue.strip().startswith('justin_secret='):
      justinSecret = nameValue.split('=')[1]

  if not justinSession or not justinSession:
    return (None, None)

  if not justin.stringIsSite(justinSession) or \
     not justin.stringIsSite(justinSecret):
    return (None, None)

  return (justinSession, justinSecret)

def getUser(environ):

  (justinSession, justinSecret) = getSessionCookies(environ)
  if not justinSession:
    return None

  try:
    query = ('SELECT principal_name,sessions.user_id,justin_code,wlcg_groups,'
             'named_quotas '
             'FROM sessions '
             'LEFT JOIN users '
             'ON users.user_id=sessions.user_id '
             'LEFT JOIN principal_names '
             'ON users.main_pn_id=principal_names.pn_id '
             'WHERE justin_session="%s" AND justin_secret="%s" AND '
             'NOW() < expires_time AND sessions.user_id > 0'
             % (justinSession, justinSecret))

    row         = justin.select(query, justOne = True)    
    userName    = row['principal_name']
    userID      = row['user_id']
    justinCode  = row['justin_code']
    wlcgGroups  = row['wlcg_groups'].split()
    namedQuotas = row['named_quotas'].split()
    print(userName,userID,file=sys.stderr)
  except:
    return None

  return { 'user_name'      : userName,
           'user_id'        : userID,
           'justin_session' : justinSession,
           'justin_code'    : justinCode,
           'wlcg_groups'    : wlcgGroups,
           'named_quotas'   : namedQuotas }

def createUser(principalName):
  
  try:
    userID = justin.insertUpdate('INSERT INTO users SET main_pn_id=0')

    pnID = justin.insertUpdate('INSERT INTO principal_names SET '
                               'principal_name="%s",user_id=%d'
                               % (principalName, userID))

    justin.insertUpdate('UPDATE users SET main_pn_id=%d WHERE user_id=%d'
                        % (pnID, userID))
  except Exception as e:
    print('createUser() fails with: ' + str(e), file=sys.stderr)
    return None
  else:
    return userID

def authorizedPage(environ, user):

  try:
    query = ('SELECT command_sessions.hostname,'
             'command_sessions.ip,'
             'command_sessions.os_release FROM sessions AS web_sessions '
             'LEFT JOIN sessions AS command_sessions '
             'ON command_sessions.session_id=web_sessions.linked_session_id '
             'WHERE web_sessions.justin_session="%s"'
             % user['justin_session'])

    authorizeRow = justin.select(query, justOne = True)
  except Exception as e:
    print('Get command session info fails: ' + str(e), file=sys.stderr)
    return errorPage(environ, user, 
                     'Failed to find justin command session')

  output = header(environ, user, "justIN: Computer is authorized")

  output += \
'''<h1>Your computer is authorized</h1>
<p><p>Computer: %s (%s) %s</p>
<p>The justin command on your computer is now authorized. In 7 days the 
authorization will expire and the justin command will give you another link
to visit.</p>
<p>For more about using the justin command, please see its
<a href="/docs/justin_command.md">documentation</a>.
</p>
''' % (authorizeRow['hostname'],
       authorizeRow['ip'],
       authorizeRow['os_release'])
  
  output += footer()
  
  return output

def listWorkflows(environ, user, cgiValues, pageNumber, pageLength):

  whereList = []
  queryList = ''

  try:
    userName = cgiValues["user_name"]

    if userName != '--ANY--' and not justin.stringIsUsername(userName):
      raise
  except:
    userName = ''

  if userName:
    # If the user name was given explicitly, then we pass it on
    # Otherwise it is left out for subsequent next page etc clicks
    queryList += '&user_name=%s' % userName
  else:
    # But userName must be set to something, even just --ANY--
    if user:
      # User is logged in, so we use their name instead of implicit --ANY--
      userName = user['user_name']
    else:
      # Always fall back to any user
      userName = '--ANY--'

  if userName != '--ANY--':
    # For any user, we just skip this condition 
    whereList.append('principal_name="%s"' % userName)

  try:
    scopeName = cgiValues["scope_name"]

    if not justin.stringIsScope(scopeName):
      raise
  except:
    scopeName = ''
  else:
    if scopeName:
      whereList.append('scope_name="%s"' % scopeName)
      queryList += '&scope_name=%s' % scopeName

  try:
    workflowState = cgiValues["state"]

    if workflowState not in justin.workflowStates:
      raise
  except:
    workflowState = ''
  else:
    if workflowState:
      whereList.append('state="%s"' % workflowState)
      queryList += '&state=%s' % workflowState

  if whereList:
    whereString = ' WHERE ' + ' AND '.join(whereList)
  else:
    whereString = ''

  # These lists are used for the pull down menus in the filter HTML
  userRows = justin.select('SELECT principal_name FROM users '
                           'LEFT JOIN principal_names '
                           'ON users.main_pn_id=principal_names.pn_id '
                           'ORDER BY principal_name')
  scopeRows = justin.select('SELECT scope_name FROM scopes '
                            'ORDER BY scope_name')

  output = header(environ, user, "justIN: Workflows")

  output += "<h1>Workflows</h1>"

  output += ('<p><form method="get" formaction="/dashboard/">'
    '<input type="hidden" name="method" value="list-workflows">'
    '<label>Users<select name="user_name">'
    '<option value="--ANY--"%s>ANY</option>'
    % (' selected' if userName == '--ANY--' else ''))

  if user:
    # If logged in, offer their own name first
    output += ('<option value="%s"%s>%s</option>' 
               % (user['user_name'],
                  ' selected' 
                  if user['user_name'] == userName
                  else '',
                  user['user_name']))

  output += '<option value="" disabled>---</option>'

  for userRow in userRows:
    # List the other user names, selecting them if selected BUT not if
    # its the logged in user since that is at the top of the list already
    output += ('<option value="%s"%s>%s</option>' 
               % (userRow['principal_name'],
                  ' selected' 
                  if userRow['principal_name'] == userName and 
                  (not user or user['user_name'] != userRow['principal_name'])
                  else '',
                  userRow['principal_name']))

  output += ('</select></label> '
    '<label>Scope:<select name="scope_name">'
    '<option value=""%s>ANY</option>'
    % ('' if scopeName else ' selected'))
  
  for scopeRow in scopeRows:
    output += ('<option value="%s"%s>%s</option>' 
               % (scopeRow['scope_name'],
                  ' selected' 
                  if scopeRow['scope_name'] == scopeName
                  else '',
                  scopeRow['scope_name']))

  output += ('</select></label> '
    '<label>State:<select name="state">'
    '<option value=""%s>ANY</option>'
    % ('' if workflowState else ' selected'))
  
  for state in justin.workflowStates:
    output += ('<option value="%s"%s>%s</option>' 
               % (state,
                  ' selected' if state == workflowState else '',
                  state))

  output += ('</select></label> '
    '<input type="submit" value="Filter" '
    'style="background: #E1703D; border-radius: 5px; padding: 5px; '
    'color: white; font-weight: bold; font-size: 1em; border: 0; '
    'cursor: pointer">'
    '</form></p>\n')
  
  query = ('SELECT workflow_id,description,principal_name AS user_name,'
           'workflows.state,mql,created,submitted,started,finished,scope_name '
           'FROM workflows '
           'LEFT JOIN users ON workflows.user_id=users.user_id '
           'LEFT JOIN principal_names '
           'ON principal_names.pn_id=users.main_pn_id '
           'LEFT JOIN scopes ON workflows.scope_id=scopes.scope_id '
           '%s '
           'ORDER BY workflow_id DESC LIMIT %d,%d' %
           (whereString, pageNumber * pageLength, pageLength + 1))

  justin.cur.execute(query)
  rows = justin.cur.fetchall()

  output += makePager(pageNumber, pageLength, len(rows), 
                      "/dashboard/?method=list-workflows&page_number=%d"
                      "&page_length=%d" + queryList) 
             
  output += '<p><table>'
  output += ('<tr><th>Workflow ID</th><th>Description</th><th>User</th>'
             '<th>Scope</th><th>State</th>'
             '<th>MQL</th><th>Submitted</th><th>Started</th>'
             '<th>Finished</th><tr>')

  for row in rows[:pageLength]:
    output += ('<tr><td><a href="/dashboard/?method=show-workflow'
          '&workflow_id=%s">'
          '%s</a></td><td>%s</td><td>%s</td><td>%s</td><td>%s</td>'
          '<td>%s</td><td>%s</td><td>%s</td><td>%s</td>'
          '</tr>' % 
          (row["workflow_id"], row["workflow_id"],
           html.escape(row["description"], quote=True),
           row["user_name"],
           row["scope_name"],
           row["state"],
           insertWBR(row["mql"]),
           spaceForUnixEpoch(row['submitted']),
           spaceForUnixEpoch(row['started']),
           spaceForUnixEpoch(row['finished'])
          )
         )

  output += "</table>"
  
  output += makePager(pageNumber, pageLength, len(rows), 
                      "/dashboard/?method=list-workflows&page_number=%d"
                      "&page_length=%d" + queryList)
  output += footer()
  
  return output

def listArchivedWorkflows(environ, user, cgiValues, pageNumber, pageLength):

  output = header(environ, user, "justIN: Archived workflows")

  output += "<h1>Archived workflows</h1>"
  
  query = ('SELECT workflow_id,description,user_name,'
           'state,created FROM archived_workflows '
           'ORDER BY workflow_id DESC LIMIT %d,%d' %
           (pageNumber * pageLength, pageLength + 1))

  justin.cur.execute(query)
  rows = justin.cur.fetchall()

  output += makePager(pageNumber, pageLength, len(rows), 
                      "/dashboard/?method=list-archived-workflows"
                      "&page_number=%d&page_length=%d") 
             
  output += '<p><table>'
  output += ('<tr><th>Workflow ID</th><th>Description</th><th>User</th>'
             '<th>State</th><th>Created</th></tr>')

  for row in rows[:pageLength]:
    output += ('<tr><td><a href="/dashboard/?method=show-archived-workflow'
          '&workflow_id=%d">%d</a></td>'
          '<td>%s</td><td>%s</td><td>%s</td><td>%s</td></tr>' % 
          (row["workflow_id"], row["workflow_id"],
           html.escape(row["description"], quote=True),
           row["user_name"],
           row["state"],
           row['created']
          )
         )

  output += "</table>"
  
  output += makePager(pageNumber, pageLength, len(rows), 
                      "/dashboard/?method=list-archived-workflows"
                      "&page_number=%d&page_length=%d")
  output += footer()
  
  return output

def showWorkflow(environ, user, cgiValues):
  try:
    workflowID = int(cgiValues['workflow_id'])
  except:
    return errorPage(environ, user, "workflow_id must be given")
  
  query = ("SELECT workflows.description,workflows.state,"
           "workflows.state_message,principal_name AS user_name,"
           "workflows.user_id,wlcg_groups.wlcg_group_name,"
           "workflows.created,workflows.submitted,workflows.started,"
           "workflows.checking,workflows.finished,mql,"
           "workflows.refind_seconds,workflows.refind_end_time,"
           "workflows.refind_next_time,"
           "scopes.scope_name,condor_groups.condor_group_name "
           "FROM workflows "
           "LEFT JOIN scopes ON scopes.scope_id=workflows.scope_id "
           "LEFT JOIN named_quotas ON scopes.quota_id=named_quotas.quota_id "
           "LEFT JOIN wlcg_groups "
           "ON wlcg_groups.wlcg_group_id=named_quotas.wlcg_group_id "
           "LEFT JOIN users ON users.user_id=workflows.user_id "
           "LEFT JOIN principal_names "
           "ON principal_names.pn_id=users.main_pn_id "
           "LEFT JOIN condor_groups "
           "ON condor_groups.condor_group_id=workflows.condor_group_id "
           "WHERE workflow_id=%d "
           "ORDER BY workflow_id" % workflowID)

  workflowRow = justin.select(query, justOne = True)

  if workflowRow is None:
    # This workflow was not found!
    return ('/dashboard/?method=show-archived-workflow&workflow_id=%d'
            % workflowID)
  
  output = header(environ, user, "justIN: Workflow %d" % workflowID)
  state  = workflowRow['state']

  output += "<h1>Workflow %d</h1>" % workflowID

# WE DISABLE THESE OPTIONS FOR NOW. THEY NEED CHANGING FROM BUTTONS TO
# TWO STEP CONFIRMATION: SELECT FROM MENU THEN A BUTTON MAYBE???
  if False and user:
    buttonsHTML = ''

    # Buttons you need to be an admin or in the group still for
    if user['user_name'] in justin.justinAdmins or \
       workflowRow['wlcg_group_name'] in user['wlcg_groups']:
      if workflowRow['state'] == 'draft':
        buttonsHTML += buttonHTML(user = user,
              nextURI = '/dashboard/?method=show-workflow&workflow_id=%d'
                                    % workflowID,
              label   = 'Submit',
              key     = workflowID,
              name    = 'workflow_submit') + ' '

      if workflowRow['state'] == 'paused':
        buttonsHTML += buttonHTML(user = user,
              nextURI = '/dashboard/?method=show-workflow&workflow_id=%d'
                                    % workflowID,
              label   = 'Restart',
              key     = workflowID,
              name    = 'workflow_restart') + ' '

    # Buttons that users can do for any workflow submitted in their name
    if user['user_name'] in justin.justinAdmins or \
       workflowRow['wlcg_group_name'] in user['wlcg_groups'] or \
       user['user_id'] == workflowRow['user_id']:

      if workflowRow['state'] == 'running':
        buttonsHTML += buttonHTML(user = user,
              nextURI = '/dashboard/?method=show-workflow&workflow_id=%d'
                                    % workflowID,
              label   = 'Pause',
              key     = workflowID,
              name    = 'workflow_pause') + ' '

      if workflowRow['state'] in ['running','submitted','draft']:
        buttonsHTML += buttonHTML(user = user,
              nextURI = '/dashboard/?method=show-workflow&workflow_id=%d'
                                    % workflowID,
              label   = 'Finish',
              key     = workflowID,
              name    = 'workflow_finish') + ' ' 

    if buttonsHTML:
      output += '<p>' + buttonsHTML + '</p>\n<p>\n'

  output += '<table>'
  output += ('<tr><td>Description</td><td>%s</td></tr>' 
             % html.escape(workflowRow['description'], quote=True))

  output += ('<tr><td>State</td><td>%s</td></tr>' % state)
  if workflowRow['state_message']:
    output += ('<tr><td>Message</td><td>%s</td></tr>' 
               % workflowRow['state_message'])

  output += ('<tr><td>MQL</td><td>%s</td></tr>' 
             % html.escape(workflowRow['mql'], quote=True))

  if workflowRow['scope_name']:
    output += '<tr><td>Scope</td><td>%s</td></tr>' % workflowRow['scope_name']

  if workflowRow['condor_group_name']:
    output += ('<tr><td>HTCondor Group</td><td>%s</td></tr>'  
               % workflowRow['condor_group_name'])

  if str(workflowRow['refind_end_time']) == justin.unixEpoch:
    output += '<tr><td>Finding</td><td>once</td></tr>' 
  else:
    output += ('<tr><td>Finding</td><td>every %d hour(s) to %s</td></tr>'
               % (int(workflowRow['refind_seconds'] / 3600),
                  workflowRow['refind_end_time']))

    output += ('<tr><td>Next find</td><td>%s</td></tr>'
               % workflowRow['refind_next_time'])

  output += ('<tr><td>%s by</td><td>%s</td></tr>' 
             % ('Created' if state == 'draft' else 'Submitted',
                workflowRow['user_name']))

  output += ('<tr><td>Created</td><td>%s</td></tr>' 
             % spaceForUnixEpoch(workflowRow['created']))

  output += ('<tr><td>Submitted</td><td>%s</td></tr>' 
             % spaceForUnixEpoch(workflowRow['submitted']))

  output += ('<tr><td>Started</td><td>%s</td></tr>' 
             % spaceForUnixEpoch(workflowRow['started']))

#  output += ('<tr><td>Checking</td><td>%s</td></tr>' 
#             % spaceForUnixEpoch(workflowRow['checking']))

  output += ('<tr><td>Finished</td><td>%s</td></tr>' 
             % spaceForUnixEpoch(workflowRow['finished']))
  
  output += ('<tr><td colspan="2"><a '
             'href="/dashboard/?method=list-events&workflow_id=%d">Events '
             'for this workflow</a></td></tr>' 
             % workflowID)
  
  output += "</table>"

  # Get the stages of this workflow
  query = ("SELECT * "
           "FROM stages "
           "WHERE workflow_id=%d "
           "ORDER BY stage_id" % workflowID)

  justin.cur.execute(query)
  stageRows = justin.cur.fetchall()

  # Get counts of file states for all stages
  stateCounts = []
  for i in range(0, len(stageRows) + 1):
    stateCounts.append({ 'recorded'    : 0,
                         'finding'     : 0,
                         'unallocated' : 0,
                         'allocated'   : 0,
                         'outputting'  : 0,
                         'processed'   : 0,
                         'notfound'    : 0,
                         'failed'      : 0,
                         'output'      : 0  })
  
  query = ('SELECT state,stage_id,COUNT(*) AS count '
           'FROM files '
           'WHERE workflow_id=%d '
           'GROUP BY state,stage_id' % workflowID)
             
  stateRows = justin.select(query)
  
  for stateRow in stateRows:
    stateCounts[stateRow['stage_id']][stateRow['state']] = stateRow['count']

  # Output a table with the files for each stage

  output += '<h2>File states per stage</h2>'
  output += '<table>'
  output += ("<tr><th>Stage ID</th><th>Files</th><th>Finding</th>"
             "<th>Unallocated</th><th>Allocated</th><th>Outputting</th>"
             "<th>Processed</th><th>Not found</th><th>Failed</th><tr>")

  for stageRow in stageRows:
    output += ('<tr><td><a href="/dashboard/?method=show-stage&workflow_id=%s&stage_id=%s">'
          '%d</a></td>'
          '<td><a href="/dashboard/?method=list-files&workflow_id=%s&stage_id=%s">%s</a></td>'
          '<td><a href="/dashboard/?method=list-files&workflow_id=%s&stage_id=%s&state=finding">%d</a></td>'
          '<td><a href="/dashboard/?method=list-files&workflow_id=%s&stage_id=%s&state=unallocated">%d</a></td>'
          '<td><a href="/dashboard/?method=list-files&workflow_id=%s&stage_id=%s&state=allocated">%d</a></td>'
          '<td><a href="/dashboard/?method=list-files&workflow_id=%s&stage_id=%s&state=outputting">%d</a></td>'
          '<td><a href="/dashboard/?method=list-files&workflow_id=%s&stage_id=%s&state=processed">%d</a></td>'
          '<td><a href="/dashboard/?method=list-files&workflow_id=%s&stage_id=%s&state=notfound">%d</a></td>'
          '<td><a href="/dashboard/?method=list-files&workflow_id=%s&stage_id=%s&state=failed">%d</a></td>'
          '</tr>' % 
          (
           stageRow["workflow_id"], stageRow["stage_id"], stageRow["stage_id"],
            stageRow["workflow_id"], stageRow["stage_id"], 
            stateCounts[stageRow['stage_id']]['finding'] +
             stateCounts[stageRow['stage_id']]['unallocated'] +
             stateCounts[stageRow['stage_id']]['allocated'] +
             stateCounts[stageRow['stage_id']]['outputting'] +
             stateCounts[stageRow['stage_id']]['processed'] +
             stateCounts[stageRow['stage_id']]['notfound'] +
            stateCounts[stageRow['stage_id']]['failed'],
            stageRow["workflow_id"], stageRow["stage_id"],
            stateCounts[stageRow['stage_id']]['finding'],
            stageRow["workflow_id"], stageRow["stage_id"],
            stateCounts[stageRow['stage_id']]['unallocated'],
            stageRow["workflow_id"], stageRow["stage_id"],
            stateCounts[stageRow['stage_id']]['allocated'],
            stageRow["workflow_id"], stageRow["stage_id"],
            stateCounts[stageRow['stage_id']]['outputting'],
            stageRow["workflow_id"], stageRow["stage_id"],
            stateCounts[stageRow['stage_id']]['processed'],
            stageRow["workflow_id"], stageRow["stage_id"],
            stateCounts[stageRow['stage_id']]['notfound'],
            stageRow["workflow_id"], stageRow["stage_id"], 
            stateCounts[stageRow['stage_id']]['failed']))

  output += "</table>"

  # Get counts of job states for all stages
  stateCounts = []
  for i in range(0, len(stageRows) + 1):
    stateCounts.append({ 'submitted'         : 0,
                         'started'           : 0,
                         'processing'        : 0,
                         'outputting'        : 0,
                         'finished'          : 0,
                         'notused'           : 0,
                         'aborted'           : 0,
                         'stalled'           : 0,
                         'jobscript_error'   : 0,
                         'outputting_failed' : 0,
                         'none_processed'    : 0  })

  query = ('SELECT job_state,stage_id,COUNT(*) AS count '
           'FROM jobs '
           'WHERE workflow_id=%d '
           'GROUP BY job_state,stage_id' % workflowID)
             
  stateRows = justin.select(query)
  
  for stateRow in stateRows:
    stateCounts[stateRow['stage_id']][stateRow['job_state']] \
                                                       = stateRow['count']

  # Display table of job states for each stage

  output += ('<h2>Job states per stage</h2>')
  output += ('<table>')
  output += ('<tr><th>Stage</th><th>Total</th>'
             '<th>Submitted</th>'
             '<th>Started</th>'
             '<th>Processing</th>'
             '<th>Outputting</th><th>Finished</th>'
             '<th>Notused</th>'
             '<th>Aborted</th><th>Stalled</th><th>Jobscript error</th>'
             '<th>Outputting failed</th>'
             '<th>None processed</th></tr>')

  for stageRow in stageRows:
    output += ('<tr>'
        '<td><a href="/dashboard/?method=show-stage&workflow_id=%s&stage_id=%s">'
        '%d</td>\n'
        '<td><a href="/dashboard/?method=list-jobs&workflow_id=%d'
        '&stage_id=%d">%d</a></td>'
        '<td><a href="/dashboard/?method=list-jobs&workflow_id=%d'
        '&stage_id=%d&job_state=submitted">%d</a></td>'
        '<td><a href="/dashboard/?method=list-jobs&workflow_id=%d'
        '&stage_id=%d&job_state=started">%d</a></td>'
        '<td><a href="/dashboard/?method=list-jobs&workflow_id=%d'
        '&stage_id=%d&job_state=processing">%d</a></td>'
        '<td><a href="/dashboard/?method=list-jobs&workflow_id=%d'
        '&stage_id=%d&job_state=outputting">%d</a></td>'
        '<td><a href="/dashboard/?method=list-jobs&workflow_id=%d'
        '&stage_id=%d&job_state=finished">%d</a></td>'
        '<td><a href="/dashboard/?method=list-jobs&workflow_id=%d'
        '&stage_id=%d&job_state=notused">%d</a></td>'
        '<td><a href="/dashboard/?method=list-jobs&workflow_id=%d'
        '&stage_id=%d&job_state=aborted">%d</a></td>'
        '<td><a href="/dashboard/?method=list-jobs&workflow_id=%d'
        '&stage_id=%d&job_state=stalled">%d</a></td>'
        '<td><a href="/dashboard/?method=list-jobs&workflow_id=%d'
        '&stage_id=%d&job_state=jobscript_error">%d</a></td>'
        '<td><a href="/dashboard/?method=list-jobs&workflow_id=%d'
        '&stage_id=%d&job_state=outputting_failed">%d</a></td>'
        '<td><a href="/dashboard/?method=list-jobs&workflow_id=%d'
        '&stage_id=%d&job_state=none_processed">%d</a></td>'
        '</tr>'
        % (stageRow["workflow_id"], stageRow["stage_id"], 
            stageRow["stage_id"],
           stageRow["workflow_id"], stageRow["stage_id"], 
             stateCounts[stageRow['stage_id']]['submitted'] +
             stateCounts[stageRow['stage_id']]['started'] +
             stateCounts[stageRow['stage_id']]['processing'] +
             stateCounts[stageRow['stage_id']]['outputting'] +
             stateCounts[stageRow['stage_id']]['finished'] +
             stateCounts[stageRow['stage_id']]['notused'] +
             stateCounts[stageRow['stage_id']]['aborted'] +
             stateCounts[stageRow['stage_id']]['stalled'] +
             stateCounts[stageRow['stage_id']]['jobscript_error'] +
             stateCounts[stageRow['stage_id']]['outputting_failed'] +
             stateCounts[stageRow['stage_id']]['none_processed'],
           stageRow["workflow_id"], stageRow["stage_id"],
            stateCounts[stageRow['stage_id']]['submitted'],
           stageRow["workflow_id"], stageRow["stage_id"],
            stateCounts[stageRow['stage_id']]['started'],
           stageRow["workflow_id"], stageRow["stage_id"],
            stateCounts[stageRow['stage_id']]['processing'],
           stageRow["workflow_id"], stageRow["stage_id"],
            stateCounts[stageRow['stage_id']]['outputting'],
           stageRow["workflow_id"], stageRow["stage_id"],
            stateCounts[stageRow['stage_id']]['finished'],
           stageRow["workflow_id"], stageRow["stage_id"],
            stateCounts[stageRow['stage_id']]['notused'],
           stageRow["workflow_id"], stageRow["stage_id"],
            stateCounts[stageRow['stage_id']]['aborted'],
           stageRow["workflow_id"], stageRow["stage_id"],
            stateCounts[stageRow['stage_id']]['stalled'],
           stageRow["workflow_id"], stageRow["stage_id"],
            stateCounts[stageRow['stage_id']]['jobscript_error'],
           stageRow["workflow_id"], stageRow["stage_id"],
            stateCounts[stageRow['stage_id']]['outputting_failed'],
           stageRow["workflow_id"], stageRow["stage_id"],
            stateCounts[stageRow['stage_id']]['none_processed']))

  output += ('</table>')
  output += footer()
  return output

def showArchivedWorkflow(environ, user, cgiValues):
  try:
    workflowID = int(cgiValues['workflow_id'])
  except:
    return errorPage(environ, user, "workflow_id must be given")
  
  output = header(environ, user, "justIN: Archived workflow %d" % workflowID)

  query = ('SELECT row_name,row_value FROM archived_workflows_rows '
           'WHERE workflow_id=%d ORDER BY row_number' % workflowID)

  try:
    rows = justin.select(query)
  except Exception as e:
    return errorPage(environ, user, 
                     'Database error getting workflow %d: %s' 
                      % (workflowID, str(e)))
    
  output += "<h1>Archived workflow %d</h1>" % workflowID

  if not rows:
    output += '<p>Workflow not found</p>'
  else:
    output += '<table>'
    for row in rows:  
      if row['row_value'].startswith('<?xml '):
        # Assume inline SVG
        output += ('<tr><td>%s</td><td>'
                   '<figure style="width:800px; display: inline-block">'
                   '%s</figure></td></tr>'
                   % (html.escape(row['row_name'], quote=True),
                      row['row_value']))
      elif row['row_value'].startswith('#!/'):
        # Assume jobscript
        output += ('<tr><td colspan=2>Jobscript<br>'
                   '<pre>%s</pre></td></tr>'
                   % html.escape(row['row_value'], quote=True))
      else:
        output += ('<tr><td>%s</td><td>%s</td></tr>'
                   % (html.escape(row['row_name'], quote=True),
                      html.escape(row['row_value'], quote=True)))

    output += '</table>'

  output += footer()
  return output

def showStage(environ, user, cgiValues):
  try:
    workflowID = int(cgiValues["workflow_id"])
  except:
    return errorPage(environ, user, "workflow_id must be given")
  
  try:
    stageID = int(cgiValues["stage_id"])
  except:
    return errorPage(environ, user, "stage_id must be given")
  
  output = header(environ, user, "justIN: Workflow %d, Stage %d" % (workflowID, stageID))
  output += '<!-- %s -->\n' % str(time.time())

  query = ("SELECT "
           "stages.stage_priority,"
           "stages.processors,"
           "stages.needs_gpu,"
           "stages.wall_seconds,"
           "stages.rss_bytes,"
           "stages.max_distance,"
           "stages_jobscripts.jobscript,"
           "stages.jobscript_git,"
           "stages.jobscript_image,"
           "workflows_scopes.scope_name AS workflows_scope_name "
           "FROM stages "
           "LEFT JOIN workflows "
           "ON workflows.workflow_id=stages.workflow_id "
           "LEFT JOIN scopes AS workflows_scopes "
           "ON workflows.scope_id=workflows_scopes.scope_id "
           "LEFT JOIN stages_jobscripts "
           "ON stages_jobscripts.workflow_id=stages.workflow_id "
           "AND stages_jobscripts.stage_id=stages.stage_id "
           "WHERE stages.workflow_id=%d AND stages.stage_id=%d" %
           (workflowID, stageID))

  stageRow = justin.select(query, justOne = True)

  if stageRow['workflows_scope_name']:
    scopeName = stageRow['workflows_scope_name']
  else:
    scopeName = ''
  
  output += ("<h1>Workflow %d, Stage %d</h1>" % (workflowID, stageID))
  
  output += '<table>'

  output += ('<tr><td>Priority</td>'
        '<td>%d</td></tr>' % stageRow["stage_priority"])

  output += ('<tr><td>Processors</td>'
        '<td>%s</td></tr>' % stageRow["processors"])

  if stageRow["needs_gpu"]:
    output += ('<tr><td>GPU required</td><td>Yes</td></tr>')

  output += ('<tr><td>Wall seconds</td>'
        '<td>%s</td></tr>' % stageRow["wall_seconds"])

  output += ('<tr><td>Image</td>'
        '<td>%s</td></tr>' % stageRow["jobscript_image"])

  output += ('<tr><td>RSS bytes</td>'
        '<td>%s (%d MiB)</td></tr>' % 
        (stageRow["rss_bytes"], 
         int(stageRow["rss_bytes"]) / 1048576))

  output += ('<tr><td>Max distance for inputs</td>'
        '<td>%.1f</td></tr>' % stageRow["max_distance"])

  # Allowed input RSEs
  output += ('<tr><td>Enabled input RSEs</td><td><small>')
        
  query = ("SELECT rse_name "
           "FROM stages_input_storages "
           "LEFT JOIN storages "
           "ON stages_input_storages.rse_id=storages.rse_id "
           "WHERE workflow_id=%d AND stage_id=%d "
           "ORDER BY rse_name" %
           (workflowID, stageID))

  output += '<!-- %s -->\n' % str(time.time())
  justin.cur.execute(query)
  rseRows = justin.cur.fetchall()

  storagesList = []  
  for rseRow in rseRows:
    storagesList.append(
             '<a href="/dashboard/?method=show-storage&rse_name=%s">%s</a>' 
             % (rseRow['rse_name'], rseRow['rse_name']))
       
  output += ', '.join(storagesList) + '</small></td></tr>'
        
  # Allowed output RSEs
  output += ('<tr><td>Enabled output RSEs</td><td><small>')
        
  query = ("SELECT rse_name,preferred "
           "FROM stages_output_storages "
           "LEFT JOIN storages "
           "ON stages_output_storages.rse_id=storages.rse_id "
           "WHERE workflow_id=%d AND stage_id=%d "
           "ORDER BY rse_name" %
           (workflowID, stageID))

  output += '<!-- %s -->\n' % str(time.time())
  justin.cur.execute(query)
  rseRows = justin.cur.fetchall()

  storagesList = []  
  for rseRow in rseRows:
    storagesList.append(
          '%s<a href="/dashboard/?method=show-storage&rse_name=%s">%s</a>%s' % 
          ('<b>' if rseRow['preferred'] else '',
           rseRow['rse_name'],
           rseRow['rse_name'],
           '</b>' if rseRow['preferred'] else ''))
       
  output += ', '.join(storagesList) + '</small></td></tr>'
        
  # Allowed sites
  output += ('<tr><td>Enabled sites</td><td><small>')
        
  query = ("SELECT site_name "
           "FROM stages_sites "
           "LEFT JOIN sites "
           "ON stages_sites.site_id=sites.site_id "
           "WHERE workflow_id=%d AND stage_id=%d "
           "ORDER BY site_name" %
           (workflowID, stageID))

  output += '<!-- %s -->\n' % str(time.time())
  justin.cur.execute(query)
  siteRows = justin.cur.fetchall()

  sitesList = []  
  for siteRow in siteRows:
    sitesList.append('<a href="/dashboard/?method=show-site&site_name=%s">'
                     '%s</a>' % (siteRow['site_name'], siteRow['site_name']))
       
  output += ', '.join(sitesList) + '</small></td></tr>'
        
  if stageRow["workflows_scope_name"]:
    output += ('<tr><td>Scope</td>'
               '<td>%s</td></tr>' % stageRow["workflows_scope_name"])


  output += ('<tr><td colspan="2"><a '
             'href="/dashboard/?method=list-events&workflow_id=%d&stage_id=%d">'
             'Events for this stage</a></td></tr>' 
             % (workflowID, stageID))

  output += ('</table>')
    
  # Output patterns

  query = ("SELECT pattern_id,destination,file_pattern,"
           "for_next_stage,lifetime_seconds,rse_expression "
           "FROM stages_outputs "
           "WHERE workflow_id=%d AND stage_id=%d "
           "ORDER BY pattern_id" %
           (workflowID, stageID))

  output += '<!-- %s -->\n' % str(time.time())
  patternRows = justin.select(query)

  if patternRows:
    output += ("<h2>Output patterns</h2>")
    output += ('<table><tr><th>&nbsp;</th><th>Destination</th><th>Pattern</th>'
               '<th>Lifetime</th><th>For next stage</th>'
               '<th>RSE expression</th></tr>') 

    for patternRow in patternRows:
      if patternRow['destination'].startswith('https://'):
        output += ("<tr><td>%d</td><td>%s</td><td>%s</td>"
                   "<td> </td><td> </td><td> </td></tr>" 
                   % (patternRow["pattern_id"], 
                      insertWBR(patternRow["destination"]),
                      html.escape(patternRow["file_pattern"], quote=True)))
      else:
        output += ("<tr><td>%d</td><td>Rucio %s:%s</td><td>%s</td>"
                   "<td>%d</td><td>%s</td><td>%s</td></tr>" 
                   % (patternRow["pattern_id"],
                      stageRow["workflows_scope_name"],
                      insertWBR(patternRow["destination"]),
                      html.escape(patternRow["file_pattern"], quote=True),
                      patternRow["lifetime_seconds"],
                      bool(patternRow["for_next_stage"]),
                      html.escape(patternRow['rse_expression'])
                    ))

    output += ('</table>')

  # Environment
  query = ("SELECT env_name,env_value "
           "FROM stages_environment "
           "WHERE workflow_id=%d AND stage_id=%d "
           "ORDER BY env_name" %
           (workflowID, stageID))

  envRows = justin.select(query)

  if envRows:
    output += '<!-- %s -->\n' % str(time.time())
    output += ('<h2>Environment variables</h2>')
    output += ('<table><tr><th>Name</th><th>Value</th></tr>')
 
    for envRow in envRows:
      output += ("<tr><td>%s</td><td>%s</td></tr>" %
                 (html.escape(envRow["env_name"]),
                  html.escape(envRow["env_value"])))

    output += ('</table>') 

  # ClassAds
  query = ("SELECT classad_name,classad_value "
           "FROM stages_classads "
           "WHERE workflow_id=%d AND stage_id=%d "
           "ORDER BY classad_name" %
           (workflowID, stageID))

  classadsRows = justin.select(query)

  if classadsRows:
    output += '<!-- %s -->\n' % str(time.time())
    output += ('<h2>Condor Class Ads</h2>')
    output += ('<table><tr><th>Name</th><th>Value</th></tr>')
 
    for classadRow in classadsRows:
      output += ("<tr><td>%s</td><td>%s</td></tr>" %
                 (html.escape(classadRow["classad_name"]),
                  html.escape(classadRow["classad_value"])))

    output += ('</table>') 

  # Git repos
  query = ("SELECT git_repo,git_commit,rcds_hash,rcds_path "
           "FROM stages_git_repos "
           "WHERE workflow_id=%d AND stage_id=%d "
           "ORDER BY git_repo" %
           (workflowID, stageID))

  gitReposRows = justin.select(query)

  if gitReposRows:
    output += '<!-- %s -->\n' % str(time.time())
    output += ('<h2>GitHub Repos</h2>')
    output += ('<table><tr><th>Name</th><th>Path</th><th>Commit</th></tr>')
 
    for gitRepoRow in gitReposRows:
      output += ("<tr><td>%s</td><td>%s</td><td>%s</td></tr>" %
                 (gitRepoRow['git_repo'],
                  insertWBR(gitRepoRow['rcds_path']),
                  gitRepoRow['git_commit']
                ))

    output += ('</table>') 

  # File states
  stateCounts = { 'recorded'    : 0,
                  'finding'     : 0,
                  'unallocated' : 0,
                  'allocated'   : 0,
                  'outputting'  : 0,
                  'processed'   : 0,
                  'notfound'    : 0,
                  'failed'      : 0,
                  'output'      : 0  }                  
  
  query = ('SELECT state,COUNT(*) AS count '
           'FROM files '
           'WHERE workflow_id=%d AND stage_id=%d '
           'GROUP BY state' % (workflowID, stageID))
  
  stateRows = justin.select(query)
  
  for stateRow in stateRows:
    stateCounts[stateRow['state']] = stateRow['count']    
  
  output += '<h2>File states</h2>'
  output += '<table>'
  output += ("<tr><th>Total files</th><th>Finding</th>"
        "<th>Unallocated</th><th>Allocated</th><th>Outputting</th>"
        "<th>Processed</th><th>Not found</th><th>Failed</th><tr>")

  output += ('<tr><td><a href="/dashboard/?method=list-files&workflow_id=%s&stage_id=%s">%s</a></td>'
        '<td><a href="/dashboard/?method=list-files&workflow_id=%s&stage_id=%s&state=finding">%s</a></td>'
        '<td><a href="/dashboard/?method=list-files&workflow_id=%s&stage_id=%s&state=unallocated">%s</a></td>'
        '<td><a href="/dashboard/?method=list-files&workflow_id=%s&stage_id=%s&state=allocated">%s</a></td>'
        '<td><a href="/dashboard/?method=list-files&workflow_id=%s&stage_id=%s&state=outputting">%s</a></td>'
        '<td><a href="/dashboard/?method=list-files&workflow_id=%s&stage_id=%s&state=processed">%s</a></td>'
        '<td><a href="/dashboard/?method=list-files&workflow_id=%s&stage_id=%s&state=notfound">%s</a></td>'
        '<td><a href="/dashboard/?method=list-files&workflow_id=%s&stage_id=%s&state=failed">%s</a></td>'
        '</tr>' % 
          ( workflowID, stageID, stateCounts['finding']
                                        + stateCounts['unallocated']
                                        + stateCounts['allocated'] 
                                        + stateCounts['outputting']
                                        + stateCounts['processed']
                                        + stateCounts['notfound']
                                        + stateCounts['failed'],
            workflowID, stageID, stateCounts['finding'], 
            workflowID, stageID, stateCounts['unallocated'], 
            workflowID, stageID, stateCounts['allocated'], 
            workflowID, stageID, stateCounts['outputting'],
            workflowID, stageID, stateCounts['processed'],
            workflowID, stageID, stateCounts['notfound'],
            workflowID, stageID, stateCounts['failed']))

  output += ("</table>")

  # Display table of job states for this stage
  stateCounts = { 'submitted'         : 0,
                  'started'           : 0,
                  'processing'        : 0,
                  'outputting'        : 0,
                  'finished'          : 0,
                  'notused'           : 0,
                  'aborted'           : 0,
                  'stalled'           : 0,
                  'jobscript_error'   : 0,
                  'outputting_failed' : 0,
                  'none_processed'    : 0  }

  query = ('SELECT job_state,COUNT(*) AS count FROM jobs '
           'WHERE workflow_id=%d AND stage_id=%d '
           'GROUP BY job_state' % (workflowID, stageID))
             
  stateRows = justin.select(query)
  
  for stateRow in stateRows:
    stateCounts[stateRow['job_state']]  = stateRow['count']

  output += ('<h2>Job states</h2>')
  output += ('<table>')
  output += ('<tr><th>Total</th>'
             '<th>Submitted</th>'
             '<th>Started</th>'
             '<th>Processing</th>'
             '<th>Outputting</th>'
             '<th>Finished</th>'
             '<th>Notused</th>'
             '<th>Aborted</th><th>Stalled</th><th>Jobscript error</th>'
             '<th>Outputting failed</th>'
             '<th>None processed</th></tr>')

  output += ('<tr>'
        '<td><a href="/dashboard/?method=list-jobs&workflow_id=%d'
        '&stage_id=%d">%d</a></td>'
        '<td><a href="/dashboard/?method=list-jobs&workflow_id=%d'
        '&stage_id=%d&job_state=submitted">%d</a></td>'
        '<td><a href="/dashboard/?method=list-jobs&workflow_id=%d'
        '&stage_id=%d&job_state=started">%d</a></td>'
        '<td><a href="/dashboard/?method=list-jobs&workflow_id=%d'
        '&stage_id=%d&job_state=processing">%d</a></td>'
        '<td><a href="/dashboard/?method=list-jobs&workflow_id=%d'
        '&stage_id=%d&job_state=outputting">%d</a></td>'
        '<td><a href="/dashboard/?method=list-jobs&workflow_id=%d'
        '&stage_id=%d&job_state=finished">%d</a></td>'
        '<td><a href="/dashboard/?method=list-jobs&workflow_id=%d'
        '&stage_id=%d&job_state=notused">%d</a></td>'
        '<td><a href="/dashboard/?method=list-jobs&workflow_id=%d'
        '&stage_id=%d&job_state=aborted">%d</a></td>'
        '<td><a href="/dashboard/?method=list-jobs&workflow_id=%d'
        '&stage_id=%d&job_state=stalled">%d</a></td>'
        '<td><a href="/dashboard/?method=list-jobs&workflow_id=%d'
        '&stage_id=%d&job_state=jobscript_error">%d</a></td>'
        '<td><a href="/dashboard/?method=list-jobs&workflow_id=%d'
        '&stage_id=%d&job_state=outputting_failed">%d</a></td>'
        '<td><a href="/dashboard/?method=list-jobs&workflow_id=%d'
        '&stage_id=%d&job_state=none_processed">%d</a></td>'
        '</tr>'
        % (workflowID, stageID, 
             stateCounts['submitted'] +
             stateCounts['started'] +
             stateCounts['processing'] +
             stateCounts['outputting'] +
             stateCounts['finished'] +
             stateCounts['notused'] +
             stateCounts['aborted'] +
             stateCounts['stalled'] +
             stateCounts['jobscript_error'] +
             stateCounts['outputting_failed'] +
             stateCounts['none_processed'],
           workflowID, stageID,
            stateCounts['submitted'],
           workflowID, stageID,
            stateCounts['started'],
           workflowID, stageID,
            stateCounts['processing'],
           workflowID, stageID,
            stateCounts['outputting'],
           workflowID, stageID,
            stateCounts['finished'],
           workflowID, stageID,
            stateCounts['notused'],
           workflowID, stageID,
            stateCounts['aborted'],
           workflowID, stageID,
            stateCounts['stalled'],
           workflowID, stageID,
            stateCounts['jobscript_error'],
           workflowID, stageID,
            stateCounts['outputting_failed'],
           workflowID, stageID,
            stateCounts['none_processed']))

  output += ('</table>')

  # Progress chart based on file process_time values

  query = ('SELECT site_name,processed_hour,'
           'count(*) AS processed_count '
           'FROM files '
           'LEFT JOIN sites ON sites.site_id=files.processed_site_id '
           'WHERE workflow_id=%d AND stage_id=%d AND '
           'state="processed" GROUP BY processed_hour,processed_site_id '
           'ORDER BY processed_hour'
           % (workflowID, stageID))

  binRows = justin.select(query)

  if binRows:
    firstHour   = binRows[0]['processed_hour']
    lastHour    = binRows[-1]['processed_hour']
    hoursPerBin = int((1 + lastHour - firstHour) / 20.0 + 0.999)
    numBins     = int((1 + lastHour - firstHour) / hoursPerBin + 0.999)

    # Add padding before and after data
    firstHour -= hoursPerBin
    lastHour  += hoursPerBin
    numBins   += 2
    bins       = {}

    for binRow in binRows:

      if binRow['site_name'] not in bins:
        bins[binRow['site_name']] = [0] * numBins

      i = int((binRow['processed_hour'] - firstHour) / hoursPerBin)
      bins[binRow['site_name']][i] += binRow['processed_count']

    chart = justinStackedLine(1000, 
                           firstHour * 3600,
                           hoursPerBin,
                           numBins)
  
    chart.title = 'Files processed'
    
    for siteName in bins:
      chart.add(siteName, bins[siteName], fill = True, show_dots = False)

    output += ('<a href="' + chart.render_data_uri() + '" target="_blank" '
               'style="text-decoration: none">' + 
               '<figure style="width:%dpx; display: inline-block">'  
               % chart.imageSize)

    output += chart.render().decode('utf-8')
    output += '</figure></a> '

  # RSE pie charts
  output += '<!-- %s start of RSE pie chart -->\n' % str(time.time())

  query = ('SELECT rse_name,COUNT(*) AS replica_count FROM replicas '
           'LEFT JOIN storages ON replicas.rse_id=storages.rse_id '
           'WHERE workflow_id=%d AND stage_id=%d '
           'GROUP BY replicas.rse_id ORDER BY replica_count DESC'
           % (workflowID, stageID))

  justin.select(query)
  replicaRows = justin.select(query)

  if replicaRows:

    totalReplicas = 0
    for replicaRow in replicaRows:
      totalReplicas += replicaRow['replica_count']

    chart = pygal.Pie(style=pygal.style.LightColorizedStyle, 
                      legend_at_bottom=True,
                      width=800)    
    chart.title = 'Replicas per RSE'

    for replicaRow in replicaRows:
      chart.add('%s (%d%%)' 
                % (replicaRow['rse_name'], 
                   int((100.0 * replicaRow['replica_count']) / totalReplicas)), 
                replicaRow['replica_count'])

    output += ('<a href="' + chart.render_data_uri() + '" target="_blank" '
               'style="text-decoration: none">' + 
               '<figure style="width:%dpx; display: inline-block">'  
               % 800)

    output += chart.render().decode('utf-8')
    output += '</figure></a> '

  # RSE counts
  rseCounts = {}

  query = ('SELECT rse_name,events.rse_id,COUNT(*) AS file_count FROM events '
           'LEFT JOIN storages ON storages.rse_id=events.rse_id '
           'WHERE workflow_id=%d AND stage_id=%d AND event_type_id=%d '
           'GROUP BY events.rse_id ORDER BY file_count DESC' %
           (workflowID, stageID, justin.event_FILE_ALLOCATED))

  output += '<!-- %s SELECT ALLOCATED -->\n' % str(time.time())
  justin.cur.execute(query)
  rseRows = justin.cur.fetchall()

  for rseRow in rseRows:

    if rseRow['rse_name'] not in rseCounts:
      rseCounts[rseRow['rse_name']] = { 'inputs': 0, 'outputs': 0 }

    rseCounts[rseRow['rse_name']]['inputs'] = rseRow['file_count']

  query = ('SELECT rse_name,events.rse_id,COUNT(*) AS file_count FROM events '
           'LEFT JOIN storages ON storages.rse_id=events.rse_id '
           'WHERE workflow_id=%d AND stage_id=%d AND event_type_id=%d '
           'GROUP BY events.rse_id ORDER BY file_count DESC' %
           (workflowID, stageID, justin.event_FILE_CREATED))

  output += '<!-- %s SELECT CREATED -->\n' % str(time.time())
  justin.cur.execute(query)
  rseRows = justin.cur.fetchall()
  
  for rseRow in rseRows:
  
    if rseRow['rse_name'] not in rseCounts:
      rseCounts[rseRow['rse_name']] = { 'inputs': 0, 'outputs': 0 }

    rseCounts[rseRow['rse_name']]['outputs'] = rseRow['file_count']
    
  if rseCounts:
    output += ("<h2>RSEs used</h2>")
    output += ('<table><tr><th>Name</th><th>Inputs</th><th>Outputs</th></tr>')

    for rseName in rseCounts:
      output += ("<tr><td>%s</td><td>%d</td><td>%d</td></tr>" %
            (rseName,
             rseCounts[rseName]['inputs'],
             rseCounts[rseName]['outputs']
            ))

    output += ('</table>') 

  output += ('<p>Stats of processed input files as '
               '<a href="/dashboard/?method=download-input-file-stats&'
               'workflow_id=%d&stage_id=%d&format=csv">CSV</a> or '
               '<a href="/dashboard/?method=download-input-file-stats&'
               'workflow_id=%d&stage_id=%d&format=json">JSON</a>, '
               'and of uploaded output files as '
               '<a href="/dashboard/?method=download-output-file-stats&'
               'workflow_id=%d&stage_id=%d&format=csv">CSV</a> or '
               '<a href="/dashboard/?method=download-output-file-stats&'
               'workflow_id=%d&stage_id=%d&format=json">JSON</a> '
               '(up to %d files included)</p>'
               % (workflowID, stageID, workflowID, stageID, 
                  workflowID, stageID, workflowID, stageID, csvJsonMaxRows))

  # Reset event counts

  resetCounts = {}

  query = ('SELECT site_name,COUNT(*) AS site_count FROM events '
           'LEFT JOIN sites ON sites.site_id=events.site_id '
           'WHERE workflow_id=%d AND stage_id=%d AND event_type_id=%d '
           'GROUP BY site_name ORDER BY site_count DESC' %
           (workflowID, stageID, justin.event_FILE_ALLOCATED_RESET))

  output += '<!-- %s -->\n' % str(time.time())
  justin.cur.execute(query)
  resetRows = justin.cur.fetchall()
  
  for resetRow in resetRows:
  
    if resetRow['site_name'] not in resetCounts:
      resetCounts[resetRow['site_name']] = { 'allocated': 0, 'outputting': 0 }

    resetCounts[resetRow['site_name']]['allocated'] = resetRow['site_count']

  query = ('SELECT site_name,COUNT(*) AS site_count FROM events '
           'LEFT JOIN sites ON sites.site_id=events.site_id '
           'WHERE workflow_id=%d AND stage_id=%d AND event_type_id=%d '
           'GROUP BY site_name ORDER BY site_count DESC' %
           (workflowID, stageID, justin.event_FILE_OUTPUTTING_RESET))

  output += '<!-- %s -->\n' % str(time.time())
  justin.cur.execute(query)
  resetRows = justin.cur.fetchall()
  
  for resetRow in resetRows:
  
    if resetRow['site_name'] not in resetCounts:
      resetCounts[resetRow['site_name']] = { 'allocated': 0, 'outputting': 0 }

    resetCounts[resetRow['site_name']]['outputting'] = resetRow['site_count']

  if resetCounts:
    output += ("<h2>File reset events, by site</h2>")
    output += ('<table><tr><th>Site</th><th>Allocated</th><th>Outputting</th></tr>')

    for siteName in resetCounts:
      output += ("<tr><td>%s</td><td>%d</td><td>%d</td></tr>" %
            (siteName,
             resetCounts[siteName]['allocated'],
             resetCounts[siteName]['outputting']
            ))

    output += ('</table>') 

  output += ("<h2>Jobscript</h2>")

  if stageRow['jobscript_git']:
    try:
      (gitSite, orgRepoPath, tag) = stageRow['jobscript_git'].split(':', 2)
      (org, repo, path)           = orgRepoPath.split('/', 2)
    except:
      pass
    else:
      output += ('<p><i>Copied from '
                 '<a href="https://%s/%s/%s/blob/%s/%s">%s/%s/%s:%s</a> '
                 'on GitHub</i></p>' 
                 % (gitSite, org, repo, tag, path, 
                             org, repo, path, tag))

  output += ('<pre style="white-space: pre-wrap;">') 

  output += (html.escape(
   stageRow["jobscript"].encode('ascii',errors='ignore').decode(), 
   quote=True))
  
  output += ('</pre>') 

  output += footer()
  return output

def listFiles(environ, user, cgiValues, pageNumber, pageLength):

  try:
    workflowID = int(cgiValues["workflow_id"])
  except:
    return errorPage(environ, user, "workflow_id must be given")
  
  try:
    stageID = int(cgiValues["stage_id"])
  except:
    return errorPage(environ, user, "stage_id must be given")

  stateFilter = ''
  stateText = ''

  try:
    state = str(cgiValues["state"])
  except:
    state = ''
  else:
    if not justin.stringIsEnvName(state):
      return errorPage(environ, user, "Invalid characters in state")
      
    if state == 'finding' or state == 'unallocated' or state == 'allocated' \
        or state == 'outputting' or state == 'processed' \
        or state == 'notfound' or state == 'failed':
      stateFilter = 'AND files.state="' + state + '"'
      stateText = ' (state = ' + state + ')'

  query = ("SELECT files.file_did,files.state,"
           "CAST(event_time AS char) AS last_allocation_time,"
           "storages.rse_name,jobs.jobsub_id,"
           "sites.site_name,allocations,max_allocations,"
           "jobs.jobscript_exit AS last_jobscript_exit "
           "FROM files "
           "LEFT JOIN events"
           " ON files.justin_job_id=events.justin_job_id AND"
           " events.event_type_id=%d AND files.file_id=events.file_id "
           "LEFT JOIN storages ON events.rse_id=storages.rse_id "
           "LEFT JOIN jobs ON jobs.justin_job_id=files.justin_job_id "
           "LEFT JOIN sites ON jobs.site_id=sites.site_id "
           "WHERE files.workflow_id=%d AND files.stage_id=%d %s "
           "ORDER BY files.file_id DESC LIMIT %d,%d" % 
           (justin.event_FILE_ALLOCATED, workflowID, stageID, stateFilter,
            pageNumber * pageLength, pageLength + 1))

  justin.cur.execute(query)
  filesRows = justin.cur.fetchall()

  output = header(environ, user, "justIN: Files for Workflow %d, Stage %d%s" 
                  % (workflowID, stageID, stateText)) 

  output += '<!-- %s -->\n' % query

  output += ("<h1>Files  for Workflow %d, Stage %d%s</h1>" 
             % (workflowID, stageID, stateText))

  output += makePager(pageNumber, pageLength, len(filesRows),
             '/dashboard/?method=list-files&page_number=%d&page_length=%d'
             '&workflow_id=' + str(workflowID) + 
             '&stage_id=' + str(stageID) + 
             '&state=' + state)

  output += (
"""<p><table>
<tr><th rowspan="2">DID</th><th rowspan="2">Attempts</th><th rowspan="2">State</th><th colspan="4">Allocated</th></tr>
<tr><th>Time</th><th>RSE</th><th>Site</th><th>Jobsub ID</th></tr>""")

  for fileRow in filesRows[:pageLength]:
      output += ('<tr><td><a href="/dashboard/?method=show-file&workflow_id=%d&stage_id=%d&file_did=%s">'
          '%s</a></td><td>%d / %d</td><td>%s</td>' % 
          (workflowID, 
           stageID, 
           urllib.parse.quote(fileRow["file_did"], safe=''),
           insertWBR(fileRow["file_did"]),
           fileRow["allocations"], fileRow["max_allocations"], 
           fileRow["state"]
          )
         )
         
      if fileRow["state"] in ['allocated', 'outputting', 'processed', 'failed']:
        output += ('<td>%s</td>'
            '<td><a href="/dashboard/?method=show-storage&rse_name=%s">%s</a></td>'
            '<td><a href="/dashboard/?method=show-site&site_name=%s">%s</a></td>'
            '<td><a href="/dashboard/?method=show-job&jobsub_id=%s">%s</a></td></tr>' % 
            (str(fileRow["last_allocation_time"]),
             str(fileRow["rse_name"]),  str(fileRow["rse_name"]),
             str(fileRow["site_name"]), str(fileRow["site_name"]),
             str(fileRow["jobsub_id"]), str(fileRow["jobsub_id"])
            )
           )
      else:
        output += ('<td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>')
      
  output += ("</table>")
  
  output += makePager(pageNumber, pageLength, len(filesRows),
             '/dashboard/?method=list-files&page_number=%d&page_length=%d'
             '&workflow_id=' + str(workflowID) + 
             '&stage_id=' + str(stageID) + 
             '&state=' + state)

  output += ('<p>You can download this list as '
               '<a href="/dashboard/?method=download-file-states&workflow_id=%d'
               '&stage_id=%d&state=%s&format=csv&csvfile=">CSV</a> or '
               '<a href="/dashboard/?method=download-file-states&workflow_id=%d'
               '&stage_id=%d&state=%s&format=json">JSON</a> '
               '(up to %d files included)</p>'
               % (workflowID, stageID, state,
                  workflowID, stageID, state,
                  csvJsonMaxRows))

  output += footer()

  return output

def showFile(environ, user, cgiValues):

  try:
    fileDID = cgiValues["file_did"]
  except:
    return errorPage(environ, user, "file_did must be given")

  if '"' in fileDID:
    return errorPage(environ, user, "Bad format of file_did")
      
  try:
    workflowID = int(cgiValues["workflow_id"])
  except:
    return errorPage(environ, user, "workflow_id must be given")
  
  try:
    stageID = int(cgiValues["stage_id"])
  except:
    stageID = None

  output = header(environ, user, "justIN: File %s" % insertWBR(fileDID))

  output += ("<h1>File %s</h1>" % insertWBR(fileDID))
  
  query = ('SELECT file_id,state,processed_time,size_bytes,'
           'allocations,max_allocations '
           'FROM files '
           'WHERE workflow_id=%d %s AND file_did="%s"' %
           (workflowID, 
            ('AND stage_id=%d' % stageID) if stageID else '',
            fileDID))

  fileRow = justin.select(query, justOne = True)

  try:
    fileID = int(fileRow["file_id"])

  except Exception as e:
    return errorPage(environ, user, "invalid file_id (%d,%d,%s): %s\n%s" 
                     % (workflowID, stageID, fileDID, str(e), query))

  query = ("SELECT job_state,jobsub_id,event_time,"
           "site_name,rse_name FROM events "
           "LEFT JOIN storages ON storages.rse_id=events.rse_id "
           "LEFT JOIN sites ON sites.site_id=events.site_id "
           "LEFT JOIN jobs ON events.justin_job_id=jobs.justin_job_id "
           "WHERE event_type_id=%d AND file_id=%d ORDER BY event_id" 
           % (justin.event_FILE_ALLOCATED, fileID))

  justin.cur.execute(query)
  jobsRows = justin.cur.fetchall()

  query = ('SELECT wan_pfn,lan_pfn,rse_name '
           'FROM replicas '
           'LEFT JOIN storages ON storages.rse_id=replicas.rse_id '
           'WHERE file_id=%d' % fileID)

  justin.cur.execute(query)
  replicaRows = justin.cur.fetchall()

  output += ('<p><table>')
  
  output += ('<tr><td>Workflow ID</td>'
             '<td><a href="/dashboard/?method=show-workflow&workflow_id=%d">%d</a></td></tr>'
             % (workflowID, workflowID))

  if stageID:
    output += ('<tr><td>Stage ID</td>'
               '<td><a href="/dashboard/?method=show-stage&workflow_id=%d&stage_id=%d">%d</a></td></tr>'
               % (workflowID, stageID, stageID))
        
  output += ('<tr><td>Size</td>'
             '<td>%d bytes (%.2fGB)</td></tr>'
             % (fileRow["size_bytes"], fileRow["size_bytes"] / 1000000000.0 ))
      
  output += ('<tr><td>State</td>'
             '<td>%s</td></tr>'
             % fileRow["state"])
      
  output += ('<tr><td>Processed</td>'
             '<td>%s</td></tr>'
             % spaceForUnixEpoch(fileRow["processed_time"]))
      
  output += '<tr><td>Replicas</td><td>'
  
  for replicaRow in replicaRows:  
  
    if replicaRow["lan_pfn"]:
      output += ('<small>%s (wan): %s </small><br>' % 
            (replicaRow["rse_name"], 
             insertWBR(replicaRow["wan_pfn"])))
      output += ('<small>%s (lan): %s </small><br>' % 
            (replicaRow["rse_name"], 
             insertWBR(replicaRow["lan_pfn"])))

    else:
      output += ('<small>%s: %s </small><br>' % 
            (replicaRow["rse_name"], 
             insertWBR(replicaRow["wan_pfn"])))

  output += '</td></tr>'

  output += ('<tr><td>Allocations</td><td>%d / %d</td></tr>' 
             % (fileRow['allocations'], fileRow['max_allocations']))

  output += '<tr><td>Jobs</td><td>' 
  
  for jobRow in jobsRows:
  
    output += ('<a href="/dashboard/?method=show-job&jobsub_id=%s">%s</a> '
               '%s (%s &nbsp; %s &nbsp; %s)<br>' 
               % (jobRow["jobsub_id"], jobRow["jobsub_id"], 
                  jobRow["event_time"],
                  jobRow["job_state"],
                  jobRow["site_name"],
                  jobRow["rse_name"])
              )

  output += '</td></tr>'


  output += ('<tr><td colspan=2>'
             '<a href="/dashboard/?method=list-events&file_did=%s'
             '&workflow_id=%d">List file events</a> &nbsp; &nbsp; '
             % (urllib.parse.quote_plus(fileDID), workflowID))

  if ':' in fileDID:
    output += ('<a href="%s/gui/show_file?did=%s">Find in MetaCat</a>' % 
       (justin.metacatServerInputsURL, urllib.parse.quote_plus(fileDID)))

  output += '</td></tr>'
  output += "</table>"  

  try:
    (scope, name) = fileDID.split(':',1)

    metacatClient = \
          metacat.webapi.MetaCatClient(justin.metacatServerOutputsURL)

    j = metacatClient.get_file(namespace = scope, name = name,
                               with_metadata = True, with_provenance = True, 
                               with_datasets = True)

    output += ('<h2>MetaCat file info</h2>\n<pre>\n' + 
               pprint.pformat(j) + '</pre>\n')
  except Exception as e:
#    output += '<!-- ' + str(e) + ' -->'
    pass

  output += footer()
  return output

def outputWrapperLog(startResponse, environ, user):

  if not user or '/dune' not in user['wlcg_groups']:
    startResponse('302 Moved', [('Location', environ['REQUEST_URI'] + '&login'),
                                ('Content-length', '0')
                               ])
    return ''

  try:
    filename = environ['REQUEST_URI'].split('/')[2]
    cluster  = int(filename.split('.')[0])
    proc     = int(filename.split('.')[1])
    schedd   = filename.split('.',2)[2]
    if not justin.stringIsDomain(schedd):
      raise

  except Exception as e:
    print(environ['REQUEST_URI'], str(e), file=sys.stderr)
    startResponse('302 Moved', [('Location', '/dashboard/'),
                               ('Content-length', '0')
                              ])
    return('')

  # Try to get cached wrapper log from the database
  try:
    row = justin.select('SELECT wrapper_log FROM jobs '
                        'LEFT JOIN jobs_logs '
                        'ON jobs.justin_job_id=jobs_logs.justin_job_id '
                        'WHERE jobsub_id="%d.%d@%s"'
                        % (cluster, proc, schedd), justOne=True)

  except Exception as e:
    print(environ['REQUEST_URI'], str(e), file=sys.stderr)
    startResponse('302 Moved', [('Location', '/dashboard/'),
                               ('Content-length', '0')
                              ])
    return('')

  if row['wrapper_log']:
    # Use cached wrapper log
    output = ('Cached log for %d.%d@%s :\n\n' % (cluster, proc, schedd)
              + str(row['wrapper_log']))

  else:
    # Not cached so try to get it from HTCondor (for an active job?)
    try:
      output = ('Live log for %d.%d@%s :\n\n' % (cluster, proc, schedd)
                + os.popen('/var/lib/justin/justin-get-output %d %d %s %s'
                      % (cluster, proc, schedd, 
                         justin.htcondorCollectors[0]), 'r').read())
    except Exception as e:
      print(environ['REQUEST_URI'], str(e), file=sys.stderr)
      startResponse('302 Moved', [('Location', '/dashboard/'),
                               ('Content-length', '0')
                              ])
      return('')

  startResponse('200 OK',
                [('Content-type',        'text/plain'),
                 ('Content-Disposition', 'inline'),
                 ('Content-length',       str(len(output)))
                ])

  return output

def showJob(environ, user, cgiValues):
  try:
    jobsubID = cgiValues["jobsub_id"]
  except:
    return errorPage(environ, user, "jobsub_id must be given")
      
  output = header(environ, user, "justIN: Jobsub ID %s" % jobsubID)

  output += "<h1>Jobsub ID %s</h1>" % jobsubID
  
  query = ("SELECT jobs.justin_job_id,jobs.workflow_id,jobs.stage_id,"
           "sites.site_name,entries.entry_name,"
           "jobs.hostname,jobs.cpuinfo,jobs.os_release,"
           "principal_name AS user_name,"
           "jobs.rss_bytes,jobs.processors,jobs.wall_seconds,jobs.gpu_info,"
           "jobs.allocator_name,jobs.job_state,jobs.allocation_time,"
           "jobs.submitted_time,jobs.finished_time,jobs.jobsub_state,"
           "jobs.heartbeat_time,jobs.outputting_time,"
           "jobs.site_job_id,"
           "jobs.requested_processors,"
           "jobs.requested_gpu,"
           "jobs.requested_rss_bytes,"
           "jobs.requested_wall_seconds,jobscript_log,jobs.has_inner_apptainer,"
           "jobs.jobscript_exit,"
           "jobs.jobscript_real_seconds,jobs.jobscript_cpu_seconds,"
           "jobs.jobscript_max_rss_bytes,"
           "condor_groups.condor_group_name,"
           "wrapper_tries_left,"
           "LENGTH(wrapper_log) AS wrapper_log_len "
           "FROM jobs "
           "LEFT JOIN workflows ON workflows.workflow_id=jobs.workflow_id "
           "LEFT JOIN users ON workflows.user_id=users.user_id "
           "LEFT JOIN principal_names "
           "ON principal_names.pn_id=users.main_pn_id "
           "LEFT JOIN sites ON jobs.site_id=sites.site_id "
           "LEFT JOIN entries ON jobs.entry_id=entries.entry_id "
           "LEFT JOIN jobs_logs ON jobs_logs.justin_job_id=jobs.justin_job_id "
           "LEFT JOIN condor_groups "
           "ON condor_groups.condor_group_id=workflows.condor_group_id "
           "WHERE jobs.jobsub_id='%s'" % jobsubID)

  jobRow = justin.select(query, justOne = True)

  if not jobRow:
    return errorPage(environ, user, "Job not found in database")

  query = ("SELECT file_did FROM events "
           "LEFT JOIN files ON events.file_id=files.file_id "
           "WHERE events.justin_job_id=%d AND event_type_id=%d "
           "ORDER BY event_id" % 
           (jobRow['justin_job_id'], justin.event_FILE_ALLOCATED))

  inputFilesRows = justin.select(query)

  query = ("SELECT file_did,files.stage_id FROM files "
           "WHERE creator_justin_job_id=%d AND state='output' "
           "ORDER BY file_id" % jobRow['justin_job_id'])

  outputFilesRows = justin.select(query)

  output += '<table class="center">'

  output += ('<tr><td>Jobsub ID</td>'
             '<td colspan="2">%s</td></tr>'
             % html.escape(jobsubID, quote=True))

  if jobRow['workflow_id'] == justin.awtWorkflowID: 
    output += ('<tr><td>Workflow Testing</td>'
               '<td colspan="2">Yes</td></tr>')

  output += ('<tr><td>Workflow ID</td>'
             '<td colspan="2">'
             '<a href="/dashboard/?method=show-workflow&workflow_id=%s">'
               '%s</a></td></tr>'
               % (jobRow["workflow_id"], jobRow["workflow_id"]))
        
  output += ('<tr><td>Stage ID</td>'
             '<td colspan="2">'
             '<a href="/dashboard/?method=show-stage&workflow_id=%s&'
               'stage_id=%s">%s</a></td></tr>'
               % (jobRow["workflow_id"], jobRow["stage_id"],
                  jobRow["stage_id"]))
        
  output += ('<tr><td>User name</td>'
             '<td colspan="2">%s</td></tr>' % jobRow['user_name'])

  if jobRow['condor_group_name']:
    output += ('<tr><td>HTCondor Group</td>'
               '<td colspan="2">%s</td></tr>' % jobRow['condor_group_name'])

  output += ('<tr><td rowspan="4">Requested</td><td>'
             'Processors</td><td>%d</td></tr>'
             % jobRow["requested_processors"])

  output += ('<tr><td>GPU</td><td>%s</td></tr>' 
                % ('Yes' if jobRow['requested_gpu'] else 'No'))

  output += ('<tr><td>RSS bytes</td><td>%d (%d MiB)</td></tr>'
             % (jobRow["requested_rss_bytes"],
                int(jobRow["requested_rss_bytes"]) / 1048576))

  output += ('<tr><td>Wall seconds limit</td><td>%d (%d hours)</td></tr>'
             % (jobRow["requested_wall_seconds"],
                int(jobRow["requested_wall_seconds"]) / 3600))

  output += ('<tr><td>Submitted time</td>'
             '<td colspan="2">%s</td></tr>'
             % jobRow["submitted_time"])
      
  if jobRow["site_name"]:
    output += ('<tr><td>Site</td>'
               '<td colspan="2"><a href="/dashboard/?method=show-site&site_name=%s">'
               '%s</a></td></tr>'
               % (jobRow["site_name"], jobRow["site_name"]))
  else:
    output += '<tr><td>Site</td><td colspan="2"> </td></tr>'

  if jobRow["entry_name"]:
    output += ('<tr><td>Entry</td>'
               '<td colspan="2"><a href="/dashboard/?method=show-entry'
               '&entry_name=%s">%s</a></td></tr>'
               % (jobRow["entry_name"], jobRow["entry_name"]))
  else:
    output += '<tr><td>Entry</td><td colspan="2"> </td></tr>'

  if jobRow["job_state"] != 'submitted':
    output += ('<tr><td>Last heartbeat</td>'
               '<td colspan="2">%s</td></tr>'
               % spaceForUnixEpoch(jobRow["heartbeat_time"]))
      
    output += ('<tr><td rowspan="8">From worker node</td><td>Hostname</td>'
               '<td>%s</td></tr>'
               % html.escape(jobRow["hostname"], quote=True))
  
    output += ('<tr><td>cpuinfo</td>'
               '<td>%s</td></tr>'
               % html.escape(jobRow["cpuinfo"], quote=True))

    output += ('<tr><td>OS release</td>'
               '<td>%s</td></tr>'
               % html.escape(jobRow["os_release"], quote=True))

    output += ('<tr><td>Processors</td>'
               '<td>%s</td></tr>'
               % jobRow["processors"])

    output += ('<tr><td>RSS bytes</td>'
               '<td>%s (%d MiB)</td></tr>' 
               % (jobRow["rss_bytes"], 
                  int(jobRow["rss_bytes"]) / 1048576))

    output += ('<tr><td>Wall seconds limit</td>'
               '<td>%s (%d hours)</td></tr>'
               % (jobRow["wall_seconds"],
                  int(jobRow["wall_seconds"]) / 3600))

    output += ('<tr><td>GPU</td>'
                 '<td>%s</td></tr>'
                 % jobRow["gpu_info"])

    output += ('<tr><td>Inner Apptainer?</td>'
               '<td>%s</td></tr>' % bool(jobRow["has_inner_apptainer"]))

  output += ('<tr><td>Job state</td>'
             '<td colspan="2">%s</td></tr>'
             % jobRow["job_state"])

# SSCM      
#  output += ('<tr><td>Allocator name</td>'
#             '<td colspan="2">%s</td></tr>'
#             % html.escape(jobRow["allocator_name"], quote=True))

  output += ('<tr><td>Started</td>'
             '<td colspan="2">%s</td></tr>'
             % spaceForUnixEpoch(jobRow["allocation_time"]))

  output += '<tr><td>Input files</td><td colspan="2">'
  
  for inputFileRow in inputFilesRows:
    try:
      output += ('<a href="/dashboard/?method=show-file&workflow_id=%d&stage_id=%d&file_did=%s">'
                 '%s</a><br>' 
                 % (jobRow["workflow_id"], 
                    jobRow["stage_id"],
                    urllib.parse.quote(str(inputFileRow["file_did"]), safe=''),
                    html.escape(inputFileRow["file_did"], quote=True)
                   )
                )
    except Exception as e:
      output += '<!-- %s -->' % str(e)
      
  output += '</td></tr>'

  if jobRow["job_state"] in ['outputting', 'outputting_failed', 
                             'jobscript_error', 'finished']:
    output += ('<tr><td rowspan="4">Jobscript</td>'
               '<td>Exit code</td>'
               '<td>%d</td></tr>'
               % jobRow["jobscript_exit"])
      
    output += ('<tr>'
               '<td>Real time</td>'
               '<td>%s (%ds)</td></tr>'
               % (daysHoursMinutes(jobRow["jobscript_real_seconds"]),
                  jobRow["jobscript_real_seconds"]))
      
    output += ('<tr>'
               '<td>CPU time</td>'
               '<td>%s (%ds = %d%%)</td></tr>'
               % (daysHoursMinutes(jobRow["jobscript_cpu_seconds"]),
                  jobRow["jobscript_cpu_seconds"],
                  int( (jobRow["jobscript_cpu_seconds"] * 100)
                         / (jobRow["jobscript_real_seconds"] + 0.000001)
                     ) 
                 )
              )
      
    output += ('<tr>'
               '<td>Max RSS bytes</td>'
               '<td>%s (%d MiB)</td></tr>' 
               % (jobRow["jobscript_max_rss_bytes"], 
                  int(jobRow["jobscript_max_rss_bytes"]) / 1048576))
      
  output += ('<tr><td>Outputting started</td>'
             '<td colspan="2">%s</td></tr>'
             % spaceForUnixEpoch(jobRow["outputting_time"]))

  output += '<tr><td>Output files</td><td colspan="2">'
  
  for outputFileRow in outputFilesRows:
    try:
      if outputFileRow["file_did"].startswith('https://'):
        output += ('<span style="font-size: 0.9em">%s</span><br>' 
                   % outputFileRow["file_did"])

      else:
        output += ('<a href="/dashboard/?method=show-file&workflow_id=%d&stage_id=%d&file_did=%s">'
                 '%s</a><br>'  
                 % (jobRow["workflow_id"], 
                    outputFileRow["stage_id"],
                    urllib.parse.quote(str(outputFileRow["file_did"]), safe=''),
                    html.escape(outputFileRow["file_did"], quote=True)
                   )
                )
    except Exception as e:
      output += '<!-- %s -->' % str(e)
      
  output += '</td></tr>'

  output += ('<tr><td>Finished</td>'
             '<td colspan="2">%s</td></tr>'
             % spaceForUnixEpoch(jobRow["finished_time"]))

  if jobRow["job_state"] in ['finished', 'jobscript_error']:
    output += ('<tr><td>Saved logs</td>'
               '<td colspan="2">justin-logs:%s.logs.tgz</td></tr>' 
               % jobsubID.replace('@','-'))

  output += ('<tr><td colspan=3>'
        '<a href="/dashboard/?method=list-events&jobsub_id=%s">'
        'List job events</a> &nbsp; &nbsp; ' % jobsubID)

  if (((jobRow['wrapper_log_len'] is None) or
       (jobRow['wrapper_log_len'] == 0)) 
      and
      ((jobRow['wrapper_tries_left'] is None) or
       (jobRow['wrapper_tries_left'] == 0))
     ):
    output += '(HTCondor job logs unavailable)</td></tr>'
     
  else:
    output += ('<a href="/wrapperlogs/%s">'
               '%s HTCondor job logs</a>'
               '</td></tr>'
               % (jobsubID.replace('@','.'),
                  'Cached' if jobRow['wrapper_log_len'] else 'Live')
              )

  output += "</table>"

  if jobRow['jobscript_log']:
    output += "<h2>Jobscript log <small>(last 10,000 characters)</small></h2>"
    output += '<pre style="white-space:pre-wrap;">'
    output += html.escape(jobRow["jobscript_log"].strip(), quote=True)
    output += '</pre>'

  output += footer()
  return output

def listJobs(environ, user, cgiValues, pageNumber, pageLength):
      
  urlTemplate   = '/dashboard/?method=list-jobs&page_number=%d&page_length=%d'
  filters       = []
  titleSuffixes = []

  try:
    workflowID    = int(cgiValues["workflow_id"])
    urlTemplate += ('&workflow_id=%d' % workflowID)
    titleSuffixes.append('Workflow %d' % workflowID) 
    filters.append('jobs.workflow_id=%d' % workflowID)
  except:
    pass
  
  try:
    stageID      = int(cgiValues["stage_id"])
    urlTemplate += '&stage_id=' + str(stageID)
    titleSuffixes.append('Stage %d' % stageID) 
    filters.append('jobs.stage_id=%d' % stageID)
  except:
    pass

  try:
    allocationState = str(cgiValues["job_state"])
  except:
    pass
  else:
    if allocationState in justin.jobStatesAll:
      filters.append('jobs.job_state="%s"' % allocationState)
      urlTemplate += '&job_state=' + allocationState
      titleSuffixes.append('Allocation State %s' % allocationState)

  try:
    siteName = cgiValues["site_name"]
  except:
    pass
  else:
    if siteName and justin.stringIsSite(siteName):
      filters.append('sites.site_name="%s"' % siteName)
      urlTemplate += '&site_name=' + siteName
      titleSuffixes.append('Site %s' % siteName)

  try:
    entryName = cgiValues["entry_name"]
  except:
    pass
  else:
    if entryName and justin.stringIsSite(entryName):
      filters.append('entries.entry_name="%s"' % entryName)
      urlTemplate += '&entry_name=' + entryName
      titleSuffixes.append('Entry %s' % entryName)

  filter = ' AND '.join(filters)

  if filter:
    filter = 'WHERE ' + filter
  else:
    filter = ''
    
  if titleSuffixes:
    titleSuffix = ' for ' + ', '.join(titleSuffixes)
  else:
    titleSuffix = ''
    
  output = header(environ, user, "justIN: Jobs" + titleSuffix)

  output += "<h1>Jobs%s</h1>" % titleSuffix
  
  if not filter:   
    try:
      query = ('SELECT '
               ' (SELECT COUNT(*) FROM jobs '
               ' WHERE job_state="submitted") AS number_submitted,'
               ' (SELECT COUNT(*) FROM jobs '
               ' WHERE job_state="processing") AS number_processing,'
               ' (SELECT COUNT(*) FROM jobs '
               ' WHERE job_state="outputting") AS number_outputting')
               
      row = justin.select(query, justOne = True)

      output += ('<p>%d job(s) in submitted state, %d in processing state, '
            '%d in outputting state</p>' %
            (row['number_submitted'], 
             row['number_processing'],
             row['number_outputting']))

    except Exception as e:
      output += str(e)
  
  query = ("SELECT jobs.jobsub_id,jobs.workflow_id,jobs.stage_id,"
           "sites.site_name,entries.entry_name,"
           "jobs.job_state,jobs.allocation_time,jobs.submitted_time,"
           "jobs.finished_time,jobs.jobsub_state,jobs.jobscript_exit,"
           "principal_names.principal_name AS user_name "
           "FROM jobs "
           "LEFT JOIN workflows ON workflows.workflow_id=jobs.workflow_id "
           "LEFT JOIN users ON workflows.user_id=users.user_id "
           "LEFT JOIN principal_names "
           "ON principal_names.pn_id=users.main_pn_id "
           "LEFT JOIN sites ON jobs.site_id=sites.site_id "
           "LEFT JOIN entries ON jobs.entry_id=entries.entry_id "
           "%s "
           "ORDER BY jobs.justin_job_id DESC LIMIT %d,%d" %
           (filter, pageNumber * pageLength, pageLength + 1)
          )

  justin.cur.execute(query)
  jobRows = justin.cur.fetchall()

  output += makePager(pageNumber, pageLength, len(jobRows), urlTemplate)

  output += '<p><table class="center">'
  
  output += ('<tr>'
        '<th>Jobsub ID</th>'
        '<th>Job state</th>'
        '<th>Site / Entry</th>'
        '<th>User</th>'
        '<th>Workflow</th>'
        '<th>Stage</th>'
        '<th>Submitted</th>'
        '<th>Started</th>'
        '<th><small>Jobscript exit</small></th>'
        '<th>Finished</th>'
        '</tr>')
  
  for jobRow in jobRows[:pageLength]:
    if jobRow['user_name']:
      userNameStr = jobRow["user_name"]
    else:
      userNameStr = ' '

    if jobRow['workflow_id'] == justin.awtWorkflowID:
      workflowStageStr = '<td colspan=2>Workflow Testing</td>'
      
    else:
      if jobRow['workflow_id']:
        workflowStageStr = ('<td><a href="/dashboard/?method=show-workflow&'
                           'workflow_id=%s">%s</a></td>' 
                           % (jobRow["workflow_id"],
                              jobRow["workflow_id"]))
      else:
        workflowStageStr = '<td> </td>'
      
      if jobRow['stage_id']:
        workflowStageStr += (
             '<td><a href="/dashboard/?method=show-stage&workflow_id=%s&'
             'stage_id=%s">%s</a></td>' 
             % (jobRow["workflow_id"], 
                jobRow["stage_id"], jobRow["stage_id"]))
      else:
        workflowStageStr += '<td> </td>'
  
    if jobRow['site_name']:
      siteNameStr = ('<td><a href="/dashboard/?method=show-site&site_name=%s">'
                     '%s</a>%s</td>' 
                     % (jobRow['site_name'], jobRow['site_name'], 
                        ('<br><a href="/dashboard/?method=show-entry&'
                         'entry_name=%s">%s</a>' 
                         % (jobRow['entry_name'], jobRow['entry_name'])
                        ) if jobRow['entry_name'] else ''
                       )
                    )
    else:
      siteNameStr = '<td> </td>'

    output += ('<tr>'
          '<td><a href="/dashboard/?method=show-job&jobsub_id=%s">%s</a></td>'
          '<td>%s</td>'
          '%s'
          '<td>%s</td>'
          '%s'
          '<td>%s</td>'
          '<td>%s</td>'
          '<td>%s</td>'
          '<td>%s</td>'
          '</tr>'
          % (jobRow['jobsub_id'], html.escape(jobRow['jobsub_id'], quote=True),
             jobRow['job_state'],
             siteNameStr,
             userNameStr,
             workflowStageStr,
             spaceForUnixEpoch(jobRow["submitted_time"]),
             spaceForUnixEpoch(jobRow["allocation_time"]),
             jobRow["jobscript_exit"],
             spaceForUnixEpoch(jobRow["finished_time"])
            )
         )    

  output += ("</table>")
  output += makePager(pageNumber, pageLength, len(jobRows), urlTemplate)
  output += footer()
  return output

def listScopes(environ, user, cgiValues):
      
  output = header(environ, user, "justIN: Scopes")

  output += ("<h1>Scopes</h1>\n")

  output += ("<p>Scopes available for justIN workflows</p>\n")
  
  query = ('SELECT scope_name,wlcg_group_name,condor_group_name,'
           'max_files_per_workflow,named_quotas.processing_enabled,'
           'quota_name '
        'FROM scopes '
        'LEFT JOIN condor_groups '
        'ON condor_groups.condor_group_id=scopes.condor_group_id '
        'LEFT JOIN named_quotas '
        'ON named_quotas.quota_id=scopes.quota_id '
        'LEFT JOIN wlcg_groups '
        'ON named_quotas.wlcg_group_id=wlcg_groups.wlcg_group_id '
        'WHERE scopes.quota_id<>0 '
        'ORDER BY scope_name')
  scopeRows = justin.select(query)

  query = ('SELECT condor_group_name '
           'FROM condor_groups '
           'ORDER BY condor_group_name')
  groupRows = justin.select(query)

  output += ('<table class="center">')
  
  output += ('<tr>'
             '<th>Scope</th>'
             '<th>Quota</th>'
             '<th>Processing enabled?</th>'
             '<th>WLCG Group</th>'
             '<th>HTCondor Group</th>'
             '<th>Max input files</th></tr>')
  
  for scopeRow in scopeRows:  
    output += ('<tr><td>%s</td>'
               '<td>%s</td>' 
               '<td>%s</td>' 
               '<td>%s</td>' 
               '<td>%s</td>' 
               '<td>%d</td></tr>' 
               % (scopeRow['scope_name'],
                  scopeRow['quota_name'] if scopeRow['quota_name'] else ' ',
                  str(bool(scopeRow['processing_enabled'])),
                  scopeRow['wlcg_group_name'] 
                  if scopeRow['wlcg_group_name'] else ' ',
                  scopeRow['condor_group_name'] 
                  if scopeRow['condor_group_name'] else ' ',
                  scopeRow['max_files_per_workflow'] ))

  output += ("</table>\n<p>All HTCondor groups: ")

  for groupRow in groupRows:
    output += groupRow['condor_group_name'] + ' &nbsp; ' 
 
  output += footer()
  return output

def listQuotas(environ, user, cgiValues):
      
  output = header(environ, user, "justIN: Named quotas")

  output += ("<h1>Named quotas</h1>\n")

  output += ("<p>Named quotas available for justIN workflows</p>\n")
  
  query = ('SELECT wlcg_group_name,condor_group_name,'
           'max_files_per_workflow,named_quotas.processing_enabled,'
           'quota_name '
        'FROM named_quotas '
        'LEFT JOIN wlcg_groups '
        'ON named_quotas.wlcg_group_id=wlcg_groups.wlcg_group_id '
        'LEFT JOIN condor_groups '
        'ON condor_groups.condor_group_id=named_quotas.condor_group_id '
        'WHERE named_quotas.for_justin '
        'ORDER BY quota_name')

  quotaRows = justin.select(query)

  output += ('<table class="center">')
  
  output += ('<tr>'
             '<th>Quota</th>'
             '<th>Processing enabled?</th>'
             '<th>WLCG Group</th>'
             '<th>HTCondor Group</th>'
             '<th>Max input files</th></tr>')
  
  for quotaRow in quotaRows:  
    output += ('<tr><td>%s</td>'
               '<td>%s</td>' 
               '<td>%s</td>' 
               '<td>%s</td>' 
               '<td>%d</td></tr>' 
               % (quotaRow['quota_name'],
                  str(bool(quotaRow['processing_enabled'])),
                  quotaRow['wlcg_group_name'] 
                  if quotaRow['wlcg_group_name'] else ' ',
                  quotaRow['condor_group_name'] 
                  if quotaRow['condor_group_name'] else ' ',
                  quotaRow['max_files_per_workflow'] ))

  output += ("</table>\n")
 
  output += footer()
  return output

def listSites(environ, user, cgiValues):
      
  output = header(environ, user, "justIN: Sites")

  output += ("<h1>Sites</h1>")

  output += ('<p>Or list <a href="/dashboard/?method=list-entries">all '
             'entries</a>.</p>')
  
  query = ("SELECT DATE(last_osg_seen_time) AS osg_date,"
           "last_get_jobscript_time,"
           "site_name,sites.enabled,"
           "wlcg_site_name,always_inner_apptainer "
           "FROM sites "
           "WHERE sites.site_id > 0 ORDER BY site_name")
  justin.cur.execute(query)
  siteRows = justin.cur.fetchall()

  output += ('<table class="center">')
  
  output += ('<tr>'
        '<th>Site name</th>'
        '<th>Enabled?</th>'
        '<th>Last job</th>'
        '<th>Seen in OSG</th>'
        '<th>Always has<br>inner<br>apptainer</th>'
        '<th colspan=3>&nbsp;</th>'
        '</tr>')
  
  for siteRow in siteRows:  
    if str(siteRow['last_get_jobscript_time']) == justin.unixEpoch:
      lastGetStageStr = '&nbsp;'
    else:
      lastGetStageStr = str(siteRow['last_get_jobscript_time'])
  
    output += ('<tr>'
          '<td><a href="/dashboard/?method=show-site&site_name=%s">%s</a></td>'
          '<td style="font-weight: %s">%s</td>'
          '<td>%s</td>'
          '<td>%s</td>'
          '<td>%s</td>'
          '<td><a '
          'href="https://dune-cric.cern.ch/core/experimentsite/detail/%s/">'
          'CRIC</a></td>'
          '<td><form method="post" style="display:inline" '
          'action="https://goc.egi.eu/portal/index.php?Page_Type=Search">'
          '<input type="hidden" name="SearchString" value="%s">'
          '<input type="submit" value="GOCDB"></form></td>'
          '<td><a href="https://github.com/DUNE/dist-comp/issues?q=%s+in%%3A'
          'title+is%%3Aissue+is%%3Aopen">GitHub issues</a></td>'
          '</tr>'
          % (siteRow['site_name'], siteRow['site_name'],
             'bold' if siteRow['enabled'] else 'normal',
             'TRUE' if siteRow['enabled'] else 'False',
             lastGetStageStr,
             siteRow['osg_date'],
             ('' if (siteRow['always_inner_apptainer'] == 1) 
                 else bool(siteRow['always_inner_apptainer'])),
             siteRow['site_name'],
             siteRow['wlcg_site_name'],
             siteRow['site_name']
            )
         )    

  output += ("</table>")
  output += footer()
  return output

def listEntries(environ, user, cgiValues):
      
  output = header(environ, user, "justIN: Entries")

  output += ("<h1>Entries</h1>")
  
  output += ('<p>Or list <a href="/dashboard/?method=list-sites">all '
             'sites</a>.</p>')
  
  query = ("SELECT DATE(entries.last_osg_seen_time) AS osg_date,"
           "entries.last_get_jobscript_time,"
           "site_name,sites.enabled,entry_name,"
           "gatekeeper,entry_has_gpus,"
           "entries.always_inner_apptainer,"
           "entries.max_processors,entries.max_rss_bytes,"
           "entries.max_wall_seconds "
           "FROM entries "
           "LEFT JOIN sites ON sites.site_id=entries.site_id "
           "WHERE sites.site_id > 0 ORDER BY site_name,entry_name")
  
  entryRows = justin.select(query)

  output += ('<table class="center">')
  
  output += ('<tr>'
        '<th>Site name</th>'
        '<th>Entry name</th>'
        '<th>Gatekeeper</th>'
        '<th>RSS(MiB) / processors</th>'        
        '<th>Wall seconds limit?</th>'
        '<th>GPUs</th>'
        '<th>Last job</th>'
        '<th>Seen in OSG</th>'
        '<th>Always has<br>inner<br>apptainer</th>'
        '</tr>')

  lastSiteName = ''
  for entryRow in entryRows:  
    if str(entryRow['last_get_jobscript_time']) == justin.unixEpoch:
      lastGetStageStr = '&nbsp;'
    else:
      lastGetStageStr = str(entryRow['last_get_jobscript_time'])

    if entryRow['site_name'] == lastSiteName:
      output += '<tr><td>&nbsp;</td>'
    else:
      lastSiteName = entryRow['site_name']
      output += ('<tr>'
              '<td style="font-weight: %s">'
              '<a href="/dashboard/?method=show-site&site_name=%s">%s</a></td>'
              % ('bold' if entryRow['enabled'] else 'normal',
                 entryRow['site_name'], entryRow['site_name'],
                )
                )    
  
    output += ('<td><a href="/dashboard/?method=show-entry&entry_name=%s">'
               '%s</a></td>'
               '<td>%s</td>'
               '<td>%d&nbsp;/&nbsp;%d =&nbsp;%d</td>'
               '<td>%d (%d&nbsp;hours)</td>'
               '<td>%s</td>'
               '<td>%s</td>'
               '<td>%s</td>'
               '<td>%s</td>'
               '</tr>'
          % (entryRow['entry_name'],
             insertWBR(entryRow['entry_name']),
             insertWBR(entryRow['gatekeeper']),
             int(entryRow["max_rss_bytes"] / 1048576),
               entryRow['max_processors'],
               int(entryRow["max_rss_bytes"] / 
                   (1048576 * entryRow['max_processors'])),
             entryRow['max_wall_seconds'],
               int(entryRow["max_wall_seconds"] / 3600),
             'TRUE' if entryRow['entry_has_gpus'] else 'False',
             lastGetStageStr,
             entryRow['osg_date'],
             '' if (entryRow['always_inner_apptainer'] == 1) 
                else bool(entryRow['always_inner_apptainer'])
            )
         )    

  output += ("</table>")
  output += footer()
  return output

def listStorages(environ, user, cgiValues):
      
  output = header(environ, user, "justIN: Storages")

  output += ("<h1>Storages</h1>")
  
  query = ("SELECT rse_id,rse_name,occupancy,decommissioned,"
           "rucio_write,justin_write,(rucio_write AND justin_write) AS has_write,"
           "rucio_read,justin_read,(rucio_read AND justin_read) AS has_read,"
           "lan_write_scheme,wan_write_scheme,storages.region,"
           "storages.country,site_name "
           "FROM storages "
           "LEFT JOIN sites ON storages.site_id=sites.site_id "
           "ORDER BY rse_name")
  justin.cur.execute(query)
  storageRows = justin.cur.fetchall()

  output += ('<table class="center">')
  
  output += ('<tr>'
        '<th>RSE name</th>'
        '<th>Occupancy</th>'
        '<th>Read (R,j)</th>'
        '<th>Write (R,j)</th>'
        '<th>LAN write</th>'
        '<th>WAN write</th>'
        '<th colspan="3">Region / Country / Site</th>'
        '</tr>')
  
  for storageRow in storageRows:  
    output += ('<tr>'
               '<td><a href="/dashboard/?method=show-storage&rse_name=%s">'
               '%s</a></td>'
               % (storageRow['rse_name'], storageRow['rse_name']))

    if storageRow['decommissioned']:
      output += '<td colspan="8">Decommissioned</td></tr>'
    elif storageRow['rse_id'] == justin.MonteCarloRseID:
      output += '<td colspan="8"> </td></tr>'
    else:
      output += ('<td>%.2f</td>'
          '<td>%s (%s,%s)</td>'
          '<td>%s (%s,%s)</td>'
          '<td>%s</td>'
          '<td>%s</td>'
          '<td>%s</td>'
          '<td>%s</td>'
          '<td>%s</td>'
          '</tr>' 
          % (storageRow['occupancy'],
             bool(storageRow['has_read']),
              str(bool(storageRow['rucio_read']))[0],
              str(bool(storageRow['justin_read']))[0],
             bool(storageRow['has_write']),
              str(bool(storageRow['rucio_write']))[0],
              str(bool(storageRow['justin_write']))[0],
             storageRow['lan_write_scheme'],
             storageRow['wan_write_scheme'],
             storageRow['region'],
             storageRow['country'],
             storageRow['site_name'] if storageRow['site_name'] else ''
            )
         )    

  output += ("</table>")
  output += footer()
  return output

def showSite(environ, user, cgiValues):
      
  try:
    siteName = cgiValues["site_name"]
  except:
    return errorPage(environ, user, "site_name must be given")
    
  if not justin.stringIsSite(siteName):
    return errorPage(environ, user, "Invalid site name!")
        
  output = header(environ, user, "justIN: Site " + siteName)

  output += ("<h1>Site %s</h1>" % siteName)
  
  query = ('SELECT sites.site_id,last_osg_seen_time,'
           'last_get_jobscript_time,'
           'site_name,jobsub_site_name,wlcg_site_name,'
           'sites.enabled,'
           'sites.country,'
           'sites.region,'
           'sites.last_submitted_time,'
           'sites.last_get_jobscript_time,'
           'sites.last_awt_time,'
           'sites.last_awt_gpu_time,'
           'sites.max_rss_bytes,'
           'sites.max_processors,sites.max_wall_seconds,'
           'only_production,only_on_request,'
           'wlcg_site_name,always_inner_apptainer,'
           'rank_text,cache_time '
           'FROM sites '
           'LEFT JOIN sites_ranks_cache '
           'ON sites_ranks_cache.site_id=sites.site_id '
           'WHERE site_name="%s"' % siteName)

  justin.cur.execute(query)
  siteRow = justin.cur.fetchone()

  output += ('<table>')
  
  output += ('<tr><td colspan="2">Site name</td><td>%s</td></tr>' % siteName)
  
  output += ('<tr><td colspan="2">Jobsub site name</td><td>%s</td></tr>' 
        % siteRow['jobsub_site_name'])

  output += ('<tr><td colspan="2">WLCG site name</td><td>%s</td></tr>' 
             % siteRow['wlcg_site_name'])

  output += ('<tr><td colspan="2">Region</td><td>%s</td></tr>' 
             % siteRow['region'])

  output += ('<tr><td colspan="2">Seen in OSG config</td><td>%s</td></tr>'
             % siteRow['last_osg_seen_time'])

  output += ('<tr><td colspan="2">Enabled?</td><td>%s'
        % bool(siteRow['enabled']))

  if user and user['user_name'] in justin.justinAdmins:
    output += ' ' + buttonHTML(user = user,
                         nextURI = '/dashboard/?method=show-site&site_name=%s'
                                    % siteName,
                         label   = ('Disable' if bool(siteRow['enabled']) 
                                    else 'Enable'),
                         key     = siteRow['site_id'],
                         name    = 'set_site_state', 
                         value   = not bool(siteRow['enabled']))

  output += '</td></tr>' 

  output += ('<tr><td colspan="2">Only production?</td><td>%s</td></tr>\n'
        % bool(siteRow['only_production']))

  output += ('<tr><td colspan="2">Only on request?</td><td>%s</td></tr>\n'
        % bool(siteRow['only_on_request']))

#  output += ('<tr><td colspan="2">Last AWT submitted</td><td>%s</td></tr>' 
#        % siteRow['last_submitted_time'])

  if str(siteRow['last_get_jobscript_time']) == justin.unixEpoch:
    lastGetJobscriptStr = '&nbsp;'
  else:
    lastGetJobscriptStr = str(siteRow['last_get_jobscript_time'])

  output += ('<tr><td colspan="2">Last job started</td><td>%s</td></tr>' 
             % lastGetJobscriptStr)

  output += ('<tr><td colspan="2">Last AWT job ran</td><td>%s</td></tr>' 
             % spaceForUnixEpoch(siteRow['last_awt_time']))

  output += ('<tr><td colspan="2">Last AWT GPU job ran</td><td>%s</td></tr>' 
             % spaceForUnixEpoch(siteRow['last_awt_gpu_time']))

  output += ('<tr><td colspan="2">Always has inner apptainer</td>'
             '<td>%s</td></tr>' % 
             ('' if (siteRow['always_inner_apptainer'] == 1)
                 else bool(siteRow['always_inner_apptainer'])))

  if siteRow['rank_text']:
    output += ('<tr><td colspan="2">Stage Ranks</td><td>At %s, %s</td></tr>' 
               % (spaceForUnixEpoch(siteRow['cache_time']),
                  siteRow['rank_text'].replace(';',' ')))
  output += ('<tr><td colspan="2">Jobs</td><td>'
             '<a href="/dashboard/?method=list-jobs&site_name=%s">All</a> ' 
             % siteName)

  for state in ['submitted', 'started', 'processing', 'outputting',
                'finished', 'notused', 'aborted', 'stalled', 
                'jobscript_error', 'outputting_failed']:
    output += ('<a href="/dashboard/?method=list-jobs&job_state=%s&'
               'site_name=%s">%s</a> ' 
               % (state, siteName, state.capitalize()))

  output += ('<a href="/dashboard/?method=list-jobs&workflow_id=%d'
             '&stage_id=1&site_name=%s">AWT</a></td></tr>'
             % (justin.awtWorkflowID, siteName))
  
  output += ('<tr><td colspan="2">Events</td>'
             '<td><a href="/dashboard/?method=list-events&site_name=%s'
             '">All</a> &nbsp; ' % siteName)

  output += ('<a href="/dashboard/?method=list-events&site_name=%s&'
             'awt_events=True">AWT</a></td></tr>' % siteName)

  output += ('<tr><td colspan="2">External info</td><td><a '
          'href="https://dune-cric.cern.ch/core/experimentsite/detail/%s/">'
          'CRIC</a> '
        '<form method="post" style="display:inline" '
          'action="https://goc.egi.eu/portal/index.php?Page_Type=Search">'
          '<input type="hidden" name="SearchString" value="%s">'
          '<input type="submit" value="GOCDB"></form> '
          '<a href="https://github.com/DUNE/dist-comp/issues?q=%s+in%%3A'
          'title+is%%3Aissue+is%%3Aopen">GitHub issues</a>'
          '</td></tr>' % (siteRow['site_name'], siteRow['wlcg_site_name'],
                          siteRow['site_name']))

  output += ("</table>")

  output += ("<h2>Entries for this site</h2>")

  query = ('SELECT entry_name,gatekeeper,max_processors,max_rss_bytes,'
           'max_wall_seconds,always_inner_apptainer,'
           'DATE(last_osg_seen_time) AS osg_date,entry_has_gpus '
           'FROM entries '
           'WHERE entries.site_id=%d '
           'ORDER BY entry_name' % siteRow['site_id'])

  entryRows = justin.select(query)

  output += ('<table>')
  
  output += ('<tr>'
        '<th>Entry</th>'
        '<th>Gatekeeper</th>'
        '<th>RSS (MiB) / processors</th>'
        '<th>Wall seconds limit</th>'
        '<th>Always has inner apptainer</th>'
        '<th>GPUs</th>'
        '<th>Seen in OSG config</th>'
        '</tr>')
  
  for entryRow in entryRows:  
    output += ('<tr>'
          '<td><a href="/dashboard/?method=show-entry&entry_name=%s">'
          '%s</a></td>'
          '<td>%s</td>'
          '<td>%d / %d = %d</td>'
          '<td>%d (%d hours)</td>'
          '<td>%s</td>'
          '<td>%s</td>'
          '<td>%s</td>'
          '</tr>\n'
          % (entryRow['entry_name'], entryRow['entry_name'],
             entryRow['gatekeeper'],
             int(entryRow["max_rss_bytes"] / 1048576),
               entryRow['max_processors'],
               int(entryRow["max_rss_bytes"] / 
                   (1048576 * entryRow['max_processors'])),
             entryRow['max_wall_seconds'],
               int(entryRow["max_wall_seconds"] / 3600),
             ('' if (entryRow['always_inner_apptainer'] == 1) 
                 else bool(entryRow['always_inner_apptainer'])),
             str(bool(entryRow['entry_has_gpus'])),
             entryRow['osg_date']
            )
         )    
         
  output += ("</table>")

  output += ("<h2>Storages by distance</h2>")

  query = ('SELECT rse_name,occupancy,'
           'rucio_write,justin_write,(rucio_write AND justin_write) AS has_write,'
           'rucio_read,justin_read,(rucio_read AND justin_read) AS has_read,'
           'distance,read_result,write_result,jobsub_id '
           'FROM storages '
           'LEFT JOIN sites_storages ON sites_storages.rse_id=storages.rse_id '
           'LEFT JOIN jobs ON sites_storages.justin_job_id=jobs.justin_job_id '
           'WHERE sites_storages.site_id=%d AND NOT storages.decommissioned '
           'ORDER BY distance,rse_name' % siteRow['site_id'])

  justin.cur.execute(query)
  storageRows = justin.cur.fetchall()

  output += ("<p>Values are xrdcp read and rucio upload exit codes for jobs "
        "contacting each RSE. 0 = success. Decommissioned storages "
        "are not listed.</p>")

  output += ('<table>')
  
  output += ('<tr>'
        '<th>RSE name</th>'
        '<th>Distance</th>'
        '<th>Occupancy</th>'
        '<th>Read</th>'
        '<th>Write</th>'
        '<th>Read test</th>'
        '<th>Write test</th>'
        '<th>Events</th>'
        '</tr>')
  
  for storageRow in storageRows:  
    output += ('<tr>'
          '<td><a href="/dashboard/?method=show-storage&rse_name=%s">%s</a></td>'
          '<td>%d</td>'
          '<td>%.2f</td>'
          '<td>%s</td>'
          '<td>%s</td>'
          % (storageRow['rse_name'], storageRow['rse_name'],
             int(storageRow['distance']),
             storageRow['occupancy'],
             bool(storageRow['has_read']),
             bool(storageRow['has_write'])
            )
         )    
         
    if int(storageRow['read_result']) == 255:
      output += ('<td> </td>')
    else:
      output += ('<td><a href="/dashboard/?method=show-job&jobsub_id=%s">'
          '%d</a></td>' % 
          (storageRow['jobsub_id'], int(storageRow['read_result'])))

    if int(storageRow['write_result']) == 255:
      output += ('<td> </td>')
    else:
      output += ('<td><a href="/dashboard/?method=show-job&jobsub_id=%s">'
        '%d</a></td>' % 
        (storageRow['jobsub_id'], int(storageRow['write_result'])))

    output += ('<td><a href="/dashboard/?method=list-events&rse_name=%s&'
               'site_name=%s">All</a> &nbsp; ' % 
               (storageRow['rse_name'], siteName))

    output += ('<a href="/dashboard/?method=list-events&rse_name=%s&'
               'site_name=%s&awt_events=True">AWT</a></td></tr>' % 
               (storageRow['rse_name'], siteName))

  output += ("</table>")

  output += footer()
  return output

def showEntry(environ, user, cgiValues):
      
  try:
    entryName = cgiValues["entry_name"]
  except:
    return errorPage(environ, user, "entry_name must be given")
    
  if not justin.stringIsSite(entryName):
    return errorPage(environ, user, "Invalid entry name!")
        
  output = header(environ, user, "justIN: Entry " + entryName)

  output += ("<h1>Entry %s</h1>" % entryName)
  
  query = ('SELECT DATE(entries.last_osg_seen_time) AS osg_date,'
           'entries.last_get_jobscript_time,'
           'site_name,jobsub_site_name,wlcg_site_name,'
           'sites.enabled,'
           'sites.country,'
           'sites.region,'
           'sites.last_submitted_time,'
           'sites.last_get_jobscript_time,'
           'entries.gatekeeper,'
           'entries.last_awt_time,'
           'entries.max_rss_bytes,'
           'entries.max_processors,entries.max_wall_seconds,'
           'wlcg_site_name,entries.always_inner_apptainer,'
           'entries.entry_has_gpus,'
           'entries.file_name,entries.raw_config '
           'FROM entries '
           'LEFT JOIN sites '
           'ON sites.site_id=entries.site_id '
           'WHERE entry_name="%s"' % entryName)

  entryRow = justin.select(query, justOne = True)

  output += ('<table>')
  
  output += ('<tr><td>Entry</td><td>%s</td></tr>' 
             % entryName)

  output += ('<tr><td>Site</td><td>'
             '<a href="/dashboard/?method=show-site&site_name=%s">%s</a> '
             '(%s)</td></tr>' 
             % (entryRow['site_name'], entryRow['site_name'], 
                'enabled' if entryRow['enabled'] else 'not enabled'))
  
  output += ('<tr><td>Gatekeeper</td><td>%s</td></tr>' 
             % entryRow['gatekeeper'])
  
  output += ('<tr><td>RSS (MiB) / processors</td><td>%d / %d = %d</td></tr>'
             % (int(entryRow["max_rss_bytes"] / 1048576),
                entryRow['max_processors'],
                int(entryRow["max_rss_bytes"] / 
                    (1048576 * entryRow['max_processors'])
                   )
               )
            )

  output += ('<tr><td>Wall seconds limit</td><td>%d (%d hours)</td></tr>'
             % (entryRow['max_wall_seconds'],
                int(entryRow["max_wall_seconds"] / 3600)
               )
            )

  output += ('<tr><td>Seen in OSG config</td><td>%s</td></tr>'
             % entryRow['osg_date'])

#  output += ('<tr><td>Last AWT submitted</td><td>%s</td></tr>' 
#             % entryRow['last_submitted_time'])

  if str(entryRow['last_get_jobscript_time']) == justin.unixEpoch:
    lastGetJobscriptStr = '&nbsp;'
  else:
    lastGetJobscriptStr = str(entryRow['last_get_jobscript_time'])

  output += ('<tr><td>Last job started</td><td>%s</td></tr>' 
             % lastGetJobscriptStr)

  output += ('<tr><td>Last AWT job</td><td>%s</td></tr>' 
             % spaceForUnixEpoch(entryRow['last_awt_time']))

  output += ('<tr><td>Always has inner apptainer</td>'
             '<td>%s</td></tr>' % 
             ('' if (entryRow['always_inner_apptainer'] == 1)
                 else bool(entryRow['always_inner_apptainer'])))

  output += ('<tr><td>Has GPUs</td><td>%s</td></tr>' 
             % str(bool(entryRow['entry_has_gpus'])))

  output += ('<tr><td>Jobs</td><td>'
             '<a href="/dashboard/?method=list-jobs&entry_name=%s">All</a> ' 
             % entryName)

  for state in ['submitted', 'started', 'processing', 'outputting',
                'finished', 'notused', 'aborted', 'stalled', 
                'jobscript_error', 'outputting_failed']:
    output += ('<a href="/dashboard/?method=list-jobs&job_state=%s&'
               'entry_name=%s">%s</a> ' 
               % (state, entryName, state.capitalize()))

  output += ('<a href="/dashboard/?method=list-jobs&workflow_id=%d'
             '&stage_id=1&entry_name=%s">AWT</a></td></tr>'
             % (justin.awtWorkflowID, entryName))
  
  output += ('<tr><td>Events</td>'
             '<td><a href="/dashboard/?method=list-events&entry_name=%s'
             '">All</a> &nbsp; ' % entryName)

  output += ('<a href="/dashboard/?method=list-events&entry_name=%s&'
             'awt_events=True">AWT</a></td></tr>' % entryName)

  output += ('<tr><td>Pilot factory status page</td>'
             '<td><a href="http://gfactory-2.opensciencegrid.org/factory/monitor/factoryEntryStatusNow.html?entry=%s">%s</a></td></tr>'
             % (entryName, entryName))
         
  output += ("</table>")

  output += ('<p>Raw configuration ')

  if entryRow['file_name']:
    output += ('from '
               '<a href="https://github.com/opensciencegrid/osg-gfactory/blob/'
               'master/%s">opensciencegrid/osg-gfactory/%s</a>'
               % (entryRow['file_name'], entryRow['file_name']))

  output += ('<pre style="white-space: pre-wrap;">') 
  output += html.escape(entryRow["raw_config"], quote=True)  
  output += ('</pre>') 

  output += footer()
  return output

def showUser(environ, user, cgiValues):
      
  try:
    userName = cgiValues["user_name"]
  except:
    return errorPage(environ, user, "user_name must be given")

  if not justin.stringIsUsername(userName):
    return errorPage(environ, user, "Invalid user name!")

  output = header(environ, user, "justIN: User " + userName)

  output += ("<h1>User %s</h1>" % userName)

  try:
    justinSession = user['justin_session']
  except:
    justinSession = ' '
  
  query = ('SELECT users.user_id,principal_name,created_time,expires_time,'
           'access_token_created,access_token_expires,access_token,'
           'LENGTH(access_token) AS access_token_len,'
           'LENGTH(refresh_token) AS refresh_token_len,'
           'users.processing_enabled '
           'FROM principal_names '
           'LEFT JOIN users '
           'ON principal_names.pn_id=users.main_pn_id '
           'LEFT JOIN sessions '
           'ON sessions.user_id=principal_names.user_id AND '
           'sessions.justin_session="%s" '
           'WHERE principal_name="%s"' % (justinSession, userName))

  try:
    userRow = justin.select(query, justOne = True)
    userID = int(userRow['user_id'])
  except:
    return errorPage(environ, user, "Unknown user!")

  # Things we only show to the user themself
  if user and user['user_name'] == userName:
    output += ('<h2>Your current session</h2>\n')

    if user['user_name'] in justin.justinAdmins:
      output += '<p>You are a justIN admin</p>\n'

    output += ('<table><tr><td>User name</td><td>%s</td></tr>' 
               % userName)

    output += ('<tr><td>Processing enabled?</td><td>%s</td></tr>' 
               % str(bool(userRow['processing_enabled'])))

    output += ('<tr><td>Groups</td><td>%s</td></tr>' 
               % ' &nbsp; '.join(user['wlcg_groups']))

    output += ('<tr><td>Quotas</td><td>%s</td></tr>' 
               % ' &nbsp; '.join(user['named_quotas']))

    output += ('<tr><td>Valid</td><td>%s to %s UTC</td></tr>' 
               % (userRow['created_time'], userRow['expires_time']))

    output += ("</table>")

    if userRow['access_token_len'] > 0:
      output += ('<h2>Your access token</h2>\n<table>')
  
      output += ('<tr><td>Scopes requested</td><td>%s</td></tr>' 
               % justin.cilogonScopes)

      output += ('<tr><td>Created</td><td>%s UTC</td></tr>' 
               % userRow['access_token_created'])

      output += ('<tr><td>Expires</td><td>%s UTC</td></tr>' 
               % userRow['access_token_expires'])

      accessTokenDict = json.loads(base64.urlsafe_b64decode(
                            userRow['access_token'].split('.')[1] + '=='))

      for k in accessTokenDict:
        output += ('<tr><td>%s</td><td>%s</td></tr>' %
                   (k, insertWBR(str(accessTokenDict[k])).replace(' ','<br>'))
                  )

      if userRow['refresh_token_len'] == 0:
        output += '<tr><td colspan="2">No refresh token!</td></tr>'

      output += ("</table>")

  output += footer()
  return output

def showStorage(environ, user, cgiValues):
      
  try:
    rseName = cgiValues["rse_name"]
  except:
    return errorPage(environ, user, "rse_name must be given")
    
  if not justin.stringIsSite(rseName):
    return errorPage(environ, user, "Invalid RSE name!")
        
  output = header(environ, user, "justIN: Storage " + rseName)

  query = ('SELECT occupancy,rse_id,decommissioned,'
           'rucio_write,justin_write,(rucio_write AND justin_write) AS has_write,'
           'rucio_read,justin_read,(rucio_read AND justin_read) AS has_read,'
           'lan_write_scheme,wan_write_scheme,'
           'storages.country,storages.region,site_name '
           'FROM storages '
           'LEFT JOIN sites ON sites.site_id=storages.site_id '
           'WHERE rse_name="%s"' % rseName)

  justin.cur.execute(query)
  storageRow = justin.cur.fetchone()

  output += ("<h1>Storage %s%s</h1>" 
             % (rseName, 
                ' (DECOMMISSIONED)' if storageRow['decommissioned'] else ''))
  
  output += ('<table>')

  output += ('<tr><td>RSE name</td><td>%s</td></tr>' % rseName)
  output += ('<tr><td>Country</td><td>%s</td></tr>' % storageRow['country'])
  output += ('<tr><td>Region</td><td>%s</td></tr>' % storageRow['region'])

  if storageRow['site_name']:
    output += ('<tr><td>Site name</td>'
               '<td><a href="/dashboard/?method=show-site&site_name=%s">'
               '%s</a></td></tr>' 
               % (storageRow['site_name'], storageRow['site_name']))
  
  output += ('<tr><td>Occupancy</td><td>%.2f</td></tr>' % storageRow['occupancy'])


  if user and user['user_name'] in justin.justinAdmins:
    readButtonHTML = ' ' + buttonHTML(user = user,
                    nextURI = '/dashboard/?method=show-storage&rse_name=%s'
                                    % rseName,
                    label   = ('Disable' if bool(storageRow['justin_read']) 
                               else 'Enable'),
                    key     = storageRow['rse_id'],
                    name    = 'set_storage_read_state', 
                    value   = not bool(storageRow['justin_read']))

    writeButtonHTML = ' ' + buttonHTML(user = user,
                    nextURI = '/dashboard/?method=show-storage&rse_name=%s'
                                    % rseName,
                    label   = ('Disable' if bool(storageRow['justin_write']) 
                               else 'Enable'),
                    key     = storageRow['rse_id'],
                    name    = 'set_storage_write_state', 
                    value   = not bool(storageRow['justin_write']))
  else:
    readButtonHTML  = ''
    writeButtonHTML = ''

  output += ('<tr><td>Read</td><td>%s (Rucio=%s, justIN=%s%s)</td></tr>' 
        % (bool(storageRow['has_read']), 
           bool(storageRow['rucio_read']), 
           bool(storageRow['justin_read']),
           readButtonHTML))

  output += ('<tr><td>Write</td><td>%s (Rucio=%s, justIN=%s%s)</td></tr>' 
        % (bool(storageRow['has_write']), 
           bool(storageRow['rucio_write']), 
           bool(storageRow['justin_write']),
           writeButtonHTML))

  output += ('<tr><td>Write schemes</td><td>LAN %s, WAN %s</td></tr>' 
        % (storageRow['lan_write_scheme'], storageRow['wan_write_scheme']))

  output += ('<tr><td colspan=2>'
             '<a href="/dashboard/?method=list-events&rse_name=%s'
             '">All events</a> &nbsp; ' % rseName)

  output += ('<a href="/dashboard/?method=list-events&rse_name=%s&'
             'awt_events=True">AWT events</a> &nbsp; ' % rseName)

  output += ('<a href="https://github.com/DUNE/dist-comp/issues'
             '?q=%s+in%%3Atitle+is%%3Aissue+is%%3Aopen">'
             'GitHub issues</a></td></tr>' % rseName)

  output += ('</table>')

  output += ("<h2>Sites by distance</h2>\n"
             "<p>Only sites seen in the OSG configuration in the last %d "
             "days are shown.</p>" % justin.unseenSitesExpireDays)

  query = ('SELECT site_name,distance,enabled,'
           'read_result,write_result,jobsub_id '
           'FROM sites '
           'LEFT JOIN sites_storages ON sites_storages.site_id=sites.site_id '
           'LEFT JOIN jobs ON sites_storages.justin_job_id=jobs.justin_job_id '
           'WHERE rse_id=%d AND '
           'sites.last_osg_seen_time > DATE_SUB(NOW(),INTERVAL %d DAY) '
           'ORDER BY distance,site_name' 
           % (storageRow['rse_id'], justin.unseenSitesExpireDays))

  justin.cur.execute(query)
  siteRows = justin.cur.fetchall()

  output += ("<p>Test values are xrdcp read and rucio upload exit codes for "
             "jobs at each site contacting this RSE. 0 = success.</p>")

  output += ('<table>')
  
  output += ('<tr>'
        '<th>Site name</th>'
        '<th>Distance</th>'
        '<th>Enabled</th>'
        '<th>Read test</th>'
        '<th>Write test</th>'
        '<th>Events</th>'
        '</tr>')
  
  for siteRow in siteRows:  
    output += ('<tr>'
          '<td><a href="/dashboard/?method=show-site&site_name=%s">%s</a></td>'
          '<td>%d</td>'
          '<td>%s</td>'
          % (siteRow['site_name'], siteRow['site_name'],
             int(siteRow['distance']),
             bool(siteRow['enabled'])
            )
         )    

    if int(siteRow['read_result']) == 255:
      output += ('<td> </td>')
    else:
      output += ('<td><a href="/dashboard/?method=show-job&jobsub_id=%s">'
            '%d</a></td>' % 
            (siteRow['jobsub_id'], int(siteRow['read_result'])))

    if int(siteRow['write_result']) == 255:
      output += ('<td> </td>')
    else:
      output += ('<td><a href="/dashboard/?method=show-job&jobsub_id=%s">'
            '%d</a></td>' % 
            (siteRow['jobsub_id'], int(siteRow['write_result'])))

    output += ('<td><a href="/dashboard/?method=list-events&rse_name=%s&'
               'site_name=%s">All</a> &nbsp; ' % 
               (rseName, siteRow['site_name']))

    output += ('<a href="/dashboard/?method=list-events&rse_name=%s&'
               'site_name=%s&awt_events=True">AWT</a></td></tr>' % 
               (rseName, siteRow['site_name']))

  output += ("</table>")

  output += footer()
  return output

def listEvents(environ, user, cgiValues, pageNumber, pageLength):

  whereList = []
  queryList = ''

  try:
    workflowID = int(cgiValues["workflow_id"])
  except:
    workflowID = ''
  else:
    if workflowID:
      whereList.append('events.workflow_id=%d' % workflowID)
      queryList += '&workflow_id=' + str(workflowID)

  try:
    stageID = int(cgiValues["stage_id"])
  except:
    stageID = ''
  else:
    if stageID:
      whereList.append('events.stage_id=%d' % stageID)
      queryList += '&stage_id=' + str(stageID)

  try:
    jobsubID = cgiValues["jobsub_id"]

    if not justin.stringIsJobsubID(jobsubID):
      raise
  except:
    jobsubID = ''
  else:
    if jobsubID:
      whereList.append('jobsub_id="%s"' % jobsubID)
      queryList += '&jobsub_id=' + jobsubID

  try:
    jobscriptExit = int(cgiValues["jobscript_exit"])
  except:
    jobscriptExit = ''
  else:
    if jobscriptExit != '':
      whereList.append('events.jobscript_exit=%d' % jobscriptExit)
      queryList += '&jobscript_exit=' + str(jobscriptExit)

  try:
    fileDID = cgiValues["file_did"]

    if not justin.stringIsDID(fileDID):
      raise
  except:
    fileDID = ''
  else:
    if fileDID:
      whereList.append('file_did="%s"' % fileDID)
      queryList += '&file_did=' + fileDID

  try:
    rseName = cgiValues["rse_name"]

    if not justin.stringIsSite(rseName):
      raise
  except:
    rseName = ''
  else:
    if rseName:
      whereList.append('rse_name="%s"' % rseName)
      queryList += '&rse_name=' + rseName

  try:
    siteName = cgiValues["site_name"]

    if not justin.stringIsSite(siteName):
      raise
  except:
    siteName = ''
  else:
    if siteName:
      whereList.append('site_name="%s"' % siteName)
      queryList += '&site_name=' + siteName

  try:
    entryName = cgiValues["entry_name"]

    if not justin.stringIsSite(entryName):
      raise
  except:
    entryName = ''
  else:
    if entryName:
      whereList.append('entry_name="%s"' % entryName)
      queryList += '&entry_name=' + entryName

  try:
    eventTypeName = cgiValues["event_type_name"]

    if not justin.stringIsSite(eventTypeName):
      raise
  except:
    eventTypeName = ''
  else:
    if eventTypeName:
      whereList.append('event_type_name="%s"' % eventTypeName)
      queryList += '&event_type_name=' + eventTypeName

  try:
    awtEvents = bool(cgiValues["awt_events"])
  except:
    awtEvents = ''
  else:
    if awtEvents:
      whereList.append('events.event_type_id IN (%d,%d,%d,%d)' 
                       % (justin.event_AWT_READ_OK,
                          justin.event_AWT_READ_FAIL,
                          justin.event_AWT_WRITE_OK,
                          justin.event_AWT_WRITE_FAIL))
      queryList += '&awt_events=' + str(awtEvents)

  if whereList:
    whereString = ' WHERE ' + ' AND '.join(whereList)
  else:
    whereString = ''

  # These lists are used for the pull down menus in the filter HTML
  eventTypeRows = justin.select('SELECT event_type_name FROM event_types '
                                'ORDER BY event_type_name')
  siteRows      = justin.select('SELECT site_name FROM sites '
                                'ORDER BY site_name')
  entryRows     = justin.select('SELECT entry_name FROM entries '
                                'ORDER BY entry_name')
  rseRows       = justin.select('SELECT rse_name FROM storages '
                                'ORDER BY rse_name')

  output = header(environ, user, "justIN: Events")

  output += ("<h1>Events</h1>\n")

  output += ("<!-- %s -->\n" % str(cgiValues))

  output += ('<p><form method="get" formaction="/dashboard/">'
    '<input type="hidden" name="method" value="list-events">'
    '<label>Event&nbsp;Type:<select name="event_type_name">'
    '<option value=""%s>ANY</option>'
    % ('' if eventTypeName else ' selected'))

  for eventTypeRow in eventTypeRows:
    output += ('<option value="%s"%s>%s</option>' 
               % (eventTypeRow['event_type_name'],
                  ' selected' 
                  if eventTypeRow['event_type_name'] == eventTypeName
                  else '',
                  eventTypeRow['event_type_name']))
                    
  output += ('</select></label> '
    '<label>Workflow&nbsp;ID:<input type="number" name="workflow_id" '
    'min="1" max="9999" step="1" value="%s"></label> '
    '<label>Stage&nbsp;ID:<input type="number" name="stage_id" min="1" '
    'max="9" step="1" value="%s"></label> '
    '<label>File&nbsp;DID:<input type="text" name="file_did" '
    'value="%s"></label> '
    '<label>Jobsub&nbsp;ID:<input type="text" name="jobsub_id" '
    'value="%s" size="50"></label> '
    '<label>Jobscript&nbsp;exit:<input type="number" name="jobscript_exit" '
    'min="0" max="255" step="1" value="%s"></label> '
    '<label>Site:<select name="site_name">'
    '<option value=""%s>ANY</option>'
    % (str(workflowID), str(stageID), fileDID, jobsubID, str(jobscriptExit),
       '' if siteName else ' selected'))

  for siteRow in siteRows:
    output += ('<option value="%s"%s>%s</option>' 
               % (siteRow['site_name'],
                  ' selected' 
                  if siteRow['site_name'] == siteName
                  else '',
                  siteRow['site_name']))
  
  output += ('</select></label> '
    '<label>Entry:<select name="entry_name">'
    '<option value=""%s>ANY</option>'
    % ('' if entryName else ' selected'))
  
  for entryRow in entryRows:
    output += ('<option value="%s"%s>%s</option>' 
               % (entryRow['entry_name'],
                  ' selected' 
                  if entryRow['entry_name'] == entryName
                  else '',
                  entryRow['entry_name']))
  
  output += ('</select></label> '
    '<label>RSE:<select name="rse_name">'
    '<option value=""%s>ANY</option>'
    % ('' if rseName else ' selected'))
  
  for rseRow in rseRows:
    output += ('<option value="%s"%s>%s</option>' 
               % (rseRow['rse_name'],
                  ' selected' 
                  if rseRow['rse_name'] == rseName
                  else '',
                  rseRow['rse_name']))
  
  output += ('</select></label> '
    '<input type="submit" value="Filter" '
    'style="background: #E1703D; border-radius: 5px; padding: 5px; '
    'color: white; font-weight: bold; font-size: 1em; border: 0; '
    'cursor: pointer">'
    '</form></p>\n')
   
  query = ('SELECT event_id,events.event_type_id,event_type_name,event_text,'
           'events.workflow_id,events.stage_id,'
           'file_did,jobsub_id,site_name,entry_name,rse_name,event_time,'
           'events.jobscript_exit '
           'FROM events '
           'LEFT JOIN event_types '
           'ON events.event_type_id=event_types.event_type_id '
           'LEFT JOIN files ON events.file_id=files.file_id '
           'AND events.workflow_id=files.workflow_id '
           'AND events.stage_id=files.stage_id '
           'LEFT JOIN jobs ON events.justin_job_id=jobs.justin_job_id '
           'AND events.workflow_id=jobs.workflow_id '
           'AND events.stage_id=jobs.stage_id '
           'LEFT JOIN sites ON events.site_id=sites.site_id '
           'LEFT JOIN entries ON events.entry_id=entries.entry_id '
           'LEFT JOIN storages ON events.rse_id=storages.rse_id '
           '%s '
           'ORDER BY event_id DESC LIMIT %d,%d' % 
           (whereString, pageNumber * pageLength, pageLength + 1))

  eventsRows = justin.select(query)

  output += makePager(pageNumber, pageLength, len(eventsRows),
             '/dashboard/?method=list-events&page_number=%d&page_length=%d'
             + queryList)

  output += (
"""<p><table class="center">
<tr>
<th>Event</th><th>Type</th><th>Time</th>
<th>Workflow</th><th>Stage</th>
<th>File DID</th>
<th>Jobsub ID</th>
<th>Site / Entry</th>
<th>RSE</th>
</tr>""")

  for eventRow in eventsRows[:pageLength]:
    cellColor = '#FFDDDD' if ('FAIL' in eventRow['event_type_name']) else \
                ('#DDFFDD' if 'OK' in eventRow['event_type_name'] else 'white')

    if eventRow['event_type_id'] in \
        (justin.event_JOB_SCRIPT_ERROR, justin.event_JOB_ABORT_SCRIPT_ERROR):
      nameSuffix = ' (%d)' % eventRow['jobscript_exit']
    else:
      nameSuffix = ''

    output += ('<tr><td>%d</td><td style="background-color: %s">%s%s</td>'
               '<td>%s</td>' %
               (eventRow['event_id'], 
                cellColor,
                eventRow['event_type_name'],
                nameSuffix,
                eventRow['event_time']
               )          
              )

    if eventRow['workflow_id']: 
      output += ('<td><a href="/dashboard/?method=show-workflow&workflow_id=%d">'
            '%d</a></td>' 
            % (eventRow['workflow_id'], 
               eventRow['workflow_id']))
    else:
      output += ('<td>&nbsp;</td>')
         
    if eventRow['stage_id']: 
      output += ('<td><a href="/dashboard/?method=show-stage&workflow_id=%d'
            '&stage_id=%d">%d</a></td>' 
            % (eventRow['workflow_id'], 
               eventRow['stage_id'], 
               eventRow['stage_id']))
    else:
      output += ('<td>&nbsp;</td>')
         
    if eventRow['file_did'] and eventRow['file_did'].startswith('https://'):
      output += '<td style="font-size: 0.8em">%s</td>' % eventRow['file_did']
    elif eventRow['file_did']:
      output += ('<td><a href="/dashboard/?method=show-file&workflow_id=%d'
            '&file_did=%s">%s</td>' 
            % (eventRow['workflow_id'], 
               eventRow['file_did'], 
               insertWBR(eventRow['file_did'])))
    else:
      output += ('<td>&nbsp;</td>')
         
    if eventRow['jobsub_id']: 
      output += ('<td><a href="/dashboard/?method=show-job&jobsub_id=%s">%s</a></td>'
            % (eventRow['jobsub_id'], eventRow['jobsub_id']))
    else:
      output += ('<td>&nbsp;</td>')
         
    if eventRow['site_name']: 
      output += \
       ('<td><a href="/dashboard/?method=show-site&site_name=%s">%s</a>%s</td>'
            % (eventRow['site_name'], eventRow['site_name'], 
               ('<br><a href="/dashboard/?method=show-entry&entry_name=%s">'
                '%s</a>' 
                % (eventRow['entry_name'], eventRow['entry_name'])
               ) if eventRow['entry_name'] else ''
              )
       )
    else:
      output += ('<td>&nbsp;</td>')
         
    if eventRow['rse_name']: 
      output += ('<td><a href="/dashboard/?method=show-storage&rse_name=%s">%s</a></td>'
            % (eventRow['rse_name'], eventRow['rse_name']))
    else:
      output += ('<td>&nbsp;</td>')

    output += ('</tr>')
               
  output += ("</table>")
  
  output += makePager(pageNumber, pageLength, len(eventsRows),
             '/dashboard/?method=list-events&page_number=%d&page_length=%d'
             + queryList)

  output += ('<p>You can download this list as '
               '<a href="/dashboard/?method=download-events%s'
               '&format=csv&csvfile=">CSV</a> or '
               '<a href="/dashboard/?method=download-events%s'
               '&format=json">JSON</a> '
               '(up to %d files included)</p>'
               % (queryList,
                  queryList,
                  csvJsonMaxRows))

  output += footer()
  return output

def downloadCsvJson(environ, user, cgiValues, method):

  # Set up and validate all possible options
  try:
    workflowID = int(cgiValues["workflow_id"])
  except:
    workflowID = None

  try:
    stageID = int(cgiValues["stage_id"])
  except:
    stageID = None

  try:
    jobsubID = cgiValues["jobsub_id"]

    if not justin.stringIsJobsubID(jobsubID):
      raise
  except:
    jobsubID = None

  try:
    jobscriptExit = int(cgiValues["jobscript_exit"])
  except:
    jobscriptExit = None

  try:
    fileDID = cgiValues["file_did"]

    if not justin.stringIsDID(fileDID):
      raise
  except:
    fileDID = None

  try:
    rseName = cgiValues["rse_name"]

    if not justin.stringIsSite(rseName):
      raise
  except:
    rseName = None

  try:
    siteName = cgiValues["site_name"]

    if not justin.stringIsSite(siteName):
      raise
  except:
    siteName = None

  try:
    entryName = cgiValues["entry_name"]

    if not justin.stringIsSite(entryName):
      raise
  except:
    entryName = None

  try:
    eventTypeName = cgiValues["event_type_name"]

    if not justin.stringIsSite(eventTypeName):
      raise
  except:
    eventTypeName = None

  if 'format' in cgiValues:
    format = cgiValues['format']
  else:
    return errorPage(environ, user, "format must be given")

  if format not in ['csv','json']:
    return errorPage(environ, user, "format must be csv or json")

  if method == 'download-file-states':

    if workflowID is None or stageID is None:
      return errorPage(environ, user, "workflow_id and stage_id must be given")

    # CSV or JSON file with states of input files for a workflow/stage
    stateFilter = ''
    stateText = ''

    try:
      state = str(cgiValues["state"])
    except:
      state = ''
    else:
      if not justin.stringIsEnvName(state):
        return errorPage(environ, user, "Invalid characters in state")
      
      if state == 'finding' or state == 'unallocated' or state == 'allocated' \
          or state == 'outputting' or state == 'processed' \
          or state == 'notfound' or state == 'failed':
        stateFilter = 'AND files.state="' + state + '"'
        stateText = ' (state = ' + state + ')'

    query = ("SELECT files.file_did,files.state,"
             "CAST(event_time AS CHAR) AS last_allocation_time,"
             "storages.rse_name,jobs.jobsub_id,"
             "sites.site_name,allocations,max_allocations,"
             "jobs.jobscript_exit AS last_jobscript_exit "
             "FROM files "
             "LEFT JOIN events"
             " ON files.justin_job_id=events.justin_job_id AND"
             " events.event_type_id=%d AND files.file_id=events.file_id "
             "LEFT JOIN storages ON events.rse_id=storages.rse_id "
             "LEFT JOIN jobs ON jobs.justin_job_id=files.justin_job_id "
             "LEFT JOIN sites ON jobs.site_id=sites.site_id "
             "WHERE files.workflow_id=%d AND files.stage_id=%d %s "
             "ORDER BY files.file_id LIMIT %d" % 
             (justin.event_FILE_ALLOCATED, workflowID, stageID, stateFilter,
              csvJsonMaxRows))
 
    fieldsList = ['file_did','allocations','state','last_allocation_time',
                  'rse_name','site_name','jobsub_id','last_jobscript_exit']

  elif method == 'download-input-file-stats':
    # CSV or JSON file with stats of input files for a workflow/stage

    if workflowID is None or stageID is None:
      return errorPage(environ, user, "workflow_id and stage_id must be given")

    query = ('SELECT file_did,jobsub_id,site_name,rse_name,size_bytes,'
             'jobscript_real_seconds AS seconds,distance,'
             'CAST(processed_time AS CHAR) AS job_finish_time '
             'FROM files '
             'LEFT JOIN jobs ON files.justin_job_id=jobs.justin_job_id '
             'LEFT JOIN events ON events.file_id=files.file_id '
             'AND events.justin_job_id=files.justin_job_id '
             'AND events.event_type_id=%d '
             'LEFT JOIN sites_storages '
             'ON events.site_id=sites_storages.site_id '
             'AND events.rse_id=sites_storages.rse_id '
             'LEFT JOIN storages ON events.rse_id=storages.rse_id '
             'LEFT JOIN sites ON events.site_id=sites.site_id '
             'WHERE files.state="processed" '
             'AND files.workflow_id=%d '
             'AND files.stage_id=%d '
             'ORDER BY files.file_id LIMIT %d' %
             (justin.event_FILE_ALLOCATED, workflowID, stageID, 
              csvJsonMaxRows))

    fieldsList = ['file_did','jobsub_id','site_name','rse_name','size_bytes',
                  'seconds','distance','job_finish_time']

  elif method == 'download-output-file-stats':
    # CSV or JSON file with stats of output files for a workflow/stage

    if workflowID is None or stageID is None:
      return errorPage(environ, user, "workflow_id and stage_id must be given")

    query = ('SELECT file_did,jobsub_id,site_name,rse_name,size_bytes,'
             'seconds,distance,CAST(event_time AS CHAR) AS job_finish_time '
             'FROM events '
             'LEFT JOIN files ON files.file_id=events.file_id '
             'LEFT JOIN jobs ON jobs.justin_job_id=events.justin_job_id '
             'LEFT JOIN sites_storages '
             'ON events.site_id=sites_storages.site_id '
             'AND events.rse_id=sites_storages.rse_id '
             'LEFT JOIN storages ON events.rse_id=storages.rse_id '
             'LEFT JOIN sites ON events.site_id=sites.site_id '
             'WHERE event_type_id=%d '
             'AND events.workflow_id=%d '
             'AND events.stage_id=%d '
             'ORDER BY files.file_id LIMIT %d' %
             (justin.event_FILE_CREATED, workflowID, stageID, csvJsonMaxRows))

    fieldsList = ['file_did','jobsub_id','site_name','rse_name','size_bytes',
                  'seconds','distance','job_finish_time']

  elif method == 'download-events':
    # CSV or JSON file with stats of events

    whereList = []
     
    if workflowID is not None:
      whereList.append('events.workflow_id=%d' % workflowID)

    if stageID is not None:
      whereList.append('events.stage_id=%d' % stageID)

    if jobsubID is not None:
      whereList.append('jobsub_id="%s"' % jobsubID)

    if jobscriptExit is not None:
      whereList.append('events.jobscript_exit=%d' % jobscriptExit)

    if fileDID is not None:
      whereList.append('file_did="%s"' % fileDID)

    if rseName is not None:
      whereList.append('rse_name="%s"' % rseName)

    if siteName is not None:
      whereList.append('site_name="%s"' % siteName)

    if entryName is not None:
      whereList.append('entry_name="%s"' % entryName)

    if eventTypeName is not None:
      whereList.append('event_type_name="%s"' % eventTypeName)

    if whereList:
      whereString = ' WHERE ' + ' AND '.join(whereList)
    else:
      whereString = ''

    query = ('SELECT event_id,event_type_name,'
             'events.workflow_id,events.stage_id,'
             'file_did,jobsub_id,site_name,entry_name,rse_name,'
             'CAST(event_time AS CHAR) AS event_time,'
             'events.jobscript_exit '
             'FROM events '
           'LEFT JOIN event_types '
           'ON events.event_type_id=event_types.event_type_id '
           'LEFT JOIN files ON events.file_id=files.file_id '
           'LEFT JOIN jobs ON events.justin_job_id=jobs.justin_job_id '
           'LEFT JOIN sites ON events.site_id=sites.site_id '
           'LEFT JOIN entries ON events.entry_id=entries.entry_id '
           'LEFT JOIN storages ON events.rse_id=storages.rse_id '
           '%s '
           'ORDER BY event_id LIMIT %d' % 
           (whereString, csvJsonMaxRows))

    fieldsList = ['event_id', 'event_time', 'event_type_name',
                  'workflow_id', 'stage_id', 'jobsub_id',
                  'site_name', 'entry_name', 'file_did', 'rse_name', 
                  'jobscript_exit']
 
  else:  
    return errorPage(environ, user, "Download method not recognised!")

  # Common to all download methods: execute the query and format the results
  rows = justin.select(query)

  if format == 'csv':
    # For CSV, we use fieldsList to define the order of each line
    output = ','.join(fieldsList) + '\n'

    for row in rows:
      outputFields = []

      for field in fieldsList:
        if row[field] is None:
           outputFields.append('')
        elif type(row[field]) is str:
          outputFields.append('"' + row[field] + '"')
        else:
          outputFields.append(str(row[field]))

      output += ','.join(outputFields) + '\n'

  elif format == 'json':
    # For JSON, we just dump each line's dictionary
    output = json.dumps(rows, indent = 0)

  return output

def awtResults(environ, user, cgiValues):

  try:
    showDays = int(cgiValues['show_days'])
  except:
    showDays = 9999
           
  output = header(environ, user, "justIN: Automated Workflow Tests")

  output += ("<h1>Automated Workflow Tests</h1>")

  output += ('<p>Hover over each coloured box to see the most recent storage test '
      'values for xrdcp read and rucio upload, run in jobs at each site, '
      'contacting each RSE. '
      'Exit code 0 = success. Other codes are failure modes. '
      'Green if read and write ok; orange if only read ok; red if '
      'read fails; grey if no result for %d hours. '
      'For the GPU column, green indicates a successful AWT GPU job '
      'in the last 48 hours and grey is no AWT GPU job ran within that time. '
      'There is a <a href="/docs/awt.md">full explanation of AWT</a> in the '
      'justIN documentation.</p>' % awtGreyHours)

  query = ('SELECT site_name,enabled,'
           'UNIX_TIMESTAMP(last_awt_time) AS lwt,'
           'UNIX_TIMESTAMP(last_awt_gpu_time) AS lwtgpu,'
           'UNIX_TIMESTAMP(last_osg_seen_time) AS lot,'
           'jobs.jobsub_id '
           'FROM sites '
           'LEFT JOIN jobs ON jobs.justin_job_id=sites.last_awt_job_id '
           'WHERE last_osg_seen_time > DATE_SUB(NOW(),INTERVAL %d DAY) '
           'AND last_awt_time > DATE_SUB(NOW(),INTERVAL %d DAY) '
           'ORDER by site_name' 
           % (justin.unseenSitesExpireDays, showDays))

  sitesRows = justin.select(query)
  siteNames        = []
  enabledSiteNames = []
  lastJobTimes     = {}
  lastGPUTimes     = {}
  lastOSGTimes     = {}
  lastJobIDs       = {}
  for siteRow in sitesRows:
    siteNames.append(siteRow['site_name'])
    lastJobTimes[siteRow['site_name']] = int(siteRow['lwt'])
    lastGPUTimes[siteRow['site_name']] = int(siteRow['lwtgpu'])
    lastOSGTimes[siteRow['site_name']] = int(siteRow['lot'])

    if siteRow['jobsub_id']:
      lastJobIDs[siteRow['site_name']] = siteRow['jobsub_id']

    if siteRow['enabled']:
      enabledSiteNames.append(siteRow['site_name'])

  storagesRows = justin.select('SELECT rse_name,'
                               '(rucio_write AND justin_write) AS has_write '
                               'FROM storages '
                               'WHERE rse_name <> "MONTECARLO" '
                               'AND NOT decommissioned '
                               'ORDER by rse_name')
  rseNames       = []
  outputRseNames = []
  for storageRow in storagesRows:
    rseNames.append(storageRow['rse_name'])
    if storageRow['has_write']:
      outputRseNames.append(storageRow['rse_name'])

  sitesStoragesMatrix = {}

  for siteName in siteNames:
    sitesStoragesMatrix[siteName] = {}
    for rseName in rseNames:
      sitesStoragesMatrix[siteName][rseName] = []
 
  resultsRows = justin.select(
           'SELECT site_name,rse_name,read_result,write_result,jobsub_id,'
           'UNIX_TIMESTAMP(jobs.finished_time) AS finished_time '
           'FROM sites_storages '
           'LEFT JOIN sites ON sites_storages.site_id=sites.site_id '
           'LEFT JOIN storages ON sites_storages.rse_id=storages.rse_id '
           'LEFT JOIN jobs ON sites_storages.justin_job_id=jobs.justin_job_id '
           'WHERE rse_name <> "MONTECARLO"')

  # Put the results in nested dictionaries
  for results in resultsRows:
    try:
      sitesStoragesMatrix[results['site_name']][results['rse_name']] = \
        [results['read_result'], 
         results['write_result'], 
         results['jobsub_id'],
         results['finished_time']]
    except:
      pass

  output += ('<table class="center">')

  # List of storages
  output += ('<tr><td> </td>'
        '<td><div style="writing-mode: vertical-lr">'
        'Last&nbsp;AWT&nbsp;job</div></td>'
        '<td><div style="writing-mode: vertical-lr">'
        'Last&nbsp;OSG&nbsp;time</div></td>'
        '<td><div style="writing-mode: vertical-lr">'
        'GPU&nbsp;AWT</div></td>')
  
  for rseName in rseNames:  
    if rseName in outputRseNames:
      cellType = 'th'
    else:
      cellType = 'td'
    output += ('<%s><div '
          'style="writing-mode: vertical-lr">'
          '<a href="/dashboard/?method=show-storage&rse_name=%s">%s</a>'
          '</div></%s>\n' % (cellType, rseName, 
                             rseName.replace('-','&#8209;'), cellType))

  output += ('<td> &nbsp; </td></tr>\n')

  # Go through the sites, Row by row 

  for siteName in siteNames:
    if siteName in enabledSiteNames:
      cellType = 'th'
    else:
      cellType = 'td'
    
    output += ('<tr><%s><a href="/dashboard/?method=show-site&site_name=%s">%s'
          '</a></%s>\n' % 
          (cellType, siteName, siteName, cellType))

    output += '\n<!-- %d %d -->\n' % (timeNow, lastJobTimes[siteName])
    if lastJobTimes[siteName] == 0:
      output += ('<td> </td>')
    elif siteName in lastJobIDs:
      output += ('<td style="text-align: right">'
                 '<a href="/dashboard/?method=show-job&jobsub_id=%s">%s</a></td>\n'
                 % (lastJobIDs[siteName],
                    daysHoursMinutes(timeNow - lastJobTimes[siteName])
                   ))
    else:
      output += ('<td style="text-align: right">%s</td>' % 
            daysHoursMinutes(timeNow - lastJobTimes[siteName]))
  
    output += '\n<!-- %d %d -->\n' % (timeNow, lastOSGTimes[siteName])
    if lastOSGTimes[siteName] == 0:
      output += ('<td> </td>')
    else:
      output += ('<td style="text-align: right">%s</td>' % 
            daysHoursMinutes(timeNow - lastOSGTimes[siteName]))

    lastGPUTimes[siteName] 

    if lastGPUTimes[siteName] < timeNow - justin.unseenSitesExpireDays * 86400:
      boxColor = 'white'
    elif lastGPUTimes[siteName] < timeNow - 3600 * awtGreyHours:
      boxColor = '#808080' # gray
    else:
      boxColor = '#80FF80' # green
          
    output += ('<td style="background-color: %s; width: 1em;">'
               '&nbsp;</td>\n' % boxColor) 
  
    for rseName in rseNames:
      (readResult, writeResult, jobsubID, finishedTime) = \
                      sitesStoragesMatrix[siteName][rseName]

      if readResult == 255 and writeResult == 255:
        output += ('<td>&nbsp; &nbsp;</td>\n')
        
      else:
        if readResult == 255:
          s = 'Read=?'
        else:
          s = 'Read=%d' % readResult

        if writeResult == 255:
          s += ' Write=?'
        else:
          s += ' Write=%d' % writeResult

        if finishedTime is None or \
             (finishedTime < timeNow - 3600 * awtGreyHours):
          boxColor = '#BBBBBB'
        elif readResult == 255:
          boxColor = 'white'
        elif readResult == 0 and writeResult == 0:
          boxColor = '#80FF80'
        elif readResult:
          boxColor = '#FF8080' # red
        elif readResult == 0 and \
             (writeResult and writeResult != 255):
          boxColor = '#FFAA00' # orange
        else:
          boxColor = 'black'
          
        output += ('<td class="tooltip" style="background-color: %s; width: 1em;">'
                   '<a href="/dashboard/?method=list-events&rse_name=%s'
                   '&site_name=%s&awt_events=True"'
                   'class="tooltiptext">%s</a></td>\n'
                   % (boxColor, rseName, siteName, s))

    output += ('<%s><a href="/dashboard/?method=show-site&site_name=%s">%s'
          '</a></%s></tr>\n' % 
          (cellType, siteName, siteName, cellType))

  # List of storages
  output += ('<tr><td> </td>\n'
        '<td><div style="writing-mode: vertical-lr">'
        'Last&nbsp;AWT&nbsp;job</div></td>'
        '<td><div style="writing-mode: vertical-lr">'
        'Last&nbsp;OSG&nbsp;time</div></td>'
        '<td><div style="writing-mode: vertical-lr">'
        'GPU&nbsp;AWT</div></td>')
  
  for rseName in rseNames:
    if rseName in outputRseNames:
      cellType = 'th'
    else:
      cellType = 'td'
    output += ('<%s><div '
          'style="writing-mode: vertical-lr">'
          '<a href="/dashboard/?method=show-storage&rse_name=%s">%s</a>'
          '</div></%s>\n' % (cellType, rseName, 
                             rseName.replace('-','&#8209;'), cellType))

  output += '<td> </td></tr>'
  output += "</table>"
  output += footer()
  return output

def docsPage(startResponse, environ, user):

  try:
    htmlFileName = environ['REQUEST_URI'].split('/')[2]
 
    if not justin.stringNoQuotes(htmlFileName):
      raise
  except:
    output = errorPage(environ, '', "Page name problem")
    startResponseOK(startResponse, output)
    return output

  # If explicitly index.html/.md then redirect to "/docs/"
  if htmlFileName == 'index.html' or htmlFileName == 'index.md':
    startResponse('302 Moved', 
                  [('Location',       './'),
                   ('Content-length', '0')
                  ])
    return ''

  # But if really given as "/", then put the index so we can find the file!
  if htmlFileName == '':
    htmlFileName = 'index.md'

  splitFileName = htmlFileName.split('.')[:-1]

  if htmlFileName.endswith('.html'):
    startResponse('302 Moved', 
                  [('Location', '%s.md' % '.'.join(splitFileName)),
                   ('Content-length', '0')
                  ])
    return ''
    
  try:
    fileText = open('/var/www/html/docs/' + 
                '.'.join(splitFileName) + '.md', 'r', encoding="utf-8").read()
  except Exception as e:
    print('Error opening %s: %s' % (htmlFileName, str(e)))
    output = errorPage(environ, '', "Page not found")
    startResponseOK(startResponse, output)
    return output

  output = header(
                  environ, user, 
                  "justIN: Docs - %s" % splitFileName[-1].replace('_', ' '))

  output += '<div class="center" style="max-width: 800px">\n'

  output += '<p><a href="./">DOCS</a>'

  for i in range(0, len(splitFileName) - 1):
    output += ' : <a href="%s.md">%s</a>' \
              % ('.'.join(splitFileName[:-1]), 
                 splitFileName[i].upper().replace('_', ' '))

  output += ' : %s</p>' % splitFileName[-1].upper().replace('_', ' ')

  # Remove HTML style comments
  matches = re.findall('<!--.*?-->', fileText, re.DOTALL)
  processedText = fileText
  for match in matches:
    processedText = re.sub(match, '', processedText)

  output += markdown.markdown(processedText, extensions=['tables','toc'])

  output += '</div>\n'
  output += footer()

  startResponseOK(startResponse, output)
  return output

def setSiteStateHandler(cgiValues, user):

  if user['user_name'] not in justin.justinAdmins:
    return ('403 Forbidden', 'You are not a justIN admin')

  try:
    siteID   = int(cgiValues['action_key'])
    newState = True if (cgiValues['action_value'] == 'True') else False
  except:
    return ('400 Bad Request', 'Cannot parse values sent')

  try:
    justin.insertUpdate('UPDATE sites SET enabled=%s WHERE site_id=%d' 
                        % (newState, siteID))
    justin.conn.commit()
  except:
    return ('500 Internal Server Error', 'Failed to update database')
    
  else:
    return ('302 Moved', '')

def setStorageStateHandler(cgiValues, user, readWrite):

  if user['user_name'] not in justin.justinAdmins:
    return ('403 Forbidden', 'You are not a justIN admin')

  try:
    rseID = int(cgiValues['action_key'])
    newState  = True if (cgiValues['action_value'] == 'True') else False
  except:
    return ('400 Bad Request', 'Cannot parse values sent')

  try:
    justin.insertUpdate('UPDATE storages SET justin_%s=%s WHERE rse_id=%d' 
                        % ('read' if (readWrite == 'read') else 'write',
                           newState, 
                           rseID))
    justin.conn.commit()
  except:
    return ('500 Internal Server Error', 'Failed to update database')
    
  else:
    return ('302 Moved', '')


def setWorkflowStateHandler(cgiValues, user, stateChange):
  # stateChange is submit, restart, pause, or finish

  try:
    workflowID = int(cgiValues['action_key'])

    workflowRow = justin.select('SELECT workflows.state,workflows.archived,'
                    'workflows.user_id,wlcg_groups.wlcg_group_name '
                    'FROM workflows '
                    'LEFT JOIN scopes '
                    'ON scopes.scope_id=workflows.scope_id '
                    'LEFT JOIN named_quotas '
                    'ON scopes.quota_id=named_quotas.quota_id '
                    'LEFT JOIN wlcg_groups '
                    'ON wlcg_groups.wlcg_group_id=named_quotas.wlcg_group_id '
                    'WHERE workflow_id=%d' % workflowID, 
                    justOne = True)
  except:
    return ('400 Bad Request', 'Invalid values sent')

  # Check if this user can do this - should not arise as users are not offered
  # actions they are not allowed to do but an important security check
  allowed = False

  if user['user_name'] in justin.justinAdmins:
    # Admins have super powers
    allowed = True
  elif workflowRow['wlcg_group_name'] in user['wlcg_groups']:
    # Anyone in the workflow's scope's groups can change workflow states
    allowed = True
  elif stateChange in ['pause', 'finish'] \
       and user['user_id'] == workflowRow['user_id']:
    # Even if scope's groups or group membership has changed you can
    # always stop workflows submitted under your name
    allowed = True

  if not allowed:
    return ('403 Forbidden', 'You do not have permission to do that!')

  if stateChange == 'submit':
    if workflowRow['state'] == 'draft':
      newState = 'submitted'
    else:
      return ('403 Forbidden', 'Only workflows in Draft can be submitted')

  elif stateChange == 'restart':
    if workflowRow['state'] == 'paused':
      newState = 'running'
    else:
      return ('403 Forbidden', 'Only workflows in Pause can be restarted')

  elif stateChange == 'pause':
    if workflowRow['state'] == 'running':
      newState = 'paused'
    else:
      return ('403 Forbidden', 'Only workflows in Running can be paused')

  elif stateChange == 'finish':
    if workflowRow['state'] in ['running','submitted','draft']:
      newState = 'finished'
    else:
      return ('403 Forbidden', 
              'Only workflows in Running, Submitted, or Draft can be finished')
  else:
    return ('400 Bad Request', 'State change not recognised')

  
  try:
    justin.insertUpdate('UPDATE workflows SET state="%s",'
                        'state_message="Set to %s by %s" '
                        'WHERE workflow_id=%d' 
                        % (newState, newState, user['user_name'], workflowID))
    justin.conn.commit()
  except:
    return ('500 Internal Server Error', 'Failed to update database')
    
  else:
    # Success - issue a 302 Moved response and the caller will set Location:
    return ('302 Moved', '')

# Get POST data and then a big switch to direct it to the right handler
def postHandlers(startResponse, environ, user):

  httpStatus = None
  message    = ''
  nextURI    = '/'
  cgiValues  = {}

  if user is None:
    httpStatus = '403 Forbidden'
    message    = 'You need to login'

  else:
    try:
      inputLength = int(environ.get('CONTENT_LENGTH', '0'))
      inputString = environ['wsgi.input'].read(inputLength)
      rawValues = urllib.parse.parse_qs(inputString)
      for i in rawValues:
        cgiValues[i.decode()] = rawValues[i][0].decode()

      if 'next_uri' in cgiValues:
        nextURI = cgiValues['next_uri']

    except Exception as e:
      httpStatus = '400 Bad Request'
      message    = 'Failed to read and parse post data: ' + str(e)

    else:
      if 'justin_code' not in cgiValues or \
         cgiValues['justin_code'] != user['justin_code']:
        httpStatus = '403 Forbidden'
        message    = 'Inconsistent session/code'

      elif 'action_name' not in cgiValues:
        httpStatus = '400 Bad Request'
        message    = 'Malformed request'

      elif cgiValues['action_name'] == 'set_site_state':
        (httpStatus, message) = setSiteStateHandler(cgiValues, user)

      elif cgiValues['action_name'] == 'set_storage_read_state':
        (httpStatus, message) = setStorageStateHandler(cgiValues, user, 'read')

      elif cgiValues['action_name'] == 'set_storage_write_state':
        (httpStatus, message) = setStorageStateHandler(cgiValues, user, 'write')

      elif cgiValues['action_name'] == 'workflow_submit':
        (httpStatus, message) = setWorkflowStateHandler(cgiValues, 
                                                        user, 'submit')

      elif cgiValues['action_name'] == 'workflow_restart':
        (httpStatus, message) = setWorkflowStateHandler(cgiValues, 
                                                        user, 'restart')

      elif cgiValues['action_name'] == 'workflow_pause':
        (httpStatus, message) = setWorkflowStateHandler(cgiValues, 
                                                        user, 'pause')

      elif cgiValues['action_name'] == 'workflow_finish':
        (httpStatus, message) = setWorkflowStateHandler(cgiValues, user, 
                                                        'finish')

  if httpStatus is None:
    httpStatus = '400 Bad Request'
    message    = 'Action not recognised'


  # This is success
  if httpStatus.startswith('302 '):
    startResponse(httpStatus, [('Location',       nextURI),
                               ('Content-length', '0')
                              ])
    return ''

  # Everything else is some form of error
  output = errorPage(environ, user, message)
  startResponse(httpStatus, [('Content-type',   'text/html'),
                             ('Content-length', str(len(output)))
                            ])
  return output

#
# Entry point from mod_wsgi
#
def application(environ, startResponse):

  global timeNow
  timeNow = time.time()

  justin.wsgiCallsCount += 1
  print('Call count (pid=%d): %d' % (os.getpid(), justin.wsgiCallsCount), 
        file=sys.stderr)

  # Reload config
  justin.readConf()

  try:
    # True should provoke a reconnection attempt.
    # See https://github.com/farcepest/MySQLdb1/blob/master/_mysql.c#L1978
    # (Not sure if there is a more authoritative source for this API.)
    justin.conn.ping(reconnect = True)
  except Exception as e:
    message = 'DB connection lost and cannot reconnect: ' + str(e)

    print('justin-wsgi-dashboard fails with 500 Internal Server Error (%s)' % 
          str(message), file=sys.stderr)

    startResponse('500 Internal Server Error',
                  [('Content-type',   'text/plain'),
                   ('Content-length', str(len(message)))
                  ])

    return [message.encode('UTF-8')]

  # Avoid leftovers from partial, failed transactions in this instance
  # and make sure autocommit is not set
  justin.conn.rollback()  
  justin.conn.autocommit(False)
  
  if environ['REQUEST_URI'].startswith('/login/cilogon/login?'):
    output = cilogonCallback(startResponse, environ)
    return [output.encode('UTF-8')]

  if environ['REQUEST_URI'].startswith('/authorize/'):
    output = loginPage(startResponse, environ, authorize=True)
    return [output.encode('UTF-8')]

  if environ['REQUEST_URI'].endswith('&login'):
    # loginPage does startResponse() itself so it can create session cookies
    output = loginPage(startResponse, environ)
    return [output.encode('UTF-8')]

  user = getUser(environ)

  if environ['REQUEST_URI'] == '/dashboard/' and \
     environ['REQUEST_METHOD'] == 'POST':
    output = postHandlers(startResponse, environ, user)
    return [output.encode('UTF-8')]

  if environ['REQUEST_URI'].startswith('/wrapperlogs/'):
    output = outputWrapperLog(startResponse, environ, user)
    return [output.encode('UTF-8')]

  if environ['REQUEST_URI'].startswith('/docs'):
    output = docsPage(startResponse, environ, user)
    return [output.encode('UTF-8')]

  cgiValues  = { }
  
  try:
    rawValues = urllib.parse.parse_qs(environ['QUERY_STRING'])
    for i in rawValues:
      cgiValues[str(i)] = str(rawValues[i][0])
  except:
    pass # Use defaults: produces a method error page at the end


  try:
    method = cgiValues['method']
  except:
    method = None

  try:
    pageNumber = int(cgiValues['page_number'])
  except:
    pageNumber = 0

  try:
    pageLength = int(cgiValues['page_length'])
  except:
    pageLength = 30

  if method is None:
    output = mainPage(environ, user)
  
  elif method == "authorized":
    output = authorizedPage(environ, user)

  elif method == "list-workflows":
    output = listWorkflows(environ, user, cgiValues, pageNumber, pageLength)

  elif method == "list-archived-workflows":
    output = listArchivedWorkflows(environ, user, cgiValues, 
                                   pageNumber, pageLength)
  elif method == "show-workflow":
    output = showWorkflow(environ, user, cgiValues)

  elif method == "show-archived-workflow":
    output = showArchivedWorkflow(environ, user, cgiValues)

  elif method == "show-stage":
    output = showStage(environ, user, cgiValues)

  elif method == "list-files":
    output = listFiles(environ, user, cgiValues, pageNumber, pageLength)

  elif method == "show-file":
    output = showFile(environ, user, cgiValues)

  elif method == "show-job":
    output = showJob(environ, user, cgiValues)

  elif method == "list-jobs":
    output = listJobs(environ, user, cgiValues, pageNumber, pageLength)

  elif method == "list-scopes":
    output = listScopes(environ, user, cgiValues)

  elif method == "list-quotas":
    output = listQuotas(environ, user, cgiValues)

  elif method == "list-sites":
    output = listSites(environ, user, cgiValues)

  elif method == "list-entries":
    output = listEntries(environ, user, cgiValues)

  elif method == "list-storages":
    output = listStorages(environ, user, cgiValues)

  elif method == "show-user":
    output = showUser(environ, user, cgiValues)

  elif method == "show-site":
    output = showSite(environ, user, cgiValues)

  elif method == "show-entry":
    output = showEntry(environ, user, cgiValues)

  elif method == "show-storage":
    output = showStorage(environ, user, cgiValues)

  elif method == "list-events":
    output = listEvents(environ, user, cgiValues, pageNumber, pageLength)

  elif method.startswith("download-"):
    output = downloadCsvJson(environ, user, cgiValues, method)

  elif method == "awt-results":
    output = awtResults(environ, user, cgiValues)
  
  else:
    output = 'Method not recognised: %s' % str(method)
    startResponse('400 Bad Request',
                [('Content-type',   'text/plain'),
                 ('Content-length', str(len(output)))
                ])
  
    return [output.encode('UTF-8')]

  # Valid method was found, so return the string it output

  if output.startswith('/') or output.startswith('http'):
    # The method wants a redirect
    startResponseRedirect(startResponse, output)
  elif 'format' in cgiValues and cgiValues['format'] in ['csv','json']:
    # Easiest to view in browser and then save with their preferred filename?
    startResponseOK(startResponse, output, contentType = 'text/plain')
  else:
    startResponseOK(startResponse, output)
  return [output.encode('UTF-8')]
