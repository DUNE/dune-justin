#
# justin-wsgi-dashboard - justIN workflow system dashboard
#
# Copyright 2013-23, Andrew McNab for the University of Manchester
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# This WSGI script relies on justin-api-import-script being run by
# the mod_wsgi directive WSGIImportScript

import os
import sys
import time
import html
import urllib
import urllib.parse

# install with  pip3 install pygal
import pygal

import justin

class justinStackedLine(pygal.StackedLine):

  def __init__(self, imageSize, firstTime, hoursPerBin, numBins,
               legend_at_bottom_columns=3):
    self.imageSize = imageSize
    pygal.StackedLine.__init__(self, include_x_axis=True, 
                               stroke_style={'width': 2}, 
                               legend_at_bottom=True, 
                               show_x_guides=True, 
                               style=pygal.style.LightColorizedStyle, 
                               x_label_rotation=30, 
                               width=800, 
                               height=500, 
                               x_title='Bin start times',
                               y_title='Number per bin',
                               legend_at_bottom_columns=legend_at_bottom_columns)
    self.x_labels = [ time.strftime('%b-%d %H:%M', 
                                    time.gmtime(
                             i * hoursPerBin * 3600 + firstTime
                                               ))
                        for i in range(0, numBins) ]

  def _points(self, x_pos):
        # Unfilled series to be overlayed rather than stacked
        """
        Convert given data values into drawable points (x, y)
        and interpolated points if interpolate option is specified
        """
        for series_group in (self.series, self.secondary_series):
            accumulation = [0] * self._len
            for serie in series_group[::-1 if self.stack_from_top else 1]:
              if serie.fill == False: # <--- this is the significant change
                serie.points = [ (x_pos[i], v) for i, v in enumerate(serie.values) ]
                if serie.points and self.interpolate:
                    serie.interpolated = self._interpolate(x_pos, serie.values)
                else:
                    serie.interpolated = []                
              else:
                accumulation = list(map(sum, zip(accumulation, serie.values)))
                serie.points = [
                    (x_pos[i], v)
                    for i, v in enumerate(accumulation)]
                if serie.points and self.interpolate:
                    serie.interpolated = self._interpolate(x_pos, accumulation)
                else:
                    serie.interpolated = []

def header(uriPrefix, title):

  return ("""<html><head><title>%s</title>
<style>
html,body { 
  font-family: Tahoma, Verdana, Arial, sans-serif; 
  font-size: 16px;
  color: #616161;
  background-color: #ffffff;
  margin: 0;
  padding: 0;
}
a {
  color: #337AB7;
  text-decoration: none;
}

#top_strip,#bottomstrip { 
  color: #FFFFFF;
  font-weight: bold;
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 5px;
  background-color: #234D93;
}
            
#top_strip a { color: #FFFFFF; text-decoration: none; }
 
#main_box {
  padding: 10px;
  display: flex;
  align-items: center;
  flex-direction: column;
  overflow-x: auto;
  background-color: #FFFFFF;
}

.tooltip {
  position: relative;
  display: inline-block;
  border-bottom: 1px dotted black;
}

.tooltip .tooltiptext {
  visibility: hidden;
  width: 120px;
  background-color: white;
  color: #000000;
  text-align: center;
  padding: 5px 0;
  border-radius: 6px;
  position: absolute;
  z-index: 1;
}

.tooltip:hover .tooltiptext {
  visibility: visible;
}

table { border-collapse: collapse; border: medium solid #87ADD1; }
tr { text-align: left }
td,th { border: thin solid #87ADD1; padding: 0.75ex }

.main_page_table table { border: 20px solid white; 
                         border-collapse: separate;
                         padding: 10px; 
                       }
.main_page_table td    { background-color: #234D93; 
                         color: #FFFFFF; 
                         border: 20px solid white;
                         text-align: center;
                         font-size: 32px;
                         font-weight: bold;
                         width: 300px; 
                         height: 100px; 
                       }
.main_page_table a     { color: #E1703D; 
                         text-decoration: none;  
                       }

</style>
<script type="text/javascript" 
 src="https://kozea.github.io/pygal.js/2.0.x/pygal-tooltips.min.js"></script>
</head>
<body>
<div id="top_strip">
<a href="%s" style="font-size: 48px; color: #E1703D;">justIN</a> &nbsp; &nbsp;
<a href="%s"><img src="/jclock50x50.png"></a> &nbsp; &nbsp; &nbsp;
<a href="%s">%s</a> &nbsp; &nbsp; &nbsp;
<a href="%s?method=list-requests">Requests</a> &nbsp; &nbsp; &nbsp;
<a href="%s?method=list-jobs">Jobs</a> &nbsp; &nbsp; &nbsp;
<a href="%s?method=awt-results">AWT</a> &nbsp; &nbsp; &nbsp;
<a href="%s?method=list-sites">Sites</a> &nbsp; &nbsp; &nbsp;
<a href="%s?method=list-storages">Storages</a> &nbsp; &nbsp; &nbsp;
<a href="https://dune.github.io/dune-justin/">Docs</a>
</div>
<div id="main_box"><div>
""" % (title, 
       uriPrefix,
       uriPrefix,
       uriPrefix,
       'Dashboard' if uriPrefix.startswith('/dashboard/') else uriPrefix,
       uriPrefix, uriPrefix, uriPrefix,
       uriPrefix, uriPrefix))

def footer():
  return ('</div></div>'
          '<div id="bottomstrip">justIN time now: %s</div>\n</body></html>' 
          % time.strftime('%Y-%m-%d %H:%M:%S %Z'))

def errorPage(uriPrefix, message):
  output = header(uriPrefix, "Error")
  output += "<h1>Error</h1>\n<p>%s</p>" % html.escape(message, quote=True)
  output += footer()
  return output

def spaceForUnixEpoch(s):
  if str(s) == justin.db.unixEpoch:
    return '&nbsp;'
  else:
    return str(s)

def daysHoursMinutes(seconds):
  # Convert integer seconds to a short string with days, hours, or minutes
  if seconds >= 86400:
    return '%dd' % int(seconds / 86400)
  
  if seconds >= 3600:
    return '%dh' % int(seconds / 3600)
    
  return '%dm' % int(seconds / 60)

def makePager(uriPrefix, pageNumber, pageLength, rowsLen, urlTemplate):

  output = '<p>Page: '

  for pageno in range(pageNumber + 1):
    if pageno == pageNumber:
      output += ' %d ' % (pageno + 1)
    else:
      output += ((' <a href="' + urlTemplate + '">%d</a> ') % 
                 (uriPrefix, pageno, pageLength, pageno + 1))
            
  if rowsLen > pageLength:
    output += ((' <a href="' + urlTemplate + '">Next</a> ') % 
               (uriPrefix, pageNumber + 1, pageLength))
               
  return output
  
def mainPage(uriPrefix):

  output = header(uriPrefix, "justIN: Dashboard")

  output += '<h1>justIN Dashboard</h1><table class="main_page_table">'

  cells = [
   { 'startRow'  : True,
     'endRow'    : False,
     'uri'       : uriPrefix + '?method=list-requests',
     'text'      : 'Requests' },
   { 'startRow'  : False,
     'endRow'    : True,
     'uri'       : uriPrefix + '?method=list-jobs',
     'text'      : 'Jobs' },
   { 'startRow'  : True,
     'endRow'    : False,
     'uri'       : uriPrefix + '?method=list-events',
     'text'      : 'Events' },
   { 'startRow'  : False,
     'endRow'    : True,
     'uri'       : uriPrefix + '?method=awt-results',
     'text'      : 'Automated Workflow Tests' },
   { 'startRow'  : True,
     'endRow'    : False,
     'uri'       : uriPrefix + '?method=list-sites',
     'text'      : 'Sites' },
   { 'startRow'  : False,
     'endRow'    : True,
     'uri'       : uriPrefix + '?method=list-storages',
     'text'      : 'Storages' },
   { 'startRow'  : True,
     'endRow'    : False,
     'uri'       : uriPrefix + '?method=list-jobscripts',
     'text'      : 'Jobscripts' },
   { 'startRow'  : False,
     'endRow'    : True,
     'uri'       : 'https://dune.github.io/dune-justin/',
     'text'      : 'Documentation' }
  ]

  for cellDict in cells:
 
    if cellDict['startRow'] and cellDict['endRow']:
      output += '<tr><td colspan=2 '
    elif cellDict['startRow']:
      output += '<tr><td '
    else:
      output += '<td '

    output += ('onclick="location.href=\'%s\'"><a href="%s">%s</a></td>' 
               % (cellDict['uri'], cellDict['uri'], cellDict['text']) )
   
    if cellDict['endRow']:
      output += '</tr>'

  output += '</table>' + footer()
  return output

def listJobscripts(uriPrefix, cgiValues, pageNumber, pageLength):

  output = header(uriPrefix, "justIN: Jobscripts Library")

  output += "<h1>Jobscripts Library</h1>"
  
  query = ('SELECT scope_name,jobscripts_library.description,'
           'authors.username AS authorname,'
           'jobscripts_users.username AS jobscript_username,'
           'created_time,jobscript_name '
           'FROM jobscripts_library '
           'LEFT JOIN users AS authors '
           'ON jobscripts_library.author_id=authors.user_id '
           'LEFT JOIN users AS jobscripts_users '
           'ON jobscripts_library.user_id=jobscripts_users.user_id '
           'LEFT JOIN scopes ON jobscripts_library.scope_id=scopes.scope_id '
           'ORDER BY created_time DESC LIMIT %d,%d' %
           (pageNumber * pageLength, pageLength + 1))
 
  rows = justin.db.select(query)

  output += makePager(uriPrefix, pageNumber, pageLength, len(rows), 
                      "%s?method=list-jobscripts&page_number=%d&page_length=%d") 
             
  output += '<p><table>'
  output += ('<tr><th>Jobscript</th><th>Description</th><th>Author</th>'
             '<th>Created</th><tr>')

  for row in rows[:pageLength]:
    if row["scope_name"]:
      prefix = row["scope_name"]
    else:
      prefix = row["jobscript_username"]

    output += ('<tr><td><a href="%s?method=show-jobscript&jobscript_id=%s:%s">'
               '%s:%s</a></td><td>%s</td><td>%s</td><td>%s</td>'
               '</tr>'
               % (uriPrefix,
                  prefix, row["jobscript_name"], 
                  prefix, row["jobscript_name"], 
                  html.escape(row["description"], quote=True),
                  row["authorname"],
                  row['created_time']
                 )
              )

  output += "</table>"
  
  output += makePager(uriPrefix, pageNumber, pageLength, len(rows), 
                      "%s?method=list-jobscripts&page_number=%d&page_length=%d")
  output += footer()
  
  return output

def showJobscript(uriPrefix, cgiValues):

  try:
    jsid = str(cgiValues["jobscript_id"]).lower()
  except:
    return errorPage(uriPrefix, "jobscript_id must be given")

  response = justin.lookupJobscript(jsid)
  if response['error']:
    return errorPage(uriPrefix, response['error'])

  output = header(uriPrefix, "justIN: Jobscript %s" % jsid)
  output += '<!-- %s -->\n' % str(time.time())
  output += ("<h1>Jobscript %s</h1>\n" % jsid)

  output += ("<p><i>Created on %s by %s</i><br>%s</p>\n"
             % (response['created_time'], 
                response['authorname'],
                html.escape(response['description'], quote=True)))

  output += ("<h2>Jobscript</h2>")
  output += ('<pre style="white-space: pre-wrap;">') 

  output += (html.escape(
   response["jobscript"].encode('ascii',errors='ignore').decode(), 
   quote=True))
  
  output += ('</pre>') 

  output += footer()
  return output

def listRequests(uriPrefix, cgiValues, pageNumber, pageLength):

  output = header(uriPrefix, "justIN: Requests")

  output += "<h1>Requests</h1>"
  
  query = ('SELECT request_id,description,username,state,mql,created,submitted,'
           'started,finished '
           'FROM requests '
           'LEFT JOIN users ON requests.user_id=users.user_id '
           'ORDER BY request_id DESC LIMIT %d,%d' %
           (pageNumber * pageLength, pageLength + 1))

  justin.db.cur.execute(query)
  rows = justin.db.cur.fetchall()

  output += makePager(uriPrefix, pageNumber, pageLength, len(rows), 
                      "%s?method=list-requests&page_number=%d&page_length=%d") 
             
  output += '<p><table>'
  output += ('<tr><th>Request ID</th><th>Description</th><th>User</th><th>State</th>'
             '<th>MQL</th><th>Created</th><th>Submitted</th><th>Started</th>'
             '<th>Finished</th><tr>')

  for row in rows[:pageLength]:
    output += ('<tr><td><a href="%s?method=show-request&request_id=%s">'
          '%s</a></td><td>%s</td><td>%s</td><td>%s</td><td>%s</td>'
          '<td>%s</td><td>%s</td><td>%s</td><td>%s</td>'
          '</tr>' % 
          (uriPrefix,
           row["request_id"], row["request_id"],
           html.escape(row["description"], quote=True),
           row["username"],
           row["state"],
           html.escape(row["mql"], quote=True),
           spaceForUnixEpoch(row['created']),
           spaceForUnixEpoch(row['submitted']),
           spaceForUnixEpoch(row['started']),
           spaceForUnixEpoch(row['finished'])
          )
         )

  output += "</table>"
  
  output += makePager(uriPrefix, pageNumber, pageLength, len(rows), 
                      "%s?method=list-requests&page_number=%d&page_length=%d")
  output += footer()
  
  return output

def showRequest(uriPrefix, cgiValues):
  try:
    requestID = int(cgiValues['request_id'])
  except:
    return errorPage(uriPrefix, "request_id must be given")
  
  output = header(uriPrefix, "justIN: Request %d" % requestID)

  query = ("SELECT requests.description,requests.state,"
           "users.username,"
           "requests.created,requests.submitted,requests.started,"
           "requests.checking,requests.finished,mql,"
           "requests.refind_seconds,requests.refind_start_time,"
           "requests.refind_end_time "
           "FROM requests "
           "LEFT JOIN users ON users.user_id=requests.user_id "
           "WHERE request_id=%d "
           "ORDER BY request_id" % requestID)

  justin.db.cur.execute(query)
  requestRow = justin.db.cur.fetchone()
  
  state = requestRow['state']

  output += "<h1>Request %d</h1>" % requestID
  output += '<table>'
  output += ('<tr><td>Description</td><td>%s</td></tr>' 
             % html.escape(requestRow['description'], quote=True))

  output += ('<tr><td>State</td><td>%s</td></tr>' % state)
  output += ('<tr><td>MQL</td><td>%s</td></tr>' 
             % html.escape(requestRow['mql'], quote=True))

  if requestRow['refind_seconds'] == 0:
    output += '<tr><td>Finding</td><td>once</td></tr>'
  else:
    output += ('<tr><td>Finding</td><td>every %d hour(s), %s to %s</td></tr>'
               % (int(requestRow['refind_seconds'] / 3600), 
                  requestRow['refind_start_time'],
                  requestRow['refind_end_time'])
              )
      
  output += ('<tr><td>Created by</td><td>%s</td></tr>' 
             % requestRow['username'])

  output += ('<tr><td>Created</td><td>%s</td></tr>' 
             % spaceForUnixEpoch(requestRow['created']))

  output += ('<tr><td>Submitted</td><td>%s</td></tr>' 
             % spaceForUnixEpoch(requestRow['submitted']))

  output += ('<tr><td>Started</td><td>%s</td></tr>' 
             % spaceForUnixEpoch(requestRow['started']))

  output += ('<tr><td>Checking</td><td>%s</td></tr>' 
             % spaceForUnixEpoch(requestRow['checking']))

  output += ('<tr><td>Finished</td><td>%s</td></tr>' 
             % spaceForUnixEpoch(requestRow['finished']))
  
  output += "</table>"

  # Get the stages of this request
  query = ("SELECT * "
           "FROM stages "
           "WHERE request_id=%d "
           "ORDER BY stage_id" % requestID)

  justin.db.cur.execute(query)
  stageRows = justin.db.cur.fetchall()

  # Get counts of file states for all stages
  stateCounts = []
  for i in range(0, len(stageRows) + 1):
    stateCounts.append({ 'recorded'    : 0,
                         'finding'     : 0,
                         'unallocated' : 0,
                         'allocated'   : 0,
                         'outputting'  : 0,
                         'processed'   : 0,
                         'notfound'    : 0,
                         'failed'      : 0,
                         'output'      : 0  })
  
  query = ('SELECT state,stage_id,COUNT(*) AS count '
           'FROM files '
           'WHERE request_id=%d '
           'GROUP BY state,stage_id' % requestID)
             
  stateRows = justin.db.select(query)
  
  for stateRow in stateRows:
    stateCounts[stateRow['stage_id']][stateRow['state']] = stateRow['count']

  # Output a table with the stages

  output += '<h2>Stages</h2>'
  output += '<table>'
  output += ("<tr><th>Stage ID</th><th>Rank</th><th>Files</th><th>Finding</th>"
             "<th>Unallocated</th><th>Allocated</th><th>Outputting</th>"
             "<th>Processed</th><th>Not found</th><th>Failed</th><tr>")

  for stageRow in stageRows:    
    output += ('<tr><td><a href="%s?method=show-stage&request_id=%s&stage_id=%s">'
          '%d</a></td>'
          '<td>%d</td>'
          '<td><a href="%s?method=list-files&request_id=%s&stage_id=%s">%s</a></td>'
          '<td><a href="%s?method=list-files&request_id=%s&stage_id=%s&state=finding">%d</a></td>'
          '<td><a href="%s?method=list-files&request_id=%s&stage_id=%s&state=unallocated">%d</a></td>'
          '<td><a href="%s?method=list-files&request_id=%s&stage_id=%s&state=allocated">%d</a></td>'
          '<td><a href="%s?method=list-files&request_id=%s&stage_id=%s&state=outputting">%d</a></td>'
          '<td><a href="%s?method=list-files&request_id=%s&stage_id=%s&state=processed">%d</a></td>'
          '<td><a href="%s?method=list-files&request_id=%s&stage_id=%s&state=notfound">%d</a></td>'
          '<td><a href="%s?method=list-files&request_id=%s&stage_id=%s&state=failed">%d</a></td>'
          '</tr>' % 
          (uriPrefix,
           stageRow["request_id"], stageRow["stage_id"], stageRow["stage_id"],
           stageRow["stage_rank"],
           uriPrefix, stageRow["request_id"], stageRow["stage_id"], 
            stateCounts[stageRow['stage_id']]['finding'] +
            stateCounts[stageRow['stage_id']]['unallocated'] +
            stateCounts[stageRow['stage_id']]['allocated'] +
            stateCounts[stageRow['stage_id']]['outputting'] +
            stateCounts[stageRow['stage_id']]['processed'] +
            stateCounts[stageRow['stage_id']]['notfound'] +
            stateCounts[stageRow['stage_id']]['failed'],
           uriPrefix, stageRow["request_id"], stageRow["stage_id"],
            stateCounts[stageRow['stage_id']]['finding'],
           uriPrefix, stageRow["request_id"], stageRow["stage_id"],
            stateCounts[stageRow['stage_id']]['unallocated'],
           uriPrefix, stageRow["request_id"], stageRow["stage_id"],
            stateCounts[stageRow['stage_id']]['allocated'],
           uriPrefix, stageRow["request_id"], stageRow["stage_id"],
            stateCounts[stageRow['stage_id']]['outputting'],
           uriPrefix, stageRow["request_id"], stageRow["stage_id"],
            stateCounts[stageRow['stage_id']]['processed'],
           uriPrefix, stageRow["request_id"], stageRow["stage_id"],
            stateCounts[stageRow['stage_id']]['notfound'],
           uriPrefix, stageRow["request_id"], stageRow["stage_id"], 
            stateCounts[stageRow['stage_id']]['failed']))

  output += "</table>"
  output += footer()
  return output

def showStage(uriPrefix, cgiValues):
  try:
    requestID = int(cgiValues["request_id"])
  except:
    return errorPage(uriPrefix, "request_id must be given")
  
  try:
    stageID = int(cgiValues["stage_id"])
  except:
    return errorPage(uriPrefix, "stage_id must be given")
  
  output = header(uriPrefix, "justIN: Request %d, Stage %d" % (requestID, stageID))
  output += '<!-- %s -->\n' % str(time.time())

  query = ("SELECT "
           "stages.stage_rank,"
           "stages.processors,"
           "stages.wall_seconds,"
           "stages.rss_bytes,"
           "stages.max_distance,"
           "stages.max_files_per_job,"
           "stages_jobscripts.jobscript,"
           "jobscript_name,"
           "scope_name,"
           "username "
           "FROM stages "
           "LEFT JOIN stages_jobscripts "
           "ON stages_jobscripts.request_id=stages.request_id "
           "AND stages_jobscripts.stage_id=stages.stage_id "
           "LEFT JOIN jobscripts_library "
           "ON jobscripts_library.jobscript_id=stages.jobscript_id "
           "LEFT JOIN scopes ON scopes.scope_id=jobscripts_library.scope_id "
           "LEFT JOIN users ON users.user_id=jobscripts_library.user_id "
           "WHERE stages.request_id=%d AND stages.stage_id=%d" %
           (requestID, stageID))

  justin.db.cur.execute(query)
  stageRow = justin.db.cur.fetchone()
  
  output += ("<h1>Request %d, Stage %d</h1>" % (requestID, stageID))
  
  output += '<table>'

  output += ('<tr><td>Rank</td>'
        '<td>%d</td></tr>' % stageRow["stage_rank"])

  output += ('<tr><td>Processors</td>'
        '<td>%s</td></tr>' % stageRow["processors"])

  output += ('<tr><td>Wall seconds</td>'
        '<td>%s</td></tr>' % stageRow["wall_seconds"])

  output += ('<tr><td>RSS bytes</td>'
        '<td>%s (%d MB)</td></tr>' % 
        (stageRow["rss_bytes"], 
         int(stageRow["rss_bytes"]) / 1048576))

  output += ('<tr><td>Max distance for inputs</td>'
        '<td>%.1f</td></tr>' % stageRow["max_distance"])

  output += ('<tr><td>Max files per job</td>'
        '<td>%d</td></tr>' % stageRow["max_files_per_job"])

  output += ('<tr><td>Output RSEs</td>'
        '<td>')
        
  query = ("SELECT rse_name "
           "FROM stages_output_storages "
           "LEFT JOIN storages ON stages_output_storages.rse_id=storages.rse_id "
           "WHERE request_id=%d AND stage_id=%d "
           "ORDER BY rse_name" %
           (requestID, stageID))

  output += '<!-- %s -->\n' % str(time.time())
  justin.db.cur.execute(query)
  rseRows = justin.db.cur.fetchall()
  
  if (len(rseRows) == 0):
    output += ("(any)")
  else:
    for rseRow in rseRows:
      output += ("%s " % rseRow['rse_name'])
        
  output += ('</td></tr>')
        
  output += ('</table>')
    
  # Output patterns

  query = ("SELECT dataset,file_scope,file_pattern,"
           "for_next_stage,lifetime_seconds "
           "FROM stages_outputs "
           "WHERE request_id=%d AND stage_id=%d "
           "ORDER BY dataset,file_scope,file_pattern" %
           (requestID, stageID))

  output += '<!-- %s -->\n' % str(time.time())
  patternRows = justin.db.select(query)

  if patternRows:
    output += ("<h2>Output patterns</h2>")
    output += ('<table><tr><th>Dataset</th><th>Scope</th><th>Pattern</th>'
               '<th>Lifetime</th><th>For next stage</th></tr>') 

    for patternRow in patternRows:
      output += ("<tr><td>%s</td><td>%s</td><td>%s</td>"
                 "<td>%d</td><td>%s</td></tr>" 
                 % (patternRow["dataset"],
                    patternRow["file_scope"],
                    html.escape(patternRow["file_pattern"], quote=True),
                    patternRow["lifetime_seconds"],
                    bool(patternRow["for_next_stage"])))

    output += ('</table>')

  # Environment

  query = ("SELECT env_name,env_value "
           "FROM stages_environment "
           "WHERE request_id=%d AND stage_id=%d "
           "ORDER BY env_name" %
           (requestID, stageID))

  envRows = justin.db.select(query)

  if envRows:
    output += '<!-- %s -->\n' % str(time.time())
    output += ('<h2>Environment variables</h2>')
    output += ('<table><tr><th>Name</th><th>Value</th></tr>')
 
    for envRow in envRows:
      output += ("<tr><td>%s</td><td>%s</td></tr>" %
                 (html.escape(envRow["env_name"]),
                  html.escape(envRow["env_value"])))

    output += ('</table>') 

  # File states
  stateCounts = { 'recorded'    : 0,
                  'finding'     : 0,
                  'unallocated' : 0,
                  'allocated'   : 0,
                  'outputting'  : 0,
                  'processed'   : 0,
                  'notfound'    : 0,
                  'failed'      : 0,
                  'output'      : 0  }                  
  
  query = ('SELECT state,COUNT(*) AS count '
           'FROM files '
           'WHERE request_id=%d AND stage_id=%d '
           'GROUP BY state' % (requestID, stageID))
  
  stateRows = justin.db.select(query)
  
  for stateRow in stateRows:
    stateCounts[stateRow['state']] = stateRow['count']    
  
  output += '<h2>File states</h2>'
  output += '<table>'
  output += ("<tr><th>Total files</th><th>Finding</th>"
        "<th>Unallocated</th><th>Allocated</th><th>Outputting</th>"
        "<th>Processed</th><th>Not found</th><th>Failed</th><tr>")

  output += ('<tr><td><a href="%s?method=list-files&request_id=%s&stage_id=%s">%s</a></td>'
        '<td><a href="%s?method=list-files&request_id=%s&stage_id=%s&state=finding">%s</a></td>'
        '<td><a href="%s?method=list-files&request_id=%s&stage_id=%s&state=unallocated">%s</a></td>'
        '<td><a href="%s?method=list-files&request_id=%s&stage_id=%s&state=allocated">%s</a></td>'
        '<td><a href="%s?method=list-files&request_id=%s&stage_id=%s&state=outputting">%s</a></td>'
        '<td><a href="%s?method=list-files&request_id=%s&stage_id=%s&state=processed">%s</a></td>'
        '<td><a href="%s?method=list-files&request_id=%s&stage_id=%s&state=notfound">%s</a></td>'
        '<td><a href="%s?method=list-files&request_id=%s&stage_id=%s&state=failed">%s</a></td>'
        '</tr>' % 
          (uriPrefix, requestID, stageID, stateCounts['finding']
                                        + stateCounts['unallocated']
                                        + stateCounts['allocated'] 
                                        + stateCounts['outputting']
                                        + stateCounts['processed']
                                        + stateCounts['notfound']
                                        + stateCounts['failed'],
           uriPrefix, requestID, stageID, stateCounts['finding'], 
           uriPrefix, requestID, stageID, stateCounts['unallocated'], 
           uriPrefix, requestID, stageID, stateCounts['allocated'], 
           uriPrefix, requestID, stageID, stateCounts['outputting'],
           uriPrefix, requestID, stageID, stateCounts['processed'],
           uriPrefix, requestID, stageID, stateCounts['notfound'],
           uriPrefix, requestID, stageID, stateCounts['failed']))

  output += ("</table>")

  # Job states

  query = ('SELECT '
           '(SELECT COUNT(*) FROM jobs WHERE request_id=%d AND '
           ' stage_id=%d AND allocation_state="processing") '
           ' AS number_processing,'
           '(SELECT COUNT(*) FROM jobs WHERE request_id=%d AND '
           ' stage_id=%d AND allocation_state="outputting") '
           ' AS number_outputting,'
           '(SELECT COUNT(*) FROM jobs WHERE request_id=%d AND '
           ' stage_id=%d AND allocation_state="finished") '
           ' AS number_finished,'
           '(SELECT COUNT(*) FROM jobs WHERE request_id=%d AND '
           ' stage_id=%d AND allocation_state="aborted") '
           ' AS number_aborted,'
           '(SELECT COUNT(*) FROM jobs WHERE request_id=%d AND '
           ' stage_id=%d AND allocation_state="stalled") '
           ' AS number_stalled'
           % (requestID, stageID, 
              requestID, stageID,
              requestID, stageID,
              requestID, stageID,
              requestID, stageID))

  output += '<!-- %s SELECT (SELECT -->\n' % str(time.time())
  justin.db.cur.execute(query)
  jobNumberRow = justin.db.cur.fetchone()

  output += ('<h2>Job states</h2>')
  output += ('<table>')
  output += ('<tr><th>Processing</th><th>Outputting</th><th>Finished</th>'
        '<th>Aborted</th><th>Stalled</th></tr>')

  output += ('<tr>'
        '<td><a href="%s?method=list-jobs&request_id=%d'
        '&stage_id=%d&allocation_state=processing">%d</a></td>'
        '<td><a href="%s?method=list-jobs&request_id=%d'
        '&stage_id=%d&allocation_state=outputting">%d</a></td>'
        '<td><a href="%s?method=list-jobs&request_id=%d'
        '&stage_id=%d&allocation_state=finished">%d</a></td>'
        '<td><a href="%s?method=list-jobs&request_id=%d'
        '&stage_id=%d&allocation_state=aborted">%d</a></td>'
        '<td><a href="%s?method=list-jobs&request_id=%d'
        '&stage_id=%d&allocation_state=stalled">%d</a></td>'
        '</tr>'
        % (uriPrefix, requestID, stageID, jobNumberRow['number_processing'],
           uriPrefix, requestID, stageID, jobNumberRow['number_outputting'],
           uriPrefix, requestID, stageID, jobNumberRow['number_finished'],
           uriPrefix, requestID, stageID, jobNumberRow['number_aborted'],
           uriPrefix, requestID, stageID, jobNumberRow['number_stalled']
          ))

  output += ('</table>')

  # Progress chart based on file process_time values

  query = ('SELECT site_name,processed_hour,'
           'count(*) AS processed_count '
           'FROM files '
           'LEFT JOIN sites ON sites.site_id=files.processed_site_id '
           'WHERE request_id=%d AND stage_id=%d AND '
           'state="processed" GROUP BY processed_hour,processed_site_id '
           'ORDER BY processed_hour'
           % (requestID, stageID))

  binRows = justin.db.select(query)

  if binRows:
    firstHour   = binRows[0]['processed_hour']
    lastHour    = binRows[-1]['processed_hour']
    hoursPerBin = int((1 + lastHour - firstHour) / 20.0 + 0.999)
    numBins     = int((1 + lastHour - firstHour) / hoursPerBin + 0.999)

    # Add padding before and after data
    firstHour -= hoursPerBin
    lastHour  += hoursPerBin
    numBins   += 2
    bins       = {}

    for binRow in binRows:

      if binRow['site_name'] not in bins:
        bins[binRow['site_name']] = [0] * numBins

      i = int((binRow['processed_hour'] - firstHour) / hoursPerBin)
      bins[binRow['site_name']][i] += binRow['processed_count']

    chart = justinStackedLine(1000, 
                           firstHour * 3600,
                           hoursPerBin,
                           numBins)
  
    chart.title = 'Files processed'
    
    for siteName in bins:
      chart.add(siteName, bins[siteName], fill = True, show_dots = False)

    output += ('<a href="' + chart.render_data_uri() + '" target="_blank" '
               'style="text-decoration: none">' + 
               '<figure style="width:%dpx; display: inline-block">'  
               % chart.imageSize)

    output += chart.render().decode('utf-8')
    output += '</figure></a> '

  # RSE pie charts
  output += '<!-- %s start of RSE pie chart -->\n' % str(time.time())

  query = ('SELECT rse_name,COUNT(*) AS replica_count FROM replicas '
           'LEFT JOIN storages ON replicas.rse_id=storages.rse_id '
           'WHERE request_id=%d AND stage_id=%d '
           'GROUP BY replicas.rse_id ORDER BY replica_count DESC'
           % (requestID, stageID))

  justin.db.select(query)
  replicaRows = justin.db.select(query)

  if replicaRows:

    totalReplicas = 0
    for replicaRow in replicaRows:
      totalReplicas += replicaRow['replica_count']

    chart = pygal.Pie(style=pygal.style.LightColorizedStyle, 
                      legend_at_bottom=True,
                      width=800)    
    chart.title = 'Replicas per RSE'

    for replicaRow in replicaRows:
      chart.add('%s (%d%%)' 
                % (replicaRow['rse_name'], 
                   int((100.0 * replicaRow['replica_count']) / totalReplicas)), 
                replicaRow['replica_count'])

    output += ('<a href="' + chart.render_data_uri() + '" target="_blank" '
               'style="text-decoration: none">' + 
               '<figure style="width:%dpx; display: inline-block">'  
               % 800)

    output += chart.render().decode('utf-8')
    output += '</figure></a> '

  # RSE counts
  rseCounts = {}

  query = ('SELECT rse_name,events.rse_id,COUNT(*) AS file_count FROM events '
           'LEFT JOIN storages ON storages.rse_id=events.rse_id '
           'WHERE request_id=%d AND stage_id=%d AND event_type_id=%d '
           'GROUP BY events.rse_id ORDER BY file_count DESC' %
           (requestID, stageID, justin.db.event_FILE_ALLOCATED))

  output += '<!-- %s SELECT ALLOCATED -->\n' % str(time.time())
  justin.db.cur.execute(query)
  rseRows = justin.db.cur.fetchall()

  for rseRow in rseRows:

    if rseRow['rse_name'] not in rseCounts:
      rseCounts[rseRow['rse_name']] = { 'inputs': 0, 'outputs': 0 }

    rseCounts[rseRow['rse_name']]['inputs'] = rseRow['file_count']

  query = ('SELECT rse_name,events.rse_id,COUNT(*) AS file_count FROM events '
           'LEFT JOIN storages ON storages.rse_id=events.rse_id '
           'WHERE request_id=%d AND stage_id=%d AND event_type_id=%d '
           'GROUP BY events.rse_id ORDER BY file_count DESC' %
           (requestID, stageID, justin.db.event_FILE_CREATED))

  output += '<!-- %s SELECT CREATED -->\n' % str(time.time())
  justin.db.cur.execute(query)
  rseRows = justin.db.cur.fetchall()
  
  for rseRow in rseRows:
  
    if rseRow['rse_name'] not in rseCounts:
      rseCounts[rseRow['rse_name']] = { 'inputs': 0, 'outputs': 0 }

    rseCounts[rseRow['rse_name']]['outputs'] = rseRow['file_count']
    
  if rseCounts:
    output += ("<h2>RSEs used</h2>")
    output += ('<table><tr><th>Name</th><th>Inputs</th><th>Outputs</th></tr>')

    for rseName in rseCounts:
      output += ("<tr><td>%s</td><td>%d</td><td>%d</td></tr>" %
            (rseName,
             rseCounts[rseName]['inputs'],
             rseCounts[rseName]['outputs']
            ))

    output += ('</table>') 

  # Reset event counts

  resetCounts = {}

  query = ('SELECT site_name,COUNT(*) AS site_count FROM events '
           'LEFT JOIN sites ON sites.site_id=events.site_id '
           'WHERE request_id=%d AND stage_id=%d AND event_type_id=%d '
           'GROUP BY site_name ORDER BY site_count DESC' %
           (requestID, stageID, justin.db.event_FILE_ALLOCATED_RESET))

  output += '<!-- %s -->\n' % str(time.time())
  justin.db.cur.execute(query)
  resetRows = justin.db.cur.fetchall()
  
  for resetRow in resetRows:
  
    if resetRow['site_name'] not in resetCounts:
      resetCounts[resetRow['site_name']] = { 'allocated': 0, 'outputting': 0 }

    resetCounts[resetRow['site_name']]['allocated'] = resetRow['site_count']

  query = ('SELECT site_name,COUNT(*) AS site_count FROM events '
           'LEFT JOIN sites ON sites.site_id=events.site_id '
           'WHERE request_id=%d AND stage_id=%d AND event_type_id=%d '
           'GROUP BY site_name ORDER BY site_count DESC' %
           (requestID, stageID, justin.db.event_FILE_OUTPUTTING_RESET))

  output += '<!-- %s -->\n' % str(time.time())
  justin.db.cur.execute(query)
  resetRows = justin.db.cur.fetchall()
  
  for resetRow in resetRows:
  
    if resetRow['site_name'] not in resetCounts:
      resetCounts[resetRow['site_name']] = { 'allocated': 0, 'outputting': 0 }

    resetCounts[resetRow['site_name']]['outputting'] = resetRow['site_count']

  if resetCounts:
    output += ("<h2>File reset events, by site</h2>")
    output += ('<table><tr><th>Site</th><th>Allocated</th><th>Outputting</th></tr>')

    for siteName in resetCounts:
      output += ("<tr><td>%s</td><td>%d</td><td>%d</td></tr>" %
            (siteName,
             resetCounts[siteName]['allocated'],
             resetCounts[siteName]['outputting']
            ))

    output += ('</table>') 

  output += ("<h2>Jobscript</h2>")

  if stageRow['scope_name'] and stageRow['jobscript_name']:
    output += ('<p><i>Copied from '
               '<a href="%s?method=show-jobscript&jobscript_id=%s:%s">%s:%s</a>'
               ' when the stage was created.</i></p>'
               % (uriPrefix, 
                  stageRow['scope_name'], stageRow['jobscript_name'],
                  stageRow['scope_name'], stageRow['jobscript_name']))
  elif stageRow['username'] and stageRow['jobscript_name']:
    output += ('<p><i>Copied from '
               '<a href="%s?method=show-jobscript&jobscript_id=%s:%s">%s:%s</a>'
               ' when the stage was created.</i></p>'
               % (uriPrefix, 
                  stageRow['username'], stageRow['jobscript_name'],
                  stageRow['username'], stageRow['jobscript_name']))

  output += ('<pre style="white-space: pre-wrap;">') 

  output += (html.escape(
   stageRow["jobscript"].encode('ascii',errors='ignore').decode(), 
   quote=True))
  
  output += ('</pre>') 

  output += footer()
  return output

def listFiles(uriPrefix, cgiValues, pageNumber, pageLength):

  try:
    requestID = int(cgiValues["request_id"])
  except:
    return errorPage(uriPrefix, "request_id must be given")
  
  try:
    stageID = int(cgiValues["stage_id"])
  except:
    return errorPage(uriPrefix, "stage_id must be given")

  stateFilter = ''
  stateText = ''

  try:
    state = str(cgiValues["state"])
  except:
    state = ''
  else:
    if state == 'finding' or state == 'unallocated' or state == 'allocated' \
        or state == 'outputting' or state == 'processed' \
        or state == 'notfound' or state == 'failed':
      stateFilter = 'AND files.state="' + state + '"'
      stateText = ' (state = ' + state + ')'
    
  output = header(uriPrefix, "justIN: Files for Request %d, Stage %d%s" 
                  % (requestID, stageID, stateText))

  output += ("<h1>Files  for Request %d, Stage %d%s</h1>" 
             % (requestID, stageID, stateText))
  
  query = ("SELECT files.file_did,files.state,event_time,"
           "storages.rse_name,jobs.jobsub_id,sites.site_name,"
           "allocations "
           "FROM files "
           "LEFT JOIN events"
           " ON files.justin_job_id=events.justin_job_id AND events.event_type_id=%d "
           "LEFT JOIN storages ON events.rse_id=storages.rse_id "
           "LEFT JOIN jobs ON jobs.justin_job_id=files.justin_job_id "
           "LEFT JOIN sites ON jobs.site_id=sites.site_id "
           "WHERE files.request_id=%d AND files.stage_id=%d %s "
           "ORDER BY files.file_id LIMIT %d,%d" % 
           (justin.db.event_FILE_ALLOCATED, requestID, stageID, stateFilter,
            pageNumber * pageLength, pageLength + 1))

  justin.db.cur.execute(query)
  filesRows = justin.db.cur.fetchall()

  output += makePager(uriPrefix, pageNumber, pageLength, len(filesRows),
             '%s?method=list-files&page_number=%d&page_length=%d'
             '&request_id=' + str(requestID) + 
             '&stage_id=' + str(stageID) + 
             '&state=' + state)

  output += (
"""<p><table>
<tr><th rowspan="2">DID</th><th rowspan="2">Attempts</th><th rowspan="2">State</th><th colspan="4">Allocated</th></tr>
<tr><th>Time</th><th>RSE</th><th>Site</th><th>Jobsub ID</th></tr>""")

  for fileRow in filesRows[:pageLength]:
    output += ('<tr><td><a href="%s?method=show-file&request_id=%d&stage_id=%d&file_did=%s">'
          '%s</a></td><td>%d</td><td>%s</td>' % 
          (uriPrefix,
           requestID, 
           stageID, 
           urllib.parse.quote(fileRow["file_did"], safe=''),
           html.escape(fileRow["file_did"], quote=True),
           fileRow["allocations"], fileRow["state"]
          )
         )
         
    if fileRow["state"] in ['allocated', 'outputting', 'processed', 'failed']:
      output += ('<td>%s</td>'
            '<td><a href="%s?method=show-storage&rse_name=%s">%s</a></td>'
            '<td><a href="%s?method=show-site&site_name=%s">%s</a></td>'
            '<td><a href="%s?method=show-job&jobsub_id=%s">%s</a></td></tr>' % 
            (str(fileRow["event_time"]),
             uriPrefix, str(fileRow["rse_name"]),  str(fileRow["rse_name"]),
             uriPrefix, str(fileRow["site_name"]), str(fileRow["site_name"]),
             uriPrefix, str(fileRow["jobsub_id"]), str(fileRow["jobsub_id"])
            )
           )
    else:
      output += ('<td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>')
      
  output += ("</table>")
  
  output += makePager(uriPrefix, pageNumber, pageLength, len(filesRows),
             '%s?method=list-files&page_number=%d&page_length=%d'
             '&request_id=' + str(requestID) + 
             '&stage_id=' + str(stageID) + 
             '&state=' + state)

  output += footer()
  return output

def showFile(uriPrefix, cgiValues):

  try:
    fileDID = cgiValues["file_did"]
  except:
    return errorPage(uriPrefix, "file_did must be given")

  if '"' in fileDID:
    return errorPage(uriPrefix, "Bad format of file_did")
      
  try:
    requestID = int(cgiValues["request_id"])
  except:
    return errorPage(uriPrefix, "request_id must be given")
  
  try:
    stageID = int(cgiValues["stage_id"])
  except:
    return errorPage(uriPrefix, "stage_id must be given")

  output = header(uriPrefix, "justIN: File %s" 
                  % html.escape(fileDID, quote=True))

  output += ("<h1>File %s</h1>"
             % html.escape(fileDID, quote=True))
  
  query = ('SELECT file_id,state,processed_time '
           'FROM files '
           'WHERE request_id=%d AND stage_id=%d and file_did="%s"' %
           (requestID, stageID, fileDID))

  fileRow = justin.db.select(query, justOne = True)

  try:
    fileID = int(fileRow["file_id"])

  except Exception as e:
    return errorPage(uriPrefix, "invalid file_id (%d,%d,%s): %s\n%s" 
                     % (requestID, stageID, fileDID, str(e), query))

  query = ("SELECT allocation_state,jobsub_id,event_time,"
           "site_name,rse_name FROM events "
           "LEFT JOIN storages ON storages.rse_id=events.rse_id "
           "LEFT JOIN sites ON sites.site_id=events.site_id "
           "LEFT JOIN jobs ON events.justin_job_id=jobs.justin_job_id "
           "WHERE event_type_id=%d AND file_id=%d ORDER BY event_id" 
           % (justin.db.event_FILE_ALLOCATED, fileID))

  justin.db.cur.execute(query)
  jobsRows = justin.db.cur.fetchall()

  query = ('SELECT wan_pfn,lan_pfn,rse_name '
           'FROM replicas '
           'LEFT JOIN storages ON storages.rse_id=replicas.rse_id '
           'WHERE file_id=%d' % fileID)

  justin.db.cur.execute(query)
  replicaRows = justin.db.cur.fetchall()

  output += ('<p><table>')
  
  output += ('<tr><td>Request ID</td>'
             '<td><a href="%s?method=show-request&request_id=%d">%d</a></td></tr>'
             % (uriPrefix, requestID, requestID))
        
  output += ('<tr><td>Stage ID</td>'
             '<td><a href="%s?method=show-stage&request_id=%d&stage_id=%d">%d</a></td></tr>'
             % (uriPrefix, requestID, stageID, stageID))
        
  output += ('<tr><td>State</td>'
             '<td>%s</td></tr>'
             % fileRow["state"])
      
  output += ('<tr><td>Processed</td>'
             '<td>%s</td></tr>'
             % spaceForUnixEpoch(fileRow["processed_time"]))
      
  output += '<tr><td>Replicas</td><td>'
  
  for replicaRow in replicaRows:  
  
    if replicaRow["lan_pfn"]:
      output += ('<small>%s (wan): %s </small><br>' % 
            (replicaRow["rse_name"], 
             replicaRow["wan_pfn"]))
      output += ('<small>%s (lan): %s </small><br>' % 
            (replicaRow["rse_name"], 
             replicaRow["lan_pfn"]))

    else:
      output += ('<small>%s: %s </small><br>' % 
            (replicaRow["rse_name"], 
             replicaRow["wan_pfn"]))

  output += '</td></tr>'

  output += '<tr><td>Allocations</td><td>'
  
  for jobRow in jobsRows:
  
    output += ('<a href="%s?method=show-job&jobsub_id=%s">%s</a> '
               '%s (%s &nbsp; %s &nbsp; %s)<br>' 
               % (uriPrefix,
                  jobRow["jobsub_id"], jobRow["jobsub_id"], 
                  jobRow["event_time"],
                  jobRow["allocation_state"],
                  jobRow["site_name"],
                  jobRow["rse_name"])
              )

  output += '</td></tr>'

  output += ('<tr><td colspan=2><a href="'
   'https://metacat.fnal.gov:9443/dune_meta_demo/app/gui/show_file?did=%s">'
   'Find in MetaCat</a></td></tr>' % urllib.parse.quote_plus(fileDID))

  output += "</table>"  
  output += footer()
  return output

def showJob(uriPrefix, cgiValues):
  try:
    jobsubID = cgiValues["jobsub_id"]
  except:
    return errorPage(uriPrefix, "jobsub_id must be given")
      
  output = header(uriPrefix, "justIN: Jobsub ID %s" % jobsubID)

  output += "<h1>Jobsub ID %s</h1>" % jobsubID
  
  query = ("SELECT jobs.justin_job_id,jobs.request_id,jobs.stage_id,sites.site_name,"
           "jobs.hostname,jobs.cpuinfo,jobs.os_release,username,"
           "jobs.rss_bytes,jobs.processors,jobs.wall_seconds,"
           "jobs.allocator_name,jobs.allocation_state,jobs.allocation_time,"
           "jobs.submitted_time,jobs.finished_time,jobs.jobsub_state,"
           "jobs.heartbeat_time,jobs.outputting_time,"
           "jobs.for_awt,jobs.site_job_id,"
           "jobs.max_processors,jobs.min_processors,"
           "jobs.max_rss_bytes,jobs.min_rss_bytes,"
           "jobs.max_wall_seconds,jobscript_log "
           "FROM jobs "
           "LEFT JOIN requests ON requests.request_id=jobs.request_id "
           "LEFT JOIN users ON requests.user_id=users.user_id "
           "LEFT JOIN sites ON jobs.site_id=sites.site_id "
           "LEFT JOIN jobs_logs ON jobs_logs.justin_job_id=jobs.justin_job_id "
           "WHERE jobs.jobsub_id='%s'" % jobsubID)

  jobRow = justin.db.select(query, justOne = True)

  if not jobRow:
    return errorPage(uriPrefix, "Job not found in database")

  query = ("SELECT file_did FROM events "
           "LEFT JOIN files ON events.file_id=files.file_id "
           "WHERE events.justin_job_id=%d AND event_type_id=%d "
           "ORDER BY event_id" % 
           (jobRow['justin_job_id'], justin.db.event_FILE_ALLOCATED))

  justin.db.cur.execute(query)
  inputFilesRows = justin.db.cur.fetchall()

  query = ("SELECT file_did,files.stage_id FROM events "
           "LEFT JOIN files ON events.file_id=files.file_id "
           "WHERE events.justin_job_id=%d AND event_type_id=%d "
           "ORDER BY event_id" % 
           (jobRow['justin_job_id'], justin.db.event_FILE_CREATED))

  justin.db.cur.execute(query)
  outputFilesRows = justin.db.cur.fetchall()

  output += '<table>'
  
#  output += ('<tr><td>Jobsub state</td>'
#        '<td>%s</td></tr>'
#        % jobRow["jobsub_state"])
      
  output += ('<tr><td>Allocation state</td>'
             '<td>%s</td></tr>'
             % jobRow["allocation_state"])
      
  output += ('<tr><td>Jobsub ID</td>'
             '<td>%s</td></tr>'
             % html.escape(jobsubID, quote=True))

  output += ('<tr><td>Site job ID</td>'
             '<td>%s</td></tr>'
             % html.escape(jobRow['site_job_id'], quote=True))

  if jobRow['for_awt']: 
    output += ('<tr><td>Workflow Testing</td>'
               '<td>Yes</td></tr>')

  output += ('<tr><td>Submitted time</td>'
             '<td>%s</td></tr>'
             % jobRow["submitted_time"])
      
  output += ('<tr><td>Last heartbeat</td>'
             '<td>%s</td></tr>'
             % spaceForUnixEpoch(jobRow["heartbeat_time"]))
      
  output += ('<tr><td>Allocator name</td>'
             '<td>%s</td></tr>'
             % html.escape(jobRow["allocator_name"], quote=True))

  if jobRow["site_name"]:
    output += ('<tr><td>Site</td>'
               '<td><a href="%s?method=show-site&site_name=%s">'
               '%s</a></td></tr>'
               % (uriPrefix, jobRow["site_name"], jobRow["site_name"]))
  else:
    output += '<tr><td>Site</td><td> </td></tr>'

  output += ('<tr><td>Slot</td><td>'
             '%d &lt; processors &le; %d<br>'
             '%d &lt; rss bytes &le; %d<br>'
             'wall seconds &le; %d</td></tr>'
             % (jobRow["min_processors"], jobRow["max_processors"],
                jobRow["min_rss_bytes"], jobRow["max_rss_bytes"],
                jobRow["max_wall_seconds"]
               )
            )

  if jobRow["hostname"]:
    output += ('<tr><td>Hostname</td>'
               '<td>%s</td></tr>'
               % html.escape(jobRow["hostname"], quote=True))
  
  if jobRow["cpuinfo"]:
    output += ('<tr><td>cpuinfo</td>'
               '<td>%s</td></tr>'
               % html.escape(jobRow["cpuinfo"], quote=True))

  if jobRow["os_release"]:
    output += ('<tr><td>OS release</td>'
               '<td>%s</td></tr>'
               % html.escape(jobRow["os_release"], quote=True))

  if jobRow["rss_bytes"]:
    output += ('<tr><td>RSS bytes</td>'
               '<td>%s (%d MB)</td></tr>' 
               % (jobRow["rss_bytes"], 
                  int(jobRow["rss_bytes"]) / 1048576))

  if jobRow["processors"]:
    output += ('<tr><td>Processors</td>'
               '<td>%s</td></tr>'
               % jobRow["processors"])

  if jobRow["wall_seconds"]:
    output += ('<tr><td>Wall seconds limit</td>'
               '<td>%s (%d hours)</td></tr>'
               % (jobRow["wall_seconds"],
                  int(jobRow["wall_seconds"]) / 3600))

  output += '<tr><td>Request by</td>'
  
  if jobRow['username']:
    output += '<td>%s</td></tr>' % jobRow['username']
  else:
    output += '<td>&nbsp;</td></tr>'

  output += '<tr><td>Request ID</td>'
  
  if jobRow['request_id']:
    output += ('<td><a href="%s?method=show-request&request_id=%s">'
               '%s</a></td></tr>'
               % (uriPrefix, jobRow["request_id"], jobRow["request_id"]))
  else:
    output += '<td>&nbsp;</td></tr>'
        
  output += '<tr><td>Stage ID</td>'
  
  if jobRow['stage_id']:
    output += ('<td><a href="%s?method=show-stage&request_id=%s&'
               'stage_id=%s">%s</a></td></tr>'
               % (uriPrefix, jobRow["request_id"], jobRow["stage_id"],
                  jobRow["stage_id"]))
  else:
    output += '<td>&nbsp;</td></tr>'
        
  output += ('<tr><td>Started</td>'
             '<td>%s</td></tr>'
             % spaceForUnixEpoch(jobRow["allocation_time"]))

  output += ('<tr><td>Outputting started</td>'
             '<td>%s</td></tr>'
             % spaceForUnixEpoch(jobRow["outputting_time"]))

  output += ('<tr><td>Finished</td>'
             '<td>%s</td></tr>'
             % spaceForUnixEpoch(jobRow["finished_time"]))

  output += '<tr><td>Input files</td><td>'
  
  for inputFileRow in inputFilesRows:
    try:
      output += ('<a href="%s?method=show-file&request_id=%d&stage_id=%d&file_did=%s">'
                 '%s</a><br>' 
                 % (uriPrefix,
                    jobRow["request_id"], 
                    jobRow["stage_id"],
                    urllib.parse.quote(str(inputFileRow["file_did"]), safe=''),
                    html.escape(inputFileRow["file_did"], quote=True)
                   )
                )
    except Exception as e:
      output += '<!-- %s -->' % str(e)
      
  output += '</td></tr>'

  output += '<tr><td>Output files</td><td>'
  
  for outputFileRow in outputFilesRows:
    try:
      output += ('<a href="%s?method=show-file&request_id=%d&stage_id=%d&file_did=%s">'
                 '%s</a><br>'  
                 % (uriPrefix,
                    jobRow["request_id"], 
                    outputFileRow["stage_id"],
                    urllib.parse.quote(str(outputFileRow["file_did"]), safe=''),
                    html.escape(outputFileRow["file_did"], quote=True)
                   )
                )
    except Exception as e:
      output += '<!-- %s -->' % str(e)
      
  output += '</td></tr>'

  output += ('<tr><td colspan=2>'
        '<a href="%s?method=list-events&jobsub_id=%s">'
        'List job events</a> &nbsp; &nbsp; '
        '<a href="https://landscape.fnal.gov/lens/view/job/%s/">'
        'Landscape job page</a> '
        '</td></tr>'
        % (uriPrefix, jobsubID, jobsubID))

  output += "</table>"

  if jobRow['jobscript_log']:
    output += "<h2>Jobscript log</h2>"
    output += '<pre style="white-space:pre-wrap;">'
    output += html.escape(jobRow["jobscript_log"].strip(), quote=True)
    output += '</pre>'

  output += footer()
  return output

def listJobs(uriPrefix, cgiValues, pageNumber, pageLength):
      
  urlTemplate   = '%s?method=list-jobs&page_number=%d&page_length=%d'
  filters       = []
  titleSuffixes = []

  try:
    requestID    = int(cgiValues["request_id"])
    urlTemplate += ('&request_id=%d' % requestID)
    titleSuffixes.append('Request %d' % requestID) 
    filters.append('jobs.request_id=%d' % requestID)
  except:
    pass
  
  try:
    stageID      = int(cgiValues["stage_id"])
    urlTemplate += '&stage_id=' + str(stageID)
    titleSuffixes.append('Stage %d' % stageID) 
    filters.append('jobs.stage_id=%d' % stageID)
  except:
    pass

  try:
    allocationState = str(cgiValues["allocation_state"])
  except:
    pass
  else:
    if allocationState in ['submitted','started','processing','outputting',
                           'finished', 'notused','failed','aborted',
                           'stalled']:
      filters.append('jobs.allocation_state="%s"' % allocationState)
      urlTemplate += '&allocation_state=' + allocationState
      titleSuffixes.append('Allocation State %s' % allocationState)

  try:
    siteName = cgiValues["site_name"]
  except:
    pass
  else:
    if siteName and justin.db.stringIsSite(siteName):
      filters.append('sites.site_name="%s"' % siteName)
      urlTemplate += '&site_name=' + siteName
      titleSuffixes.append('Site %s' % siteName)

  filter = ' AND '.join(filters)

  if filter:
    filter = 'WHERE ' + filter
  else:
    filter = ''
    
  if titleSuffixes:
    titleSuffix = ' for ' + ', '.join(titleSuffixes)
  else:
    titleSuffix = ''
    
  output = header(uriPrefix, "justIN: Jobs" + titleSuffix)

  output += "<h1>Jobs%s</h1>" % titleSuffix
  
  if not filter:   
    try:
      query = ('SELECT '
               ' (SELECT COUNT(*) FROM jobs '
               ' WHERE allocation_state="submitted") AS number_submitted,'
               ' (SELECT COUNT(*) FROM jobs '
               ' WHERE allocation_state="processing") AS number_processing,'
               ' (SELECT COUNT(*) FROM jobs '
               ' WHERE allocation_state="outputting") AS number_outputting')
               
      row = justin.db.select(query, justOne = True)

      output += ('<p>%d job(s) in submitted state, %d in processing state, '
            '%d in outputting state</p>' %
            (row['number_submitted'], 
             row['number_processing'],
             row['number_outputting']))

    except Exception as e:
      output += str(e)
  
  query = ("SELECT jobs.jobsub_id,jobs.request_id,jobs.stage_id,sites.site_name,"
           "jobs.allocation_state,jobs.allocation_time,jobs.submitted_time,"
           "jobs.finished_time,jobs.jobsub_state,users.username,jobs.for_awt "
           "FROM jobs "
           "LEFT JOIN requests ON requests.request_id=jobs.request_id "
           "LEFT JOIN users ON requests.user_id=users.user_id "
           "LEFT JOIN sites ON jobs.site_id=sites.site_id "
           "%s "
           "ORDER BY jobs.justin_job_id DESC LIMIT %d,%d" %
           (filter, pageNumber * pageLength, pageLength + 1)
          )

  justin.db.cur.execute(query)
  jobRows = justin.db.cur.fetchall()

  output += makePager(uriPrefix, pageNumber, pageLength, len(jobRows), urlTemplate)

  output += '<p><table>'
  
  output += ('<tr>'
        '<th>Jobsub ID</th>'
        '<th>Allocation state</th>'
        '<th>Site</th>'
        '<th>User</th>'
        '<th>Request</th>'
        '<th>Stage</th>'
        '<th>Submitted</th>'
        '<th>Started</th>'
        '<th>Finished</th>'
        '</tr>')
  
#        '<th>Jobsub State</th>'

  for jobRow in jobRows[:pageLength]:
    if jobRow['username']:
      usernameStr = jobRow["username"]
    else:
      usernameStr = ' '

    if jobRow['for_awt']:
      requestStageStr = '<td colspan=2>Workflow Testing</td>'
      
    else:
      if jobRow['request_id']:
        requestStageStr = ('<td><a href="%s?method=show-request&'
                           'request_id=%s">%s</a></td>' 
                           % (uriPrefix, 
                              jobRow["request_id"],
                              jobRow["request_id"]))
      else:
        requestStageStr = '<td> </td>'
      
      if jobRow['stage_id']:
        requestStageStr += (
             '<td><a href="%s?method=show-stage&request_id=%s&'
             'stage_id=%s">%s</a></td>' 
             % (uriPrefix, jobRow["request_id"], 
                jobRow["stage_id"], jobRow["stage_id"]))
      else:
        requestStageStr += '<td> </td>'
  
    if jobRow['site_name']:
      siteNameStr = ('<td><a href="%s?method=show-site&site_name=%s">'
                     '%s</a></td>' 
                     % (uriPrefix, jobRow['site_name'], jobRow['site_name']))
    else:
      siteNameStr = '<td> </td>'

    output += ('<tr>'
          '<td><a href="%s?method=show-job&jobsub_id=%s">%s</a></td>'
          '<td>%s</td>'
          '%s'
          '<td>%s</td>'
          '%s'
          '<td>%s</td>'
          '<td>%s</td>'
          '<td>%s</td>'
          '</tr>'
          % (uriPrefix,
             jobRow['jobsub_id'], html.escape(jobRow['jobsub_id'], quote=True),
             jobRow['allocation_state'],
             siteNameStr,
             usernameStr,
             requestStageStr,
             spaceForUnixEpoch(jobRow["submitted_time"]),
             spaceForUnixEpoch(jobRow["allocation_time"]),
             spaceForUnixEpoch(jobRow["finished_time"])
            )
         )    

  output += ("</table>")
  output += makePager(uriPrefix, pageNumber, pageLength, len(jobRows), urlTemplate)
  output += footer()
  return output

def listSites(uriPrefix, cgiValues):
      
  output = header(uriPrefix, "justIN: Sites")

  output += ("<h1>Sites</h1>")
  
  query = "SELECT * FROM sites WHERE site_id > 0 ORDER BY site_name"
  justin.db.cur.execute(query)
  siteRows = justin.db.cur.fetchall()

  output += ('<table>')
  
  output += ('<tr>'
        '<th>Site name</th>'
        '<th>Enabled?</th>'
        '<th>Last job</th>'
        '<th>RSS(MB) / Processors</th>'
        '<th>Max Wall Seconds</th>'
        '<th>Max jobs</th>'
        '<th colspan=2>&nbsp;</th>'
        '</tr>')
  
  for siteRow in siteRows:  
    if str(siteRow['last_get_stage_time']) == justin.db.unixEpoch:
      lastGetStageStr = '&nbsp;'
    else:
      lastGetStageStr = str(siteRow['last_get_stage_time'])
  
    output += ('<tr>'
          '<td><a href="%s?method=show-site&site_name=%s">%s</a></td>'
          '<td style="font-weight: %s">%s</td>'
          '<td>%s</td>'
          '<td style="text-align: right">%d / %d = %d</td>'
          '<td style="text-align: right">%d</td>'
          '<td style="text-align: right">%d</td>'
          '<td><a '
          'href="https://dune-cric.cern.ch/core/experimentsite/detail/%s/">'
          'CRIC</a></td>'
          '<td><form method="post" style="display:inline" '
          'action="https://goc.egi.eu/portal/index.php?Page_Type=Search">'
          '<input type="hidden" name="SearchString" value="%s">'
          '<input type="submit" value="GOCDB"></form></td>'
          '</tr>'
          % (uriPrefix,
             siteRow['site_name'], siteRow['site_name'],
             'bold' if siteRow['enabled'] else 'normal',
             'TRUE' if siteRow['enabled'] else 'False',
             lastGetStageStr,
             int(siteRow['max_rss_bytes'] / 1048576),
              siteRow['max_processors'],
              int((siteRow['max_rss_bytes'] 
                    / siteRow['max_processors']) / 1048576),
             siteRow['max_wall_seconds'],
             siteRow['max_jobs'],
             siteRow['site_name'],
             siteRow['wlcg_site_name']
            )
         )    

  output += ("</table>")
  output += footer()
  return output

def listStorages(uriPrefix, cgiValues):
      
  output = header(uriPrefix, "justIN: Storages")

  output += ("<h1>Storages</h1>")
  
  query = ("SELECT rse_name,occupancy,"
           "rucio_write,justin_write,(rucio_write AND justin_write) AS has_write,"
           "rucio_read,justin_read,(rucio_read AND justin_read) AS has_read,"
           "write_protocol,deterministic_rse "
           "FROM storages ORDER BY rse_name")
  justin.db.cur.execute(query)
  storageRows = justin.db.cur.fetchall()

  output += ('<table>')
  
  output += ('<tr>'
        '<th>RSE name</th>'
        '<th>Occupancy</th>'
        '<th>Read</th>'
        '<th>(Rucio/justIN)</th>'
        '<th>Write</th>'
        '<th>(Rucio/justIN)</th>'
        '<th>Write protcol</th>'
        '<th>Deterministic</th>'
        '</tr>')
  
  for storageRow in storageRows:  
    output += ('<tr>'
          '<td><a href="%s?method=show-storage&rse_name=%s">%s</a></td>'
          '<td>%.2f</td>'
          '<td>%s</td>'
          '<td>(%s/%s)</td>'
          '<td>%s</td>'
          '<td>(%s/%s)</td>'
          '<td>%s</td>'
          '<td>%s</td>'
          '</tr>' 
          % (uriPrefix,
             storageRow['rse_name'], storageRow['rse_name'],
             storageRow['occupancy'],
             bool(storageRow['has_read']),
             bool(storageRow['rucio_read']),
             bool(storageRow['justin_read']),
             bool(storageRow['has_write']),
             bool(storageRow['rucio_write']),
             bool(storageRow['justin_write']),
             storageRow['write_protocol'],
             bool(storageRow['deterministic_rse'])
            )
         )    

  output += ("</table>")
  output += footer()
  return output

def showSite(uriPrefix, cgiValues):
      
  try:
    siteName = cgiValues["site_name"]
  except:
    return errorPage(uriPrefix, "site_name must be given")
    
  if not justin.db.stringIsSite(siteName):
    return errorPage(uriPrefix, "Invalid site name!")
        
  output = header(uriPrefix, "justIN: Site " + siteName)

  output += ("<h1>Site %s</h1>" % siteName)
  
  query = 'SELECT * FROM sites WHERE site_name="%s"' % siteName
  justin.db.cur.execute(query)
  siteRow = justin.db.cur.fetchone()

  output += ('<table>')
  
  output += ('<tr><td>Site name</td><td>%s</td></tr>' % siteName)
  
  output += ('<tr><td>Jobsub site name</td><td>%s</td></tr>' 
        % siteRow['jobsub_site_name'])

  output += ('<tr><td>WLCG site name</td><td>%s</td></tr>' 
        % siteRow['wlcg_site_name'])

  output += ('<tr><td>Enabled?</td><td>%s</td></tr>' 
        % bool(siteRow['enabled']))

  output += ('<tr><td>Last submitted</td><td>%s</td></tr>' 
        % siteRow['last_submitted_time'])

  if str(siteRow['last_get_stage_time']) == justin.db.unixEpoch:
    lastGetStageStr = '&nbsp;'
  else:
    lastGetStageStr = str(siteRow['last_get_stage_time'])

  output += ('<tr><td>Last job started</td><td>%s</td></tr>' % lastGetStageStr)

  output += ('<tr><td>Last AWT test job</td><td>%s</td></tr>' % spaceForUnixEpoch(siteRow['last_awt_time']))

  output += ('<tr><td>Max number of jobs</td><td>%d</td></tr>' % siteRow['max_jobs'])

  output += ('<tr><td>Jobs</td><td>'
             '<a href="%s?method=list-jobs&site_name=%s">All</a> ' 
             % (uriPrefix, siteName))

  for state in ['submitted', 'started', 'processing', 'outputting',
                'finished', 'notused', 'failed']:
    output += ('<a href="%s?method=list-jobs&allocation_state=%s&'
               'site_name=%s">%s</a> ' 
               % (uriPrefix, state, siteName, state.capitalize()))

  output += ('</td></tr>')
  
  output += ('<tr><td>External info</td><td><a '
          'href="https://dune-cric.cern.ch/core/experimentsite/detail/%s/">'
          'CRIC</a> '
        '<form method="post" style="display:inline" '
          'action="https://goc.egi.eu/portal/index.php?Page_Type=Search">'
          '<input type="hidden" name="SearchString" value="%s">'
          '<input type="submit" value="GOCDB"></form></td>'
          '</tr>' % (siteRow['site_name'], siteRow['wlcg_site_name']))

  output += ("</table>")

  output += ("<h2>Storages by distance</h2>")

  query = ('SELECT rse_name,occupancy,'
           'rucio_write,justin_write,(rucio_write AND justin_write) AS has_write,'
           'rucio_read,justin_read,(rucio_read AND justin_read) AS has_read,'
           'distance,read_result,write_result,jobsub_id '
           'FROM storages '
           'LEFT JOIN sites_storages ON sites_storages.rse_id=storages.rse_id '
           'LEFT JOIN jobs ON sites_storages.justin_job_id=jobs.justin_job_id '
           'WHERE sites_storages.site_id=%d '
           'ORDER BY distance,rse_name' % siteRow['site_id'])

  justin.db.cur.execute(query)
  storageRows = justin.db.cur.fetchall()

  output += ("<p>Test values are xrdcp read and rucio write exit codes for jobs "
        "at each site contacting each RSE. 0 = success.</p>")

  output += ('<table>')
  
  output += ('<tr>'
        '<th>RSE name</th>'
        '<th>Distance</th>'
        '<th>Occupancy</th>'
        '<th>Read</th>'
        '<th>Write</th>'
        '<th>Read test</th>'
        '<th>Write test</th>'
        '</tr>')
  
  for storageRow in storageRows:  
    output += ('<tr>'
          '<td><a href="%s?method=show-storage&rse_name=%s">%s</a></td>'
          '<td>%d</td>'
          '<td>%.2f</td>'
          '<td>%s</td>'
          '<td>%s</td>'
          % (uriPrefix,
             storageRow['rse_name'], storageRow['rse_name'],
             int(storageRow['distance']),
             storageRow['occupancy'],
             bool(storageRow['has_read']),
             bool(storageRow['has_write'])
            )
         )    
         
    if int(storageRow['read_result']) == 255:
      output += ('<td> </td>')
    else:
      output += ('<td><a href="%s?method=show-job&jobsub_id=%s">'
          '%d</a></td>' % 
          (uriPrefix, storageRow['jobsub_id'], int(storageRow['read_result'])))

    if int(storageRow['write_result']) == 255:
      output += ('<td> </td></tr>')
    else:
      output += ('<td><a href="%s?method=show-job&jobsub_id=%s">'
        '%d</a></td>' % 
        (uriPrefix, storageRow['jobsub_id'], int(storageRow['write_result'])))

  output += ("</table>")

  output += footer()
  return output

def showStorage(uriPrefix, cgiValues):
      
  try:
    rseName = cgiValues["rse_name"]
  except:
    return errorPage(uriPrefix, "rse_name must be given")
    
  if not justin.db.stringIsSite(rseName):
    return errorPage(uriPrefix, "Invalid RSE name!")
        
  output = header(uriPrefix, "justIN: Storage " + rseName)

  output += ("<h1>Storage %s</h1>" % rseName)
  
  query = ('SELECT occupancy,rse_id,'
           'rucio_write,justin_write,(rucio_write AND justin_write) AS has_write,'
           'rucio_read,justin_read,(rucio_read AND justin_read) AS has_read,'
           'deterministic_rse,write_protocol '
           'FROM storages WHERE rse_name="%s"' % rseName)

  justin.db.cur.execute(query)
  storageRow = justin.db.cur.fetchone()

  output += ('<table>')
  
  output += ('<tr><td>RSE name</td><td>%s</td></tr>' % rseName)
  
  output += ('<tr><td>Occupancy</td><td>%.2f</td></tr>' % storageRow['occupancy'])

  output += ('<tr><td>Read</td><td>%s (Rucio=%s, justIN=%s)</td></tr>' 
        % (bool(storageRow['has_read']), 
           bool(storageRow['rucio_read']), 
           bool(storageRow['justin_read'])))

  output += ('<tr><td>Write</td><td>%s (Rucio=%s, justIN=%s)</td></tr>' 
        % (bool(storageRow['has_write']), 
           bool(storageRow['rucio_write']), 
           bool(storageRow['justin_write'])))

  output += ('<tr><td>Deterministic</td><td>%s</td></tr>' 
        % bool(storageRow['deterministic_rse']))
  output += ('<tr><td>Write protocol</td><td>%s</td></tr>' 
        % storageRow['write_protocol'])

  output += ('</table>')

  output += ("<h2>Sites by distance</h2>")

  query = ('SELECT site_name,distance,enabled,'
           'read_result,write_result,jobsub_id '
           'FROM sites '
           'LEFT JOIN sites_storages ON sites_storages.site_id=sites.site_id '
           'LEFT JOIN jobs ON sites_storages.justin_job_id=jobs.justin_job_id '
           'WHERE rse_id=%d '
           'ORDER BY distance,site_name' % storageRow['rse_id'])

  justin.db.cur.execute(query)
  siteRows = justin.db.cur.fetchall()

  output += ("<p>Test values are xrdcp read and rucio write exit codes for jobs "
        "at each site contacting each RSE. 0 = success.</p>")

  output += ('<table>')
  
  output += ('<tr>'
        '<th>Site name</th>'
        '<th>Distance</th>'
        '<th>Enabled</th>'
        '<th>Read test</th>'
        '<th>Write test</th>'
        '</tr>')
  
  for siteRow in siteRows:  
    output += ('<tr>'
          '<td><a href="%s?method=show-site&site_name=%s">%s</a></td>'
          '<td>%d</td>'
          '<td>%s</td>'
          % (uriPrefix,
             siteRow['site_name'], siteRow['site_name'],
             int(siteRow['distance']),
             bool(siteRow['enabled'])
            )
         )    

    if int(siteRow['read_result']) == 255:
      output += ('<td> </td>')
    else:
      output += ('<td><a href="%s?method=show-job&jobsub_id=%s">'
            '%d</a></td>' % 
            (uriPrefix, siteRow['jobsub_id'], int(siteRow['read_result'])))

    if int(siteRow['write_result']) == 255:
      output += ('<td> </td></tr>')
    else:
      output += ('<td><a href="%s?method=show-job&jobsub_id=%s">'
            '%d</a></td>' % 
            (uriPrefix, siteRow['jobsub_id'], int(siteRow['write_result'])))

  output += ("</table>")

  output += footer()
  return output

def listEvents(uriPrefix, cgiValues, pageNumber, pageLength):

  whereList = []
  queryList = ''

  try:
    jobsubID = cgiValues["jobsub_id"]
  except:
    pass
  else:
    if jobsubID:
      whereList.append('jobsub_id="%s"' % jobsubID)
      queryList += '&jobsub_id=' + jobsubID

  if whereList:
    whereString = ' WHERE ' + 'AND'.join(whereList)
  else:
    whereString = ''
    
  output = header(uriPrefix, "justIN: Events")

  output += ("<h1>Events</h1>")
  
  query = ('SELECT event_id,event_type_id,events.request_id,events.stage_id,'
           'file_did,jobsub_id,site_name,rse_name,event_time '
           'FROM events '
           'LEFT JOIN files ON events.file_id=files.file_id '
           'LEFT JOIN jobs ON events.justin_job_id=jobs.justin_job_id '
           'LEFT JOIN sites ON events.site_id=sites.site_id '
           'LEFT JOIN storages ON events.rse_id=storages.rse_id '
           '%s '
           'ORDER BY event_id DESC LIMIT %d,%d' % 
           (whereString, pageNumber * pageLength, pageLength + 1))

  justin.db.cur.execute(query)
  eventsRows = justin.db.cur.fetchall()

  output += makePager(uriPrefix, pageNumber, pageLength, len(eventsRows),
             '%s?method=list-events&page_number=%d&page_length=%d'
             + queryList)

  output += (
"""<p><table>
<tr>
<th>Event</th><th>Type</th><th>Time</th>
<th>Request</th><th>Stage</th>
<th>File DID</th>
<th>Jobsub ID</th>
<th>Site</th>
<th>RSE</th>
</tr>""")

  for eventRow in eventsRows[:pageLength]:
    output += ('<tr><td>%d</td><td>%s</td><td>%s</td>' %
           (eventRow['event_id'], 
            justin.db.eventTypes[eventRow['event_type_id']][0],
            eventRow['event_time']
          )          
         )

    if eventRow['request_id']: 
      output += ('<td><a href="%s?method=show-request&request_id=%d">'
            '%d</a></td>' 
            % (uriPrefix,
               eventRow['request_id'], 
               eventRow['request_id']))
    else:
      output += ('<td>&nbsp;</td>')
         
    if eventRow['stage_id']: 
      output += ('<td><a href="%s?method=show-stage&request_id=%d'
            '&stage_id=%d">%d</a></td>' 
            % (uriPrefix,
               eventRow['request_id'], 
               eventRow['stage_id'], 
               eventRow['stage_id']))
    else:
      output += ('<td>&nbsp;</td>')
         
    if eventRow['file_did']:
      output += ('<td><a href="%s?method=show-file&request_id=%d'
            '&stage_id=%d&file_did=%s">%s</td>' 
            % (uriPrefix,
               eventRow['request_id'], 
               eventRow['stage_id'], 
               eventRow['file_did'], 
               eventRow['file_did']))
    else:
      output += ('<td>&nbsp;</td>')
         
    if eventRow['jobsub_id']: 
      output += ('<td><a href="%s?method=show-job&jobsub_id=%s">%s</a></td>'
            % (uriPrefix, eventRow['jobsub_id'], eventRow['jobsub_id']))
    else:
      output += ('<td>&nbsp;</td>')
         
    if eventRow['site_name']: 
      output += ('<td><a href="%s?method=show-site&site_name=%s">%s</a></td>'
            % (uriPrefix, eventRow['site_name'], eventRow['site_name']))
    else:
      output += ('<td>&nbsp;</td>')
         
    if eventRow['rse_name']: 
      output += ('<td><a href="%s?method=show-storage&rse_name=%s">%s</a></td>'
            % (uriPrefix, eventRow['rse_name'], eventRow['rse_name']))
    else:
      output += ('<td>&nbsp;</td>')

    output += ('</tr>')
               
  output += ("</table>")
  
  output += makePager(uriPrefix, pageNumber, pageLength, len(eventsRows),
             '%s?method=list-events&page_number=%d&page_length=%d'
             + queryList)

  output += footer()
  return output

def awtResults(uriPrefix, cgiValues):
              
  output = header(uriPrefix, "justIN: Automated Workflow Tests")

  output += ("<h1>Automated Workflow Tests</h1>")

  output += ("<p>Values are xrdcp read and rucio write exit codes for jobs at "
        "each site contacting each RSE. 0 = success. Enabled sites and "
        "storages allowed for output are in bold.</p>")

  query = ('SELECT site_name,enabled,'
           'UNIX_TIMESTAMP(last_awt_time) AS lwt,jobs.jobsub_id '
           'FROM sites '
           'LEFT JOIN jobs ON jobs.justin_job_id=sites.last_awt_job_id '
           'ORDER by site_name')

  sitesRows = justin.select(query)
  siteNames        = []
  enabledSiteNames = []
  lastJobTimes     = {}
  lastJobIDs       = {}
  for siteRow in sitesRows:
    siteNames.append(siteRow['site_name'])
    lastJobTimes[siteRow['site_name']] = int(siteRow['lwt'])

    if siteRow['jobsub_id']:
      lastJobIDs[siteRow['site_name']] = siteRow['jobsub_id']

    if siteRow['enabled']:
      enabledSiteNames.append(siteRow['site_name'])

  storagesRows = justin.select('SELECT rse_name,'
                               '(rucio_write AND justin_write) AS has_write '
                               'FROM storages '
                               'WHERE rse_name <> "MONTECARLO" '
                               'ORDER by rse_name')
  rseNames       = []
  outputRseNames = []
  for storageRow in storagesRows:
    rseNames.append(storageRow['rse_name'])
    if storageRow['has_write']:
      outputRseNames.append(storageRow['rse_name'])

  sitesStoragesMatrix = {}

  for siteName in siteNames:
    sitesStoragesMatrix[siteName] = {}
    for rseName in rseNames:
      sitesStoragesMatrix[siteName][rseName] = []
 
  resultsRows = justin.select(
           'SELECT site_name,rse_name,read_result,write_result,jobsub_id '
           'FROM sites_storages '
           'LEFT JOIN sites ON sites_storages.site_id=sites.site_id '
           'LEFT JOIN storages ON sites_storages.rse_id=storages.rse_id '
           'LEFT JOIN jobs ON sites_storages.justin_job_id=jobs.justin_job_id '
           'WHERE rse_name <> "MONTECARLO"')

  # Put the results in nested dictionaries
  for results in resultsRows:
    sitesStoragesMatrix[results['site_name']][results['rse_name']] = \
      [results['read_result'], results['write_result'], results['jobsub_id']]

  output += ('<table>')

  # List of storages
  output += ('<tr><td> </td>'
        '<td><div style="writing-mode: vertical-lr">'
        'Last&nbsp;AWT&nbsp;job</div></td>')
  
  for rseName in rseNames:  
    if rseName in outputRseNames:
      cellType = 'th'
    else:
      cellType = 'td'
    output += ('<%s><div style="writing-mode: vertical-lr">'
          '<a href="%s?method=show-storage&rse_name=%s">%s</a>'
          '</div></%s>' % (cellType, uriPrefix, rseName, rseName, cellType))

  output += ('<td> </td></tr>')

  # Go through the sites, Row by row 

  for siteName in siteNames:
    if siteName in enabledSiteNames:
      cellType = 'th'
    else:
      cellType = 'td'
    
    output += ('<tr><%s><a href="%s?method=show-site&site_name=%s">%s'
          '</a></%s>' % 
          (cellType, uriPrefix, siteName, siteName, cellType))

    if lastJobTimes[siteName] == 0:
      output += ('<td> </td>')
    elif siteName in lastJobIDs:
      output += ('<td style="text-align: right">'
                 '<a href="%s?method=show-job&jobsub_id=%s">%s</a></td>'
                 % (uriPrefix, 
                    lastJobIDs[siteName],
                    daysHoursMinutes(int(time.time()) - lastJobTimes[siteName])
                   ))
    else:
      output += ('<td style="text-align: right">%s</td>' % 
            daysHoursMinutes(int(time.time()) - lastJobTimes[siteName]))
  
    for rseName in rseNames:
      (readResult, writeResult, jobsubID) = \
                      sitesStoragesMatrix[siteName][rseName]

      if readResult == 255 and writeResult == 255:
        output += ('<td>&nbsp; &nbsp;</td>')
        
      else:
        if readResult == 255:
          s = 'Read=?'
        else:
          s = 'Read=%d' % readResult

        if writeResult == 255:
          s += ' Write=?'
        else:
          s += ' Write=%d' % writeResult

        if (readResult and readResult != 255) or \
           (writeResult and writeResult != 255):
          boxColor = 'red'
        elif readResult == 0 and writeResult == 0:
          boxColor = 'green'
        else:
          boxColor = 'white'
          
        output += ('<td class="tooltip" style="background-color: %s">'
                   '<a href="%s?method=show-job&jobsub_id=%s">'
                   % (boxColor, uriPrefix, jobsubID))

        output += '<span class="tooltiptext">%s</span>' % s

        output += '</a></td>'

    output += ('<%s><a href="%s?method=show-site&site_name=%s">%s'
          '</a></%s></tr>' % 
          (cellType, uriPrefix, siteName, siteName, cellType))

  # List of storages
  output += ('<tr><td> </td>'
        '<td><div style="writing-mode: vertical-lr">'
        'Last&nbsp;AWT&nbsp;job</div></td>')
  
  for rseName in rseNames:
    if rseName in outputRseNames:
      cellType = 'th'
    else:
      cellType = 'td'
    output += ('<%s><div style="writing-mode: vertical-lr">'
          '<a href="%s?method=show-storage&rse_name=%s">%s</a>'
          '</div></%s>' % (cellType, uriPrefix, rseName, rseName, cellType))

  output += '<td> </td></tr>'
  output += "</table>"
  output += footer()
  return output

#
# Entry point from mod_wsgi
#
def application(environ, startResponse):

  justin.db.wsgiCallsCount += 1
  print('Call count (pid=%d): %d' % (os.getpid(), justin.db.wsgiCallsCount), 
        file=sys.stderr)

  try:
    # True should provoke a reconnection attempt.
    # See https://github.com/farcepest/MySQLdb1/blob/master/_mysql.c#L1978
    # (Not sure if there is a more authoritative source for this API.)
    justin.db.conn.ping(True)
  except Exception as e:
    message = 'DB connection lost and cannot reconnect: ' + str(e)

    print('justin-wsgi-dashboard fails with 500 Internal Server Error (%s)' % 
          str(message), file=sys.stderr)

    startResponse('500 Internal Server Error',
                  [('Content-type',   'text/plain'),
                   ('Content-length', str(len(message)))
                  ])

    return [message.encode('UTF-8')]

  # Avoid leftovers from partial, failed transactions in this instance
  justin.db.conn.rollback()

  try:
    uriPrefix = '/' + environ['REQUEST_URI'].split('/')[1] + '/'
  except:
    uriPrefix = '/dashboard/'

  method     = None 
  pageNumber = 0
  pageLength = 30
  cgiValues  = { }
  
  try:
    rawValues = urllib.parse.parse_qs(environ['QUERY_STRING'])
    for i in rawValues:
      cgiValues[str(i)] = str(rawValues[i][0])
  except:
    pass # Use defaults: produces a method error page at the end
  else:
    try:
      method = cgiValues['method']
    except:
      pass # Use default

    try:
      pageNumber = int(cgiValues['page_number'])
    except:
      pass # Use default

    try:
      pageLength = int(cgiValues['page_length'])
    except:
      pass # Use default

  if method is None:
    output = mainPage(uriPrefix)
  
  elif method == "list-jobscripts":
    output = listJobscripts(uriPrefix, cgiValues, pageNumber, pageLength)

  elif method == "show-jobscript":
    output = showJobscript(uriPrefix, cgiValues)

  elif method == "list-requests":
    output = listRequests(uriPrefix, cgiValues, pageNumber, pageLength)

  elif method == "show-request":
    output = showRequest(uriPrefix, cgiValues)

  elif method == "show-stage":
    output = showStage(uriPrefix, cgiValues)

  elif method == "list-files":
    output = listFiles(uriPrefix, cgiValues, pageNumber, pageLength)

  elif method == "show-file":
    output = showFile(uriPrefix, cgiValues)

  elif method == "show-job":
    output = showJob(uriPrefix, cgiValues)

  elif method == "list-jobs":
    output = listJobs(uriPrefix, cgiValues, pageNumber, pageLength)

  elif method == "list-sites":
    output = listSites(uriPrefix, cgiValues)

  elif method == "list-storages":
    output = listStorages(uriPrefix, cgiValues)

  elif method == "show-site":
    output = showSite(uriPrefix, cgiValues)

  elif method == "show-storage":
    output = showStorage(uriPrefix, cgiValues)

  elif method == "list-events":
    output = listEvents(uriPrefix, cgiValues, pageNumber, pageLength)

  elif method == "awt-results":
    output = awtResults(uriPrefix, cgiValues)
  
  else:
    output = 'Method not recognised: %s' % str(method)
    startResponse('400 Bad Request',
                [('Content-type',   'text/plain'),
                 ('Content-length', str(len(output)))
                ])
  
    return [output.encode('UTF-8')]

  # Valid method was found, so return the string it output
  startResponse('200 OK',
                [('Content-type',   'text/html'),
                 ('Content-length', str(len(output)))
                ])

  return [output.encode('UTF-8')]
