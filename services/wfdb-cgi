#!/usr/bin/python3
#
#  wfdb-cgi - Workflow Database CGI service
#
#  Andrew McNab, University of Manchester.
#  Copyright (c) 2013-22. All rights reserved.
#
#  Redistribution and use in source and binary forms, with or
#  without modification, are permitted provided that the following
#  conditions are met:
#
#    o Redistributions of source code must retain the above
#      copyright notice, this list of conditions and the following
#      disclaimer. 
#    o Redistributions in binary form must reproduce the above
#      copyright notice, this list of conditions and the following
#      disclaimer in the documentation and/or other materials
#      provided with the distribution. 
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
#  CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
#  INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
#  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
#  BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
#  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
#  TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
#  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
#  ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
#  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
#  OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#  POSSIBILITY OF SUCH DAMAGE.
#

#  This CGI script must be run from an Apache httpd server with
#  X.509 proxy certificates enabled. On a systemd system (like 
#  CentOS 7) you need to enable this in OpenSSL inside mod_ssl
#  by adding this line to /usr/lib/systemd/system/httpd.service
#  in the [Service] section:
#
#  Environment=OPENSSL_ALLOW_PROXY_CERTS=1

import os
import io
import re
import sys
import time
import uuid 
import json
import string
import MySQLdb

# wfs/conf.py must define these variables in a way that is both
# valid Python and valid Bash!
#
# mysqlUser='username'
# mysqlPassword='PAsSWoRd'
#
import wfs

def httpError(code, message):
  print('Status: ' + code)
  print('Content-Type: text/plain')
  print()
  if message:
    print(message)
  sys.exit(0)
  
def doQuery(query):

  try:
    wfs.db.cur.execute(query)
    return wfs.db.cur.fetchall()
  except Exception as e:
    httpError('500 Internal Server Error', 'Error reading workflow database ' + str(e))

def showRequestsCmd(jsonDict):

  try:
    requestID = int(jsonDict['request_id'])
  except:
    requestID    = None
    requestFilter = ""
  else:
    requestFilter = "WHERE request_id=" + str(requestID)

  rows = doQuery("SELECT * FROM requests %s ORDER BY created" % requestFilter)

  print('Status: 200 OK')
  print('Content-Type: text/plain')
  print() 

  for row in rows:
    print("%5d %-9s %s %s %s" % 
          (row['request_id'], row['state'], row['created'], row['name'],
           row['mql']))
   
  sys.exit(0)

def showStagesCmd(jsonDict):

  try:
    requestID = int(jsonDict['request_id'])
  except:
    httpError('400 Bad Request', 'Request ID not given')

  try:
    stageID = int(jsonDict['stage_id'])
  except:
    stageID    = None
    stageFilter = ""
  else:
    stageFilter = "AND stage_id=" + str(stageID)

  rows = doQuery("SELECT * FROM stages WHERE request_id=%d %s "
                 "ORDER BY request_id,stage_id" 
                 % (requestID, stageFilter))

  print('Status: 200 OK')
  print('Content-Type: text/plain')
  print() 

  for row in rows:
    print("%5d %2d %d %d %d %s" % 
          (row['request_id'], 
           row['stage_id'], 
           row['processors'],
           row['wall_seconds'],
           row['rss_bytes'],
           str(row['any_location']),
          )
         )
   
  sys.exit(0)

def showBootstrapCmd(jsonDict):

  try:
    requestID = int(jsonDict['request_id'])
  except:
    httpError('400 Bad Request', 'Request ID not given')

  try:
    stageID = int(jsonDict['stage_id'])
  except:
    httpError('400 Bad Request', 'Stage ID not given')

  rows = doQuery("SELECT * FROM bootstraps "
                 "WHERE request_id=%d AND stage_id=%d"
                 % (requestID, stageID))

  print('Status: 200 OK')
  print('Content-Type: text/plain')
  print() 

  print(rows[0]['bootstrap'])
   
  sys.exit(0)

def showStageOutputsCmd(jsonDict):

  try:
    requestID = int(jsonDict['request_id'])
  except:
    httpError('400 Bad Request', 'Request ID not given')

  try:
    stageID = int(jsonDict['stage_id'])
  except:
    httpError('400 Bad Request', 'Stage ID not given')

  rows = doQuery("SELECT * FROM stages_outputs "
                 "WHERE request_id=%d AND stage_id=%d "
                 "ORDER BY dataset,file_scope,file_pattern" 
                 % (requestID, stageID))

  print('Status: 200 OK')
  print('Content-Type: text/plain')
  print() 

  for row in rows:
    nextStage = '(next)' if row['for_next_stage'] else '(    )'
    print("%s %s %s %s" % (nextStage,
                        row['dataset'],
                        row['file_scope'],
                        row['file_pattern']))
   
  sys.exit(0)

def showFilesCmd(jsonDict):

  try:
    requestID = int(jsonDict['request_id'])
  except:
    requestID = None

  try:
    stageID = int(jsonDict['stage_id'])
  except:
    stageID = None

  try:
    fileDID = jsonDict['file_did']
  except:
    fileDID = None

  if fileDID is None and requestID is None:
    httpError('400 Bad Request', 'Either file DID or request ID must be given')

  if fileDID and not requestID:
    filter = "file_did='%s'" % fileDID
  elif requestID:
    filter = "request_id=%d" % requestID
    
    if stageID:
      filter += " AND stage_id=%d" % stageID
    
    if fileDID:
      filter += " AND file_did='%s'" % fileDID

  rows = doQuery("SELECT * FROM files WHERE " + filter +
                 " ORDER BY request_id,stage_id,file_did")

  print('Status: 200 OK')
  print('Content-Type: text/plain')
  print() 

  for row in rows:
    print("%5d %2d %-11s %s" % 
          (row['request_id'],
           row['stage_id'],
           row['state'],
           row['file_did'],
          )
         )
   
  sys.exit(0)

def showReplicasCmd(jsonDict):

  try:
    requestID = int(jsonDict['request_id'])
  except:
    requestID = None

  try:
    stageID = int(jsonDict['stage_id'])
  except:
    stageID = None

  if 'file_did' in jsonDict and jsonDict['file_did']:
    fileDID = jsonDict['file_did']
  else:
    fileDID = None

  try:
    rseName = re.sub('[^A-Za-z0-9._-]+', '', str(jsonDict['rse_name'][0]))
  except:
    rseName = None
    
  if fileDID is None and requestID is None:
    httpError('400 Bad Request', 'Either file DID or request ID must be given')

  if fileDID and not requestID:
    filter = "files.file_did='%s'" % fileDID
  elif requestID:
    filter = "files.request_id=%d" % requestID
    
    if stageID:
      filter += " AND files.stage_id=%d" % stageID
    
    if fileDID:
      filter += " AND files.file_did='%s'" % fileDID

  if rseName:
    filter += " AND storages.rse_name='%s'" % rseName

  rows = doQuery("SELECT * FROM replicas "
                 "LEFT JOIN storages ON replicas.rse_id=storages.rse_id "
                 "LEFT JOIN files ON replicas.file_id=files.file_id "
                 "WHERE " + filter + " ORDER BY "
                 "files.request_id,files.stage_id,files.file_did")

  print('Status: 200 OK')
  print('Content-Type: text/plain')
  print() 

  for row in rows:
    print("%5d %2d %-11s %-15s %s" % 
          (row['request_id'],
           row['stage_id'],
           row['state'],
           row['rse_name'],           
           row['file_did']
          )
         )
   
  sys.exit(0)

def showStoragesCmd(jsonDict):

  try:
    rseName = re.sub('[^A-Za-z0-9._-]+', '', str(jsonDict['rse_name'][0]))
    filter  = "WHERE rse_name='%s'" % rseName
  except:
    filter = ""

  rows = doQuery("SELECT * FROM storages " + filter + 
                 " ORDER BY rse_name,occupancy")

  print('Status: 200 OK')
  print('Content-Type: text/plain')
  print() 

  for row in rows:
    availabilityList = ['-', '-', '-']

    if row['rse_read']:
      availabilityList[0] = 'R'
  
    if row['rse_write']:
      availabilityList[1] = 'W'
  
    if row['rse_delete']:
      availabilityList[2] = 'D'  
  
    print("%-25s %.2f  %s" % 
          (row['rse_name'], row['occupancy'], ''.join(availabilityList)))
   
  sys.exit(0)

def showSitesStoragesCmd(jsonDict):

  if 'site_name' in jsonDict and jsonDict['site_name']:
    siteName = jsonDict['site_name']
  else:
    siteName = None

  try:
    rseName = re.sub('[^A-Za-z0-9._-]+', '', str(jsonDict['rse_name'][0]))
  except:
    rseName = None
    
  if siteName and rseName:
    filter = "WHERE site_name='%s' AND rse_name='%s'" % (siteName, rseName)
  elif siteName:
    filter = "WHERE site_name='%s'" % siteName
  elif rseName:
    filter = "WHERE rse_name='%s'" % rseName
  else:
    filter = ""

  rows = doQuery("SELECT * FROM sites_storages " 
                 "LEFT JOIN storages ON sites_storages.rse_id=storages.rse_id "
                 "LEFT JOIN sites ON sites_storages.site_id=sites.site_id "
                 + filter +          
                 " ORDER BY site_name,rse_name")

  print('Status: 200 OK')
  print('Content-Type: text/plain')
  print() 

  for row in rows:
    print("%-20s %-15s %s" % 
          (row['site_name'], row['rse_name'], row['location']))
   
  sys.exit(0)

def createRequestCmd(jsonDict, userID):

  if 'name' in jsonDict and jsonDict['name']:
    name = jsonDict['name']
  else:
    name = str(int(time.time()))

  if 'mql' in jsonDict and jsonDict['mql']:
    mql = jsonDict['mql']
  else:
    mql = ''

  if 'monte_carlo' in jsonDict and jsonDict['monte_carlo']:
    try:
      mql = 'monte-carlo %d' % int(jsonDict['monte_carlo'])
    except:
      httpError('400 Bad Request', 
                'Monte Carlo option requires an integer count')

  if 'refind_days' in jsonDict and jsonDict['refind_days']:
    try:
      refindSeconds = int(jsonDict['refind_days'] * 86400)
    except:
      httpError('400 Bad Request', '--refind-days requires a numeric argument')
  else:
    refindSeconds = 0

  if 'refind_limit_days' in jsonDict and jsonDict['refind_limit_days']:
    try:
      refindLimitSeconds = int(jsonDict['refind_limit_days'] * 86400)
    except:
      httpError('400 Bad Request', 
                '--refind-limit-days requires a numeric argument')
  else:
    refindLimitSeconds = 0

  if refindSeconds > 0 and refindLimitSeconds <= 0:
    httpError('400 Bad Request', 
              '--refind-limit-days must be given if --refind-days is given')
        
  doQuery('INSERT INTO requests SET created=NOW(),'
          'name="%s",'
          'mql="%s",'
          'submitter_id=%d,'
          'refind_seconds=%d,'
          'refind_end_time=DATE_ADD(NOW(),INTERVAL %d SECOND)' %
          (name,
           mql,
           userID,
           refindSeconds,
           refindLimitSeconds))

  wfs.db.conn.commit()

  httpError('200 OK', str(wfs.db.cur.lastrowid))

def quickRequestCmd(jsonDict, userID):

  if 'name' in jsonDict and jsonDict['name']:
    name = jsonDict['name']
  else:
    name = str(int(time.time()))

  if 'mql' in jsonDict and jsonDict['mql']:
    mql = jsonDict['mql']
  else:
    mql = ''

  try:
    anyLocation = bool(jsonDict['any_location'])
  except:
    anyLocation = False

  if 'monte_carlo' in jsonDict and jsonDict['monte_carlo']:
    try:
      mql = 'monte-carlo %d' % int(jsonDict['monte_carlo'])
      anyLocation = True
    except:
      httpError('400 Bad Request', 'Monte Carlo option requires an integer count')
      
  if 'refind_days' in jsonDict and jsonDict['refind_days']:
    try:
      refindSeconds = int(jsonDict['refind_days'] * 86400)
    except:
      httpError('400 Bad Request', '--refind-days requires a numeric argument')
  else:
    refindSeconds = 0

  if 'refind_limit_days' in jsonDict and jsonDict['refind_limit_days']:
    try:
      refindLimitSeconds = int(jsonDict['refind_limit_days'] * 86400)
    except:
      httpError('400 Bad Request', 
                '--refind-limit-days requires a numeric argument')
  else:
    refindLimitSeconds = 0

  if refindSeconds > 0 and refindLimitSeconds <= 0:
    httpError('400 Bad Request', 
              '--refind-limit-days must be given if --refind-days is given')
        
  doQuery('INSERT INTO requests SET created=NOW(),'
          'state="running",'
          'name="%s",'
          'mql="%s",'
          'submitter_id=%d,'
          'refind_seconds=%d,'
          'refind_end_time=DATE_ADD(NOW(),INTERVAL %d SECOND)' %
          (name,
           mql,
           userID,
           refindSeconds,
           refindLimitSeconds))

  requestID = wfs.db.cur.lastrowid

  try:
    processors = int(jsonDict['processors'])
  except:
    processors = 1

  try:
    wallSeconds = int(jsonDict['wall_seconds'])
  except:
    wallSeconds = 80000

  try:
    rssBytes = int(jsonDict['rss_mb']) * 1024 * 1024
  except:
    rssBytes = 2048 * 1024 * 1024

  if 'file' in jsonDict and jsonDict['file']:
    bootstrap = jsonDict['file']
  else:
    httpError('400 Bad Request', 'Upload file is required')

  doQuery("INSERT INTO stages SET "
          "request_id=%d,"
          "stage_id=1,"
          "processors=%d,"
          "wall_seconds=%d,"
          "rss_bytes=%d,"
          "any_location=%s" % 
          (requestID, processors,
           wallSeconds, rssBytes, str(anyLocation)))
          
  doQuery('INSERT INTO bootstraps SET '
          'request_id=%d,'
          'stage_id=1,'
          'bootstrap="%s"' % 
          (requestID, 
           bootstrap.replace('\\','\\\\').replace('"','\\"')))

  if jsonDict['output_pattern']:
    for i in jsonDict['output_pattern']:     
      try:
       (dataset, scope, pattern) = i.split('::')
      except:
       continue
    
      doQuery('INSERT INTO stages_outputs SET '
              'request_id=%d,'
              'stage_id=1,'
              'dataset="%s",'
              'file_scope="%s",'
              'file_pattern="%s",'
              'for_next_stage=FALSE' % 
              (requestID, 
               dataset.replace('\\','\\\\').replace('"','\\"'),
               scope.replace('\\','\\\\').replace('"','\\"'),
               pattern.replace('\\','\\\\').replace('"','\\"')
              )
             )

  if jsonDict['output_rse']:
    for rseName in jsonDict['output_rse']:
    
      if not wfs.db.stringIsSite(rseName):
        httpError('400 Bad Request', 'Invalid RSE name')
        
      doQuery('INSERT INTO stages_output_storages SET '
              'request_id=%d,'
              'stage_id=1,'
              'rse_id=(SELECT rse_id FROM storages WHERE rse_name="%s")' % 
              (requestID, rseName))

  # Only commit if everything went ok
  wfs.db.conn.commit()

  httpError('200 OK', str(requestID))

def submitRequestCmd(jsonDict):

  try:
    requestID = int(jsonDict['request_id'])
  except:
    httpError('400 Bad Request', 'Request ID must be given')

# change to handle errors properly eg no such request
# and state not draft
  doQuery("UPDATE requests SET state='submitted',submitted=NOW() "
          "WHERE request_id=%d AND state='draft'" % requestID)

  wfs.db.conn.commit()

  httpError('200 OK', None)

def startRequestCmd(jsonDict):

  try:
    requestID = int(jsonDict['request_id'])
  except:
    httpError('400 Bad Request', 'Request ID must be given')

# change to handle errors properly eg no such request
# or not in draft or submitted states
  doQuery("UPDATE requests SET state='running',started=NOW() "
          "WHERE request_id=%d AND (state='draft' OR state='submitted')"
          % requestID)

  wfs.db.conn.commit()

  httpError('200 OK', None)

def restartRequestCmd(jsonDict):

  try:
    requestID = int(jsonDict['request_id'])
  except:
    httpError('400 Bad Request', 'Request ID must be given')

# change to handle errors properly eg no such request
  doQuery("UPDATE requests SET state='running' WHERE request_id=%d "
          "AND state='paused'" % requestID)

  wfs.db.conn.commit()

  httpError('200 OK', None)

def pauseRequestCmd(jsonDict):

  try:
    requestID = int(jsonDict['request_id'])
  except:
    httpError('400 Bad Request', 'Request ID must be given')

# change to handle errors properly eg no such request
  doQuery("UPDATE requests SET state='paused' WHERE request_id=%d "
          "AND state='running'" % requestID)

  wfs.db.conn.commit()

  httpError('200 OK', None)

def createStageCmd(jsonDict):

  try:
    requestID = int(jsonDict['request_id'])
  except:
    httpError('400 Bad Request', 'Request ID must be given')

  try:
    stageID = int(jsonDict['stage_id'])
  except:
    httpError('400 Bad Request', 'Stage ID must be given')

  try:
    processors = int(jsonDict['processors'])
  except:
    processors = 1

  try:
    wallSeconds = int(jsonDict['wall_seconds'])
  except:
    httpError('400 Bad Request', 'Wall seconds must be given')

  try:
    rssBytes = int(jsonDict['rss_mb']) * 1024 * 1024
  except:
    httpError('400 Bad Request', 'RSS MB must be given')

  try:
    anyLocation = bool(jsonDict['any_location'])
  except:
    anyLocation = False

  if 'file' in jsonDict and jsonDict['file']:
    bootstrap = jsonDict['file']
  else:
    httpError('400 Bad Request', 'Upload file is required')

  doQuery("INSERT INTO stages SET "
          "request_id=%d,"
          "stage_id=%d,"
          "processors=%d,"
          "wall_seconds=%d,"
          "rss_bytes=%d,"
          "any_location=%s" % 
          (requestID, stageID, processors,
           wallSeconds, rssBytes, str(anyLocation)))
          
  doQuery('INSERT INTO bootstraps SET '
          'request_id=%d,'
          'stage_id=%d,'
          'bootstrap="%s"' % 
          (requestID, stageID, 
           bootstrap.replace('\\','\\\\').replace('"','\\"')))

  if jsonDict['output_pattern']:
    for i in jsonDict['output_pattern']:
    
      try:
       (dataset, scope, pattern) = i.split('::')
      except:
       continue
    
      doQuery('INSERT INTO stages_outputs SET '
              'request_id=%d,'
              'stage_id=%d,'
              'dataset="%s",'
              'file_scope="%s",'
              'file_pattern="%s",'
              'for_next_stage=FALSE' % 
              (requestID, stageID,
               dataset.replace('\\','\\\\').replace('"','\\"'),
               scope.replace('\\','\\\\').replace('"','\\"'),
               pattern.replace('\\','\\\\').replace('"','\\"')
              )
             )

  if jsonDict['output_pattern_next_stage']:
    for i in jsonDict['output_pattern_next_stage']:
    
      try:
       (dataset, scope, pattern) = i.split('::')
      except:
       continue
    
      doQuery('INSERT INTO stages_outputs SET '
              'request_id=%d,'
              'stage_id=%d,'
              'dataset="%s",'
              'file_scope="%s",'
              'file_pattern="%s",'
              'for_next_stage=TRUE' % 
              (requestID, stageID,
               dataset.replace('\\','\\\\').replace('"','\\"'),
               scope.replace('\\','\\\\').replace('"','\\"'),
               pattern.replace('\\','\\\\').replace('"','\\"')
              )
             )
          
  if jsonDict['output_rse']:
    for rseName in jsonDict['output_rse']:
    
      if not wfs.db.stringIsSite(rseName):
        httpError('400 Bad Request', 'Invalid RSE name')
        
      doQuery('INSERT INTO stages_output_storages SET '
              'request_id=%d,'
              'stage_id=%d,'
              'rse_id=(SELECT rse_id FROM storages WHERE rse_name="%s")'
              (requestID, stageID, rseName))

  wfs.db.conn.commit()

  httpError('200 OK', None)

def addFileCmd(jsonDict):

  try:
    requestID = int(jsonDict['request_id'])
  except:
    httpError('400 Bad Request', 'Request ID must be given')

  try:
    stageID = int(jsonDict['stage_id'])
  except:
    stageID = 1

  try:
    fileDID = str(jsonDict['file_did'])
  except:
    fileDID = None

  if fileDID is None:
    httpError('400 Bad Request', 'File DID must be given')

  rseList = []

  try:
    for rseName in jsonDict['rse_name']:
      rseList.append(re.sub('[^A-Za-z0-9._-]+', '', str(rseName)))
  except:
    rseList = []
    
  if len(rseList) == 0:
    httpError('400 Bad Request', 'At least one RSE name must be given')
  
  doQuery("INSERT INTO files SET "
          "request_id=%d,"
          "stage_id=%d,"
          "file_did='%s',"
          "state='unallocated'" % 
          (requestID, stageID, fileDID))

  fileID = wfs.db.cur.lastrowid

  for rseName in rseList:
    doQuery("INSERT INTO replicas SET "
            "rse_id=(SELECT rse_id FROM storages WHERE rse_name='%s'),"
            "file_id=%d" % 
            (rseName, fileID))
              
  wfs.db.conn.commit()

  httpError('200 OK', None)

def showJobsCmd(jsonDict):

  try:
    jobsubID = jsonDict['jobsub_id']
  except:
    jobsubID = None
  
  try:
    requestID = int(jsonDict['request_id'])
  except:
    requestID = None
  
  try:
    stageID = int(jsonDict['stage_id'])
  except:
    stageID = 1
  
  if jobsubID:
    filter = "WHERE jobsub_id='%s'" % jobsubID 
  elif requestID:
    filter = "WHERE request_id=%d AND stage_id=%d" % (requestID, stageID)
  else:
    httpError('400 Bad Request', 'Either Jobsub ID or Request ID must be given')

  if jsonDict['state']:
    try:  
      filter += (' AND allocation_state="' +
                 re.sub('[^a-z]+', '', str(jsonDict['state'])) +
                 '"'
                )
    except:
      pass

  rows = doQuery("SELECT jobsub_id,request_id,stage_id,allocation_state,allocation_time "
                 "FROM jobs "
                 + filter +
                 " ORDER BY wfs_job_id")

  print('Status: 200 OK')
  print('Content-Type: text/plain')
  print() 

  for row in rows:
    print("%30s %5s %2s %10s  %s" % 
          (row['jobsub_id'], row['request_id'], row['stage_id'], 
           row['allocation_state'], row['allocation_time']))
   
  sys.exit(0)

def getUserID():

  # Use certificates and proxies for now; will transition to tokens in future
  if 'SSL_CLIENT_S_DN' not in os.environ or not os.environ['SSL_CLIENT_S_DN']:
    httpError('403 Forbidden', 'Forbidden - identity not provided')

  # Convert to the older format with slashes 
  clientDN='/'+'/'.join(os.environ['SSL_CLIENT_S_DN'].split(',')[::-1])

  rows = doQuery('SELECT user_id FROM users '
                 'WHERE x509dn=LEFT("%s",LENGTH(x509dn))' % 
                 clientDN.replace('\\','\\\\').replace('"','\\"'))
  
  try:
    userID = int(rows[0]['user_id'])
  except:
    httpError('403 Forbidden', 'Forbidden - acceptable identity not provided')

  return userID

#
# PROGRAM MAIN
#

# Quickly reject random GETs etc (if not hanlded by Apache already)
if os.environ['REQUEST_METHOD'] != 'POST':
  httpError('405 Method not allowed', 'We only support POST')

# Do as many checks as we can before connecting to the database here
try:
  wfs.db.conn = MySQLdb.connect(host="localhost", user=wfs.conf.mysqlUser, 
                        passwd=wfs.conf.mysqlPassword, db='wfdb')
  wfs.db.conn.autocommit(False)
  wfs.db.cur = wfs.db.conn.cursor(MySQLdb.cursors.DictCursor) 
except:
  httpError('500 Internal Server Error', 'Problem with database connection')

# This produces an error and stops if authorized DN is not found
userID = getUserID()

# Get the JSON document POSTed to us
try:
  jsonDict = json.load(sys.stdin)
except Exception as e:
  httpError('400 Bad Request', 'Failed to parse JSONx')

# Check jsonDict specifies a method
if 'command' not in jsonDict:
  httpError('400 Bad Request', 'Missing command in JSON')

if jsonDict['command'] == 'show-requests':
  showRequestsCmd(jsonDict)

if jsonDict['command'] == 'show-stages':
  showStagesCmd(jsonDict)

if jsonDict['command'] == 'show-bootstrap':
  showBootstrapCmd(jsonDict)

if jsonDict['command'] == 'show-stage-outputs':
  showStageOutputsCmd(jsonDict)

if jsonDict['command'] == 'show-files':
  showFilesCmd(jsonDict)

if jsonDict['command'] == 'show-replicas':
  showReplicasCmd(jsonDict)

if jsonDict['command'] == 'show-storages':
  showStoragesCmd(jsonDict)

if jsonDict['command'] == 'show-sites-storages':
  showSitesStoragesCmd(jsonDict)

if jsonDict['command'] == 'create-request':
  createRequestCmd(jsonDict, userID)

if jsonDict['command'] == 'quick-request':
  quickRequestCmd(jsonDict, userID)

if jsonDict['command'] == 'submit-request':
  submitRequestCmd(jsonDict)

if jsonDict['command'] == 'start-request':
  startRequestCmd(jsonDict)

if jsonDict['command'] == 'restart-request':
  restartRequestCmd(jsonDict)

if jsonDict['command'] == 'pause-request':
  pauseRequestCmd(jsonDict)

if jsonDict['command'] == 'create-stage':
  createStageCmd(jsonDict)

if jsonDict['command'] == 'add-file':
  addFileCmd(jsonDict)

if jsonDict['command'] == 'show-jobs':
  showJobsCmd(jsonDict)

httpError('400 Bad Request', 'command in JSON not recognised')