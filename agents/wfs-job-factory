#!/usr/bin/env python3
#
#  wfs-job-factory - WFS Job Factory
# 
#  Andrew McNab, University of Manchester.
#  Copyright (c) 2013-22. All rights reserved.
#
#  Redistribution and use in source and binary forms, with or
#  without modification, are permitted provided that the following
#  conditions are met:
#
#    o Redistributions of source code must retain the above
#      copyright notice, this list of conditions and the following
#      disclaimer.
#    o Redistributions in binary form must reproduce the above
#      copyright notice, this list of conditions and the following
#      disclaimer in the documentation and/or other materials
#      provided with the distribution.
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
#  CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
#  INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
#  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
#  BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
#  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
#  TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
#  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
#  ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
#  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
#  OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#  POSSIBILITY OF SUCH DAMAGE.
#

import os
import sys
import stat
import time
import tempfile
import subprocess

# Needs MySQL-python RPM
import MySQLdb

# wfs/conf.py must define these variables in a way that is both
# valid Python and valid Bash!
#
# mysqlUser='username'
# mysqlPassword='PAsSWoRd'
#
import wfs

sleepSeconds     = 60
jobsPerCycle     = 10
maxSubmittedJobs = 100

class wfsError(Exception):
  pass

def logLine(text):
  sys.stdout.write(time.strftime('%b %d %H:%M:%S [') + str(os.getpid()) + ']: ' + text + '\n')
  sys.stdout.flush()

def parseJobsubQ():

  try: 
    outcome = subprocess.run(['/var/lib/wfs/run-jobsub-q'],
                             stdin   = subprocess.DEVNULL,
                             stderr  = subprocess.STDOUT,
                             stdout  = subprocess.PIPE,
                             timeout = 60
                            ) 
  except Exception as e:
    logLine("run-jobsub-q fails with error: " + str(e))
    return

  logLine(outcome.stdout.decode())
  
  for line in outcome.stdout.decode().splitlines():
    if '@jobsub' in line and 'wfs-generic-job' in line:
      jobsubID = line.split()[0]
      state    = line.split()[5]

      try:
        wfs.db.cur.execute('UPDATE jobs '
                    'SET jobsub_state="%s" '
                    'WHERE jobsub_id="%s"'
                    % (state, jobsubID)
                   )

      except Exception as e:
        # But try to keep going
        logLine('Update jobsub job ' + jobsubID + ' fails with: ' + str(e))

  # Commit whatever we found - no rush
  wfs.db.conn.commit()

def parseJobsubHistory():

  try: 
    outcome = subprocess.run(['/var/lib/wfs/run-jobsub-history'],
                             stdin   = subprocess.DEVNULL,
                             stderr  = subprocess.STDOUT,
                             stdout  = subprocess.PIPE,
                             timeout = 60
                            ) 
  except Exception as e:
    logLine("run-jobsub-history fails with error: " + str(e))
    return

  logLine(outcome.stdout.decode())
  
  for line in outcome.stdout.decode().splitlines():
    if '@jobsub' in line and 'wfs-generic-job' in line:
      jobsubID = line.split()[0]
      try:
        state = line.split()[6]
      except:
        state = 'X'

      try:
        wfs.db.cur.execute('UPDATE jobs '
                    'SET jobsub_state="%s" '
                    'WHERE jobsub_id="%s"'
                    % (state, jobsubID)
                   )

      except Exception as e:
        # But try to keep going
        logLine('Update jobs fails with: ' + str(e))

  # Commit whatever we found - no rush
  wfs.db.conn.commit()

def parseFetchlogList():

  try:
    query = ('SELECT jobsub_id FROM jobs WHERE need_to_fetch_jobsub_log '
             'AND (finished_time > DATE_SUB(NOW(),INTERVAL 2 DAY))')

    wfs.db.cur.execute(query)    
    jobRows = wfs.db.cur.fetchall()
  
  except Exception as e:
    logLine("Failed to get list of jobs needing fetchlog: " + str(e))
    return

  jobsToFetch = []
  
  for jobRow in jobRows:
    jobsToFetch.append(jobRow['jobsub_id'])
    
  if not jobsToFetch:
    logLine('No job logs to fetch')
    return

  try: 
    outcome = subprocess.run(['/var/lib/wfs/run-jobsub-fetchlog-list'],
                             stdin   = subprocess.DEVNULL,
                             stderr  = subprocess.STDOUT,
                             stdout  = subprocess.PIPE,
                             timeout = 60
                            ) 
  except Exception as e:
    logLine("run-jobsub-fetchlog-list fails with error: " + str(e))
    return

  logLine(outcome.stdout.decode())
  
  for line in outcome.stdout.decode().splitlines():
    if '@jobsub' in line:
      jobsubID = line.split()[0]
      
      if jobsubID in jobsToFetch:
        runFetchlog(jobsubID)
  
        try:
          # We only try fetching logs once
          wfs.db.cur.execute('UPDATE jobs '
                             'SET need_to_fetch_jobsub_log=FALSE '
                             'WHERE jobsub_id="%s"'
                             % jobsubID
                            )

        except Exception as e:
          # But try to keep going
          logLine('Update jobs fails with: ' + str(e))

  # Commit whatever we found - no rush
  wfs.db.conn.commit()

def runFetchlog(jobsubID):

  try: 
    outcome = subprocess.run(['/var/lib/wfs/run-jobsub-fetchlog',
                              jobsubID],
                             stdin   = subprocess.DEVNULL,
                             stderr  = subprocess.STDOUT,
                             stdout  = subprocess.PIPE,
                             timeout = 60
                            ) 
  except Exception as e:
    logLine("run-jobsub-fetchlog fails with error: " + str(e))
    return

  logLine(outcome.stdout.decode())

def updateSiteCounts():

  try:
    wfs.db.cur.execute('UPDATE sites SET '
        'submitted_jobs='
        '(SELECT COUNT(*) FROM jobs WHERE '
         'sites.site_id=jobs.site_id AND allocation_state="submitted"),'
        'running_jobs='
        '(SELECT COUNT(*) FROM jobs WHERE '
         'sites.site_id=jobs.site_id AND allocation_state '
         'IN ("started","processing","outputting"))')
  except Exception as e:
    logLine('Update site counts fails with: ' + str(e))
  else:
    wfs.db.conn.commit()
   
def submitToSlotSize(numberToSubmit, slotSizeRow, forWtf = False):

  try: 
    outcome = subprocess.run(
               ["/var/lib/wfs/run-jobsub-submit",
                str(numberToSubmit),
                slotSizeRow['jobsub_site_name'],
                str(int(slotSizeRow['max_rss_bytes'] / 1024)),
                str(slotSizeRow['max_processors']),
                str(slotSizeRow['max_wall_seconds'])
               ],
               stdin   = subprocess.DEVNULL,
               stderr  = subprocess.STDOUT,
               stdout  = subprocess.PIPE,
               timeout = 60
                            ) 
  except Exception as e:
    logLine("run-jobsub-submit fails with error: " + str(e))
    return

  logLine(outcome.stdout.decode())
  logLine('run-jobsub-submit exit code: ' + str(outcome.returncode))

  # Scrape the stdout to find the Jobsub job ID
  majorJobsubJobID = None
  jobsubHost       = None
  
  for line in outcome.stdout.decode().splitlines():
    if line.startswith('JobsubJobId of first job:'):
      try:
        jobsubJobID      = line.split()[4]
        majorJobsubJobID = jobsubJobID.split('.')[0]
        jobsubHost       = jobsubJobID.split('@')[1]
        break
      except:
        pass
   
  if not majorJobsubJobID or not jobsubHost:
    # What??
    logLine("Valid jobsub job ID not found after submitting job(s)!")
    return

  logLine("Submitted cluster %s to %s%s" % 
          (jobsubJobID, 
           slotSizeRow['jobsub_site_name'],
           ' (WTF job)' if forWtf else ''))

  # Record the job(s) in the database
  for i in range(0, numberToSubmit):
    try:
      wfs.db.cur.execute('INSERT INTO jobs '
                  'SET factory_name="%s",'
                  'site_id=%d,'
                  'slot_size_id=%d,'
                  'submitted_time=NOW(),'
                  'need_to_fetch_jobsub_log=%s,'
                  'for_wtf=%s,'
                  'jobsub_id="%s.%d@%s"'
                  % (os.uname()[1],
                     slotSizeRow['site_id'],
                     slotSizeRow['slot_size_id'],
                     "TRUE" if i == 0 else "FALSE",
                     "TRUE" if forWtf else "FALSE",
                     majorJobsubJobID, i, jobsubHost)
                 )

    except Exception as e:
      # But try to keep going
      logLine('INSERT INTO jobs fails with: ' + str(e))

  # Record that we've done a submission for this slot size
  try:
    wfs.db.cur.execute('UPDATE sites SET last_submitted_time=NOW() '
                'WHERE site_id=%d' % slotSizeRow['site_id']
               )

    wfs.db.cur.execute('UPDATE slot_sizes SET last_submitted_time=NOW() '
                'WHERE slot_size_id=%d' % slotSizeRow['slot_size_id']
               )

  except Exception as e:
    # But try to keep going
    logLine('Update last_submitted_time fails with: ' + str(e))

  # Commit it all to the DB
  wfs.db.conn.commit()

def processSlotSize(slotSizeRow):
  # Decide how many jobs to submit, targetted at this slot size at one
  # site and submit them with jobsub_submit

  logLine(str(slotSizeRow))

  # First, the special Workflow Testing Framework jobs
  if slotSizeRow['number_wtf'] == 0 and slotSizeRow['min_processors'] == 0:
    submitToSlotSize(1, slotSizeRow, forWtf = True)

  # Now normal jobs for processing requests/stages
  if not slotSizeRow['enabled'] or \
     (slotSizeRow['submitted_jobs'] + slotSizeRow['running_jobs'] 
       >= slotSizeRow['max_jobs']):
    # Just check count once, so we might go over a little bit for now ...
    return

  try:
    jobDict = wfs.allocator.makeSlotSizeDict(slotSizeRow['slot_size_id'])
    print(jobDict)
    stage = wfs.allocator.findStage(jobDict, 
                                    limit = jobsPerCycle, 
                                    forUpdate = False)
    print(stage)
    print(slotSizeRow)
  except Exception as e:
    logLine('Update makeSlotSizeDict/findStage fails with: ' + str(e))
    stage = None

  if stage and (slotSizeRow['submitted_jobs'] < maxSubmittedJobs):
    # Submit job(s) if at least one stage would match and none idle
    numberToSubmit = stage['matches']
    logLine('Match found - submit %d job(s)' % numberToSubmit)
    submitToSlotSize(numberToSubmit, slotSizeRow)
#  elif not slotSizeRow['site_submitted_recently'] and \
#       (slotSizeRow['min_processors'] == 0):
#    logLine('Nothing matched but time to submit again anyway')
#    submitToSlotSize(1, slotSizeRow)
  else:
    logLine('No match found or none allowed by limits')

def oneCycle():

  # Update the database with the states of submitted jobsub jobs

  parseJobsubQ()
  parseJobsubHistory()
  updateSiteCounts()
  parseFetchlogList()

  # Go through the sites / slot sizes, deciding what to submit
  
  try:
    slotSizesRows = wfs.db.select('SELECT sites.site_id,'
      'site_name,'
      'jobsub_site_name,'
      'slot_size_id,'
      'min_rss_bytes,'
      'max_rss_bytes,'
      'min_processors,'
      'max_processors,'
      'max_wall_seconds,'
      'sites.max_jobs,'
      'sites.submitted_jobs,'
      'sites.running_jobs,'
      'UNIX_TIMESTAMP(slot_sizes.last_submitted_time) AS last_submitted_time,'
      'UNIX_TIMESTAMP(slot_sizes.last_allocation_time) AS last_allocation_time,'
      '(SELECT COUNT(*) FROM jobs WHERE '
      'jobs.submitted_time > DATE_SUB(NOW(),INTERVAL 2 HOUR) AND '
      'allocation_state="submitted" AND jobs.site_id=sites.site_id AND '
      'jobs.slot_size_id=slot_sizes.slot_size_id) AS number_idle,'
      '(SELECT COUNT(*) FROM jobs WHERE'
      ' allocation_state IN ("submitted","starting","processing","outputting") '
      ' AND jobs.site_id=sites.site_id) AS number_at_site,'
      '(SELECT COUNT(*) FROM jobs WHERE'
      ' jobs.site_id=sites.site_id AND for_wtf AND'
      ' submitted_time > DATE_SUB(NOW(),INTERVAL 1 DAY)) as number_wtf,'
      'enabled '
      'FROM sites '
      'LEFT JOIN slot_sizes ON sites.site_id=slot_sizes.site_id '
      'ORDER BY site_name,min_processors'
      # Should change this to random order

# Saved version that submits at least once a day
#      '(SELECT COUNT(*) FROM jobs WHERE'
#      ' allocation_state IN ("submitted","starting","processing","outputting") '
#      ' AND jobs.site_id=sites.site_id) AS number_at_site,'
#      '(sites.last_submitted_time > '
#      'DATE_SUB(NOW(),INTERVAL 1 DAY)) AS site_submitted_recently '
#      'FROM sites '
#      'LEFT JOIN slot_sizes ON sites.site_id=slot_sizes.site_id '
#      'WHERE enabled OR (sites.last_submitted_time < '
#      'DATE_SUB(NOW(),INTERVAL 1 DAY)) '
#      'ORDER BY site_name,min_processors'
               )

  except Exception as e:
    logLine('Failed getting list of slot sizes at sites: ' + str(e))
    return
  
  for slotSizeRow in slotSizesRows:
    processSlotSize(slotSizeRow)
    
  
#
# PROGRAM MAIN
#

if __name__ == '__main__':

  if (os.fork() != 0):
    sys.exit() # first parent

  else:
    os.chdir("/")
    os.setsid()
    os.umask(0)

    if os.fork() != 0:
      sys.exit() # second parent

    else:

      try:
        os.makedirs('/var/run/wfs',         
                    stat.S_IRUSR | stat.S_IWUSR | stat.S_IXUSR | 
                    stat.S_IRGRP | stat.S_IXGRP | stat.S_IROTH | stat.S_IXOTH)
      except:
        pass
        
      try:
        f = open('/var/run/wfs/job-factory.pid', 'w')
        f.write(str(os.getpid()) + '\n')
        f.close()
      except:
        print('Failed to create /var/run/wfs/job-factory.pid - exiting')
        sys.exit(1)

      # Close stdin now
      si = open('/dev/null', 'r')
      os.dup2(si.fileno(), sys.stdin.fileno())

      while True:

        # Ensure /var/log/wfs directory exists
        try:
          os.makedirs('/var/log/wfs', 
                      stat.S_IRUSR|stat.S_IWUSR|stat.S_IXUSR|stat.S_IRGRP|stat.S_IXGRP|stat.S_IROTH|stat.S_IXOTH)
        except:
          pass

        # Close and reopen stdout->log file, in case of logrotate
        try:
          close(so)
        except:
          pass

        so = open('/var/log/wfs/job-factory', 'a+')
        os.dup2(so.fileno(), sys.stdout.fileno())

        # Close and reopen stderr->log file, in case of logrotate
        try:
          close(se)
        except:
          pass
          
        se = open('/var/log/wfs/job-factory', 'a+')
        os.dup2(se.fileno(), sys.stderr.fileno())

        try:
          pf = open('/var/run/wfs/job-factory.pid', 'r')
          pid = int(pf.read().strip())
          pf.close()

          if pid != os.getpid():
            print('new /var/run/wfs/job-factory.pid - exiting')
            break

        except:
          print('no /var/run/wfs/job-factory.pid - exiting')
          break

        # Fork a subprocess to run each cycle
        cyclePid = os.fork()

        if cyclePid == 0:
          logLine('=============== Start cycle ===============')
          
          wfs.conf.readConf()
          
          try:
            wfs.db.conn = MySQLdb.connect(host=wfs.conf.mysqlHostname, 
                                  user=wfs.conf.mysqlUsername,
                                  passwd=wfs.conf.mysqlPassword, 
                                  db=wfs.conf.mysqlDbName)
            wfs.db.conn.autocommit(False)
            wfs.db.cur = wfs.db.conn.cursor(MySQLdb.cursors.DictCursor)
          except Exception as e:
            logLine('Failed to create database connection (' + str(e) + ') - skipping cycle')
          else:
            try:
              oneCycle()
            except Exception as e:
              print('Cycle fails with exception ' + str(e))

          logLine('================ End cycle ================')
          sys.exit(0)

        # wait for cyclePid subprocess to finish
        os.waitpid(cyclePid, 0)

        # wait the allotted time between cycles
        time.sleep(sleepSeconds)

      sys.exit(0) # if we break out of the while loop then we exit

