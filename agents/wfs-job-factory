#!/usr/bin/env python3
#
#  wfs-job-factory - WFS Job Factory
# 
#  Andrew McNab, University of Manchester.
#  Copyright (c) 2013-22. All rights reserved.
#
#  Redistribution and use in source and binary forms, with or
#  without modification, are permitted provided that the following
#  conditions are met:
#
#    o Redistributions of source code must retain the above
#      copyright notice, this list of conditions and the following
#      disclaimer.
#    o Redistributions in binary form must reproduce the above
#      copyright notice, this list of conditions and the following
#      disclaimer in the documentation and/or other materials
#      provided with the distribution.
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
#  CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
#  INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
#  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
#  BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
#  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
#  TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
#  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
#  ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
#  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
#  OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#  POSSIBILITY OF SUCH DAMAGE.
#

import os
import sys
import stat
import time
import tempfile
import subprocess

# Needs MySQL-python RPM
import MySQLdb

# wfs/conf.py must define these variables in a way that is both
# valid Python and valid Bash!
#
# mysqlUser='username'
# mysqlPassword='PAsSWoRd'
#
import wfs.conf

findFilesInterval     = 3600
findReplicasInterval  = 3600
maxFileFindsPerCycle  = 10

sleepSeconds = 60

db  = None
cur = None

class wfsError(Exception):
  pass

def logLine(text):
  sys.stdout.write(time.strftime('%b %d %H:%M:%S [') + str(os.getpid()) + ']: ' + text + '\n')
  sys.stdout.flush()

def submitToEntry(numberToSubmit, entryRow):

  try: 
    outcome = subprocess.run(["/var/lib/wfs/job-factory/submit_to_entry",
                              str(numberToSubmit),
                              entryRow['site_name'], 
                              entryRow['entry_name'],
                              entryRow['rss_bytes'] / 1024,
                              entryRow['processors'],
                              entryRow['wall_seconds']
                             ], 
                             capture_output = True,
                             stdin   = subprocess.DEVNULL,
                             stderr  = subprocess.STDOUT,
                             timeout = 60
                            ) 
  except Exception as e:
    logLine("submit_to_entry fails with error: " + str(e))
    return

  logLine(outcome.stdout)

  # Scrape the stdout to find the Jobsub job ID
  majorJobsubJobID = None
  
  for line in outcome.stdout.splitlines():
    if line.startswith("Use job id "):
      majorJobsubJobID      = line.split(' ')[4].split('.')[0]
      break
   
  if not majorJobsubJobID:
    # What??
    logLine("Jobsub job ID not found after submitting job(s)!")
    return

  # Record the job(s) in the database
  for i in range(0, numberToSubmit):
    try:
      cur.execute('INSERT INTO submitted_jobs '
                  'SET factory_name="%s",'
                  'site_id=%d,'
                  'entry_id=%d,'
                  'submitted_time=NOW(),'
                  'jobsub_id="%s.%d"'
                  % (os.uname()[1],
                     entryRow['site_id'],
                     entryRow['entry_id'],
                     majorJobsubJobID, i)
                 )

    except Exception as e:
      # But try to keep going
      logLine('INSERT INTO jobs fails with: ' + str(e))

  # Commit it all to the DB
  db.commit()

def processOneEntry(entryRow):
  # Decide how many jobs to submit, targetted at this entry
  # and submit them with jobsub_submit

  logLine(str(entryRow))
  
  # Decide whether to submit, somehow...
  numberToSubmit = 1

  # 
  submitToEntry(numberToSubmit, entryRow)

def oneCycle():

  try:
    os.makedirs('/var/spool/wfs',
                    stat.S_IRUSR | stat.S_IWUSR | stat.S_IXUSR | 
                    stat.S_IRGRP | stat.S_IXGRP | stat.S_IROTH | stat.S_IXOTH)
  except:
    # Probably already exists. Catch other problems later.
    pass

  try:
    cur.execute('SELECT sites.site_id,site_name,entry_name,'
                'rss_bytes,processors,wall_seconds '
                'FROM sites '
                'LEFT JOIN entries ON sites.site_id=entries.site_id '
                'WHERE entries.enabled '
                'ORDER BY site_name,entry_name'
                # Should change this to random order
               )

    entryRows = cur.fetchall()
  except:
    logLine('Failed getting list of entries at sites')
    return
  
  for entryRow in entryRows:
    processOneEntry(entryRow)
    
  
#
# PROGRAM MAIN
#

if __name__ == '__main__':

  if (os.fork() != 0):
    sys.exit() # first parent

  else:
    os.chdir("/")
    os.setsid()
    os.umask(0)

    if os.fork() != 0:
      sys.exit() # second parent

    else:

      try:
        os.makedirs('/var/run/wfs',         
                    stat.S_IRUSR | stat.S_IWUSR | stat.S_IXUSR | 
                    stat.S_IRGRP | stat.S_IXGRP | stat.S_IROTH | stat.S_IXOTH)
      except:
        pass
        
      try:
        f = open('/var/run/wfs/job-factory.pid', 'w')
        f.write(str(os.getpid()) + '\n')
        f.close()
      except:
        print('Failed to create /var/run/wfs/job-factory.pid - exiting')
        sys.exit(1)

      # Close stdin now
      si = open('/dev/null', 'r')
      os.dup2(si.fileno(), sys.stdin.fileno())

      while True:

        # Ensure /var/log/wfs directory exists
        try:
          os.makedirs('/var/log/wfs', 
                      stat.S_IRUSR|stat.S_IWUSR|stat.S_IXUSR|stat.S_IRGRP|stat.S_IXGRP|stat.S_IROTH|stat.S_IXOTH)
        except:
          pass

        # Close and reopen stdout->log file, in case of logrotate
        try:
          close(so)
        except:
          pass

        so = open('/var/log/wfs/job-factory', 'a+')
        os.dup2(so.fileno(), sys.stdout.fileno())

        # Close and reopen stderr->log file, in case of logrotate
        try:
          close(se)
        except:
          pass
          
        se = open('/var/log/wfs/job-factory', 'a+')
        os.dup2(se.fileno(), sys.stderr.fileno())

        try:
          pf = open('/var/run/wfs/job-factory.pid', 'r')
          pid = int(pf.read().strip())
          pf.close()

          if pid != os.getpid():
            print('new /var/run/wfs/job-factory.pid - exiting')
            break

        except:
          print('no /var/run/wfs/job-factory.pid - exiting')
          break

        # Fork a subprocess to run each cycle
        cyclePid = os.fork()

        if cyclePid == 0:
          logLine('=============== Start cycle ===============')
          
          try:
            db  = MySQLdb.connect(host="localhost", 
                                  user=wfs.conf.mysqlUser,
                                  passwd=wfs.conf.mysqlPassword, 
                                  db='wfdb')
            db.autocommit(False)
            cur = db.cursor(MySQLdb.cursors.DictCursor)
          except Exception as e:
            logLine('Failed to create database connection (' + str(e) + ') - skipping cycle')
          else:
            try:
              oneCycle()
            except Exception as e:
              print('Cycle fails with exception ' + str(e))

          logLine('================ End cycle ================')
          sys.exit(0)

        # wait for cyclePid subprocess to finish
        os.waitpid(cyclePid, 0)

        # wait the allotted time between cycles
        time.sleep(sleepSeconds)

      sys.exit(0) # if we break out of the while loop then we exit

