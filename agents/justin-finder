#!/usr/bin/env python3
#
# justin-finder - justIN Finder agent
#
# Copyright 2013-23, Andrew McNab for the University of Manchester
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

import os
import sys
import ssl
import stat
import json
import time
import base64
import urllib.request
import pathlib
import tempfile
import xml.dom.minidom

# Needs MySQL-python RPM
import MySQLdb

# Installed by pip3 install of Rucio
import rucio.client

# justin/conf.py must define these variables in a way that is both
# valid Python and valid Bash!
#
# mysqlUser='username'
# mysqlPassword='PAsSWoRd'
#
import justin

maxFileFindsPerCycle = 500
sleepSeconds         = 60

class justinError(Exception):
  pass

def logLine(text):
  sys.stdout.write(time.strftime('%b %d %H:%M:%S [') + str(os.getpid()) + ']: ' + text + '\n')
  sys.stdout.flush()

def addFilesMonteCarlo(requestID, count):
  # Add dummy files to keep track of Monte Carlo processing
  
  for i in range(1, count + 1):
    try:
      query = ('INSERT INTO files SET state="unallocated",'
               'request_id=%d,file_did="monte-carlo-%06d-%06d"' 
               % (requestID, requestID, i)
              )

      justin.db.cur.execute(query)
    except Exception as e:
      logLine('Failed inserting dummy Monte Carlo file for request %d: %s' 
              % (requestID, str(e)))
      return

    try:
      query = ('INSERT INTO replicas SET rse_id=%d,file_id=%d,'
               'wan_pfn="%06d",lan_pfn=""'
               % (justin.conf.MonteCarloRseID, 
                  justin.db.cur.lastrowid,
                  i))

      justin.db.cur.execute(query)
    except Exception as e:
      logLine('Failed inserting dummy Monte Carlo replica for request %d: %s' 
               % (requestID, str(e)))
      return

    justin.db.logEvent(eventTypeID = justin.db.event_FILE_ADDED,
                    requestID = requestID,
                    stageID = 1,
                    fileID = justin.db.cur.lastrowid)


  try:
    query = ('UPDATE requests SET refind_last_time=NOW() WHERE request_id=' +
             str(requestID))

    justin.db.cur.execute(query)
  except Exception as e:
    logLine('Failed updating request ' + str(requestID))

  # All ok, so commit it all to the DB
  justin.db.conn.commit()

def findFilesRucio(didClient, requestID, scope, name):
  # Find files to be processed for each request in the finding state

  try:
    didsList = didClient.list_files(scope, name)
  except Exception as e:
    logLine("Reading file list from Rucio fails with: " + str(e))
    return

  for did in didsList:  
    try:
      query = ('INSERT INTO files SET '
               'request_id=' + str(requestID) + ',' +
               'file_did="' + did['scope'] + ':' + did['name'] + '" '
               'ON DUPLICATE KEY UPDATE request_id=request_id'
              )

      justin.db.cur.execute(query)
    except Exception as e:
      logLine('Failed inserting DID %:%s' % (did['scope'], did['name']))
      return

    justin.db.logEvent(eventTypeID = justin.db.event_FILE_ADDED,
                    requestID = requestID,
                    stageID = 1,
                    fileID = justin.db.cur.lastrowid)

  # All files found for this request so update its state
  try:
    query = ('UPDATE requests SET refind_last_time=NOW() WHERE request_id=' +
             str(requestID))

    justin.db.cur.execute(query)
  except Exception as e:
    logLine('Failed updating request ' + str(requestID))

  # All ok, so commit it all to the DB
  justin.db.conn.commit()

def findFilesMetaCat(requestID, mql):
  # Find files matching the mql query from MetaCat

  for i in range(3,0,-1):
    try:
      response = urllib.request.urlopen(
       "https://metacat.fnal.gov:9443/dune_meta_prod/app/data/query?"
#       "https://metacat.fnal.gov:9443/dune_meta_demo/app/data/query?"
       "with_meta=no&with_provenance=no",
       data = mql.encode()             )

      if response.status != 200:
        logLine("Reading files list from MetaCat fails with HTTP code "
                + str(response.status))
        return

      fileLines = response.readlines()
    except Exception as e:    
      logLine("Reading files list from MetaCat fails with: " + str(e))
      
      if i > 1:
        # Try again as Metacat has transitory errors on large queries
        # which seem to go away when repeated
        time.sleep(1)        
        continue
      else:
        # Give up
        return

  for fileLine in fileLines:
    # Remove any weirdness
    if fileLine[0] < 32:
      fileLine = fileLine[1:]

    try:
      fileDict = json.loads(fileLine)
    except:
      logLine("Parsing line from MetaCat fails with: " + str(e))
      return
        
    if 'namespace' not in fileDict or not fileDict['namespace'] \
       or 'name' not in fileDict or not fileDict['name']:
      logLine('Ignore file with invalid SCOPE:NAME from MetaCat: '
              + str(fileDict))
      continue

    try:
      query = ('INSERT INTO files SET '
               'request_id=' + str(requestID) + ',' +
               'file_did="' + fileDict['namespace'] + ':' 
                + fileDict['name'] + '" '
               'ON DUPLICATE KEY UPDATE request_id=request_id'
              )

      justin.db.cur.execute(query)
      
    except Exception as e:
      logLine('Failed inserting DID %:%s' % 
              ( fileDict['namespace'], fileDict['name'] ))
      return

    justin.db.logEvent(eventTypeID = justin.db.event_FILE_ADDED,
                    requestID = requestID,
                    stageID = 1,
                    fileID = justin.db.cur.lastrowid)

  # All files found for this request so update its state
  try:
    query = ('UPDATE requests SET refind_last_time=NOW() WHERE request_id=' +
             str(requestID))

    justin.db.cur.execute(query)
  except Exception as e:
    logLine('Failed updating request ' + str(requestID))

  # All ok, so commit it all to the DB
  justin.db.conn.commit()

def findFiles():
  # Find files to be processed for each request in the finding state
  # By default we use MetaCat, but MQLs starting rucio-dataset or monte-carlo 
  # are handled directly.

  query = ('SELECT request_id,mql FROM requests '
           'WHERE state="running" AND '
           '((refind_seconds=0 AND refind_last_time="%s")'
           ' OR '
           ' (refind_seconds > 0 AND '
           ' DATE_ADD(refind_last_time, INTERVAL refind_seconds SECOND) '
           ' < NOW() AND refind_start_time < NOW() AND '
           'refind_end_time >= NOW())) '
           'ORDER BY request_id' % justin.db.unixEpoch)

  findingRequests = justin.select(query)
  if not findingRequests:  
    # Nothing to do
    return

  didClient = None

  for request in findingRequests:
  
    logLine('Finding files for Request %d with MQL %s' %
            (request['request_id'], request['mql']))
  
    if request['request_id'] == justin.awtRequestID:
      # If refinding the AWT request, then reset the existing 
      # files to look for new replicas of theme
      try:
        justin.insertUpdate('UPDATE files SET state="finding" '
                            'WHERE request_id=%d' % justin.awtRequestID)
      except Exception as e:
        logLine('Set all existing AWT files to finding fails: ' + str(e))
  
    mqlSplit = request['mql'].split()

    # Request for a Rucio dataset: "rucio-dataset SCOPE:NAME"
    if len(mqlSplit) == 2 and mqlSplit[0] == 'rucio-dataset':

      if not didClient:      
       # Only set up Rucio if we see a rucio-dataset
       try:
         didClient = rucio.client.didclient.DIDClient()
       except Exception as e:
         logLine("Connect to Rucio fails with: " + str(e))
         continue

      datasetSplit = mqlSplit[1].split(':')
      if len(datasetSplit) == 2:
        findFilesRucio(didClient,
                       request['request_id'], 
                       datasetSplit[0], 
                       datasetSplit[1])
        
    # Monte Carlo request with a count
    elif len(mqlSplit) == 2 and mqlSplit[0] == 'monte-carlo':
      
      try:
        count = int(mqlSplit[1])
      except:
        continue
      
      addFilesMonteCarlo(request['request_id'], count)

    else:
    
      findFilesMetaCat(request['request_id'], request['mql'])

    justin.db.conn.commit()

def findReplicas():
  # Find replicas of files in the finding state

  query = (
    'SELECT requests.request_id,stages.stage_id '
    'FROM requests '
    'LEFT JOIN stages ON requests.request_id=stages.request_id '
    'LEFT JOIN files ON requests.request_id=files.request_id AND '
    'stages.stage_id=files.stage_id '
    'WHERE requests.state="running" AND files.state="finding" '
    'GROUP BY requests.request_id,stages.stage_id '
    'ORDER BY stage_rank DESC,RAND() LIMIT 1')

  try:
    stageRow = justin.db.select(query, justOne = True)
  except Exception as e:
    logLine('Finding request/stage to find replicas for fails: %s' % str(e))
    return

  if not stageRow:
    logLine('No files with replicas to be found')
    return

  requestID = stageRow['request_id']
  stageID   = stageRow['stage_id']
  logLine('Looking for replicas in finding state for request=%d stage=%d'
          % (requestID, stageID))

  # Make a list of up to maxFileFindsPerCycle files to work on 
  # but only for Rucio DIDs in scope:name format
  didsList = []

  try:
    fileRows = justin.db.select(
           'SELECT files.request_id,files.stage_id,file_id,file_did '
           'FROM files '
           'LEFT JOIN requests ON requests.request_id=files.request_id '
           'WHERE files.request_id=%d '
           'AND files.stage_id=%d '
           'AND files.state="finding" '
           'AND requests.state="running" '
           'AND file_did LIKE "%%:%%" '
           'ORDER BY file_id LIMIT %d'
           % (requestID, stageID, maxFileFindsPerCycle))

  except Exception as e:
    logLine('Finding list of files to find fails: ' + str(e))
    return
  
  # Nothing to do
  if not fileRows:
    logLine('No files found in finding state')
    return

  # Check we can talk to Rucio
  try:
    repClient = rucio.client.replicaclient.ReplicaClient()
  except Exception as e:
    logLine("Connect to Rucio fails with: " + str(e))
    return

  # Cache rse_id of every known RSE into a local dictionary
  # unless it is decommissioned
  storagesDict = {}
  allStorages = justin.select('SELECT rse_name,rse_id,needs_pin '
                              'FROM storages WHERE NOT decommissioned')
  
  for storageRow in allStorages:
    storagesDict[storageRow['rse_name']] = { 
                     'rse_id'    : storageRow['rse_id'],
                     'needs_pin' : bool(storageRow['needs_pin']) }

  # Receives a list of unique (requestID,stageID) combinations
  requestsStages = set()
  filesList = []

  # Make a list of files we want replicas for, in the Rucio API's format
  for fileRow in fileRows:
    (didScope, didName) = fileRow['file_did'].split(':')
    filesList.append({'scope' : didScope, 'name'  : didName })

  # Use the Rucio API to get big lists of replicas for the files
  try:
    # WE FORCE THE RETURNED SCHEME TO BE root FOR NOW
    # domain='all' does not seem to work for now
    wanRepsList = repClient.list_replicas(filesList,
                                          schemes=['root'], 
                                          domain='wan')

    lanRepsList = repClient.list_replicas(filesList,
                                          schemes=['root'], 
                                          domain='lan')

  except Exception as e:
    logLine("Reading RSE replicas info from Rucio fails with: " + str(e))
    return

  # Make a dictionary with DIDs as keys and lists of replicas from Rucio
  # as the values
  repsDict = {}
  for rep in list(wanRepsList) + list(lanRepsList):
    if rep['scope']+':'+rep['name'] not in repsDict:
      repsDict[rep['scope']+':'+rep['name']] = []
      
    for pfn in rep['pfns']:
      pfnDict = rep['pfns'][pfn]
      pfnDict['pfn'] = pfn
      repsDict[rep['scope']+':'+rep['name']].append(pfnDict)
                      
  # Go through the files again, pulling out the replica info obtained 
  # for the file's DID
  for fileRow in fileRows:
    try:
      pfnsList = repsDict[fileRow['file_did']]
    except:
      continue
    
    rses = {}

    # Save the wan and lan PFNs returned for each RSE with a replica
    # These go into the SAME rses dictionary so separate LAN and WAN
    # replica information is merged into one data dictionary
    for pfnDict in pfnsList:
        if pfnDict['type'] != 'DISK':
          continue

        if pfnDict['rse'] not in rses:
            rses[pfnDict['rse']] = {}
      
        if pfnDict['domain'] == 'lan':
            rses[pfnDict['rse']]['lan_pfn'] = justin.db.fixPfn(pfnDict['pfn'])
        else:
            rses[pfnDict['rse']]['wan_pfn'] = justin.db.fixPfn(pfnDict['pfn'])

    replicasInserted = 0
    # Now go through the replicas for this file, RSE by RSE
    for rse in rses:

        # Skip if RSE not listed (possibly because decommissioned=True)
        if rse not in storagesDict:
          continue
    
        try:
          lanPFN = rses[rse]['lan_pfn'] 
        except:
          lanPFN = ''

        try:
          wanPFN = rses[rse]['wan_pfn'] 
        except:
          wanPFN = ''
          
        # If PFN wan=lan then set lan PFN to ''        
        if wanPFN == lanPFN:
          lanPFN = ''       
  
        if storagesDict[rse]['needs_pin']:
          accessibleUntil = ',accessible_until="%s" ' % justin.db.unixEpoch
        else:
          accessibleUntil = ''
        
        if requestID == justin.awtRequestID:
          try:
            logLine('Try to update AWT file: %s %s' 
                    % (wanPFN, lanPFN))
          
            # For AWT, if the file is put back into finding then we can
            # update the replicas with change PFNs from Rucio
            query = ('UPDATE replicas SET '
                     'wan_pfn="%s",lan_pfn="%s" '
                     'WHERE ' 
                     'request_id=%d AND stage_id=%d AND '
                     'rse_id=%d AND file_id=%s'
                     % (wanPFN,
                        lanPFN,
                        requestID, stageID,
                        storagesDict[rse]['rse_id'],
                        fileRow['file_id']))
                        
            justin.insertUpdate(query)
          except:
            # For AWT, we just carry on
            pass

          try:
            logLine('Try to insert AWT file: %s %s' 
                    % (wanPFN, lanPFN))

            query = ('INSERT INTO replicas SET '              
                     'request_id=%d,stage_id=%d,'
                     'rse_id=%d,file_id=%d,'
                     'wan_pfn="%s",lan_pfn="%s"' %
                     (requestID, stageID,
                      storagesDict[rse]['rse_id'],
                      fileRow['file_id'],
                      wanPFN,
                      lanPFN))

            justin.select(query)
          except:
            # For AWT, we just carry on
            pass

          # But we treat whatever happened as everything to be done
          replicasInserted += 1

        else:
          try:
            # request_id/stage_id are only recorded with the replicas 
            # to make it faster to make charts etc in the Dashboard
            query = ('INSERT INTO replicas SET '
                     'request_id=%d,stage_id=%d,'
                     'rse_id=%d,file_id=%d,'
                     'wan_pfn="%s",lan_pfn="%s"%s' %
                     (requestID, stageID,
                      storagesDict[rse]['rse_id'],
                      fileRow['file_id'],
                      wanPFN,
                      lanPFN,
                      accessibleUntil))

            justin.select(query)
            replicasInserted += 1
          except Exception as e:
            logLine('Failed inserting replica: ' + str(e))
            # We give up if this happens, without the commit
            return
           
        # Add request/stage to the list to have updated stats at the end
        requestsStages.add((fileRow['request_id'], fileRow['stage_id']))

    if replicasInserted:
      # If we got this far, then we found all the replicas for this 
      # file so we update its state to unallocated (not finding any more)
      try:
        query = ('UPDATE files SET state="unallocated" WHERE file_id=%d' %
                 fileRow['file_id'])

        justin.db.cur.execute(query)
      except Exception as e:
        logLine('Failed updating file (%d,%d,%s): %s' %
                (fileRow['request_id'],
                 fileRow['stage_id'],
                 fileRow['file_did'],
                 str(e)))
        # We give up if this happens, without the commit
        return
    else:
      try:
        query = ('UPDATE files SET state="notfound" WHERE file_id=%d' %
                 fileRow['file_id'])

        justin.db.cur.execute(query)
      except Exception as e:
        logLine('Failed updating file (%d,%d,%s): %s' %
                (fileRow['request_id'], 
                 fileRow['stage_id'],
                 fileRow['file_did'],
                 str(e)))
        # We give up if this happens, without the commit
        return
    
  # All ok, so commit it all to the DB
  justin.db.conn.commit()

def executeMetaCatCommand(args):

  for i in range(1, 4):  
    ret = os.system(
     'export X509_USER_PROXY=/var/lib/justin/justin-jobs-production.proxy.pem ; '
     'export METACAT_AUTH_SERVER_URL=https://metacat.fnal.gov:8143/auth/dune ; '
     'export METACAT_SERVER_URL=https://metacat.fnal.gov:9443/dune_meta_prod/app ; '
     '/usr/local/bin/metacat auth login -m x509 dunepro ; '
     '/usr/local/bin/metacat %s' % args)
     
    if ret == 0:
      break

    time.sleep(1)

  return ret

def findSubmittedRequests():
  # Find requests waiting in the submitted state and set them to running

  datasetsToCreate  = set()
  requestIDsToStart = []

  try:
    requests = justin.select('SELECT requests.request_id,scope_name '
                             'FROM requests '
                             'LEFT JOIN scopes '
                             'ON requests.scope_id=scopes.scope_id '
                             'WHERE requests.state="submitted" '
                             'ORDER BY requests.request_id')
  except:
    logLine('Failed to get list of submitted requests')
    return

  for request in requests:
    requestIDsToStart.append(str(request['request_id']))
  
    try:
      stagesOutputs = justin.select('SELECT destination,lifetime_seconds '
                                'FROM stages_outputs '
                                'WHERE request_id=%d' % request['request_id'])
    except:
      logLine('Failed to get list of outputs of submitted requests')
      return
      
    for stageOutput in stagesOutputs:
      if not stageOutput['destination'].startswith('https://'):
        datasetsToCreate.add( (request['scope_name'],
                               stageOutput['destination'],
                               stageOutput['lifetime_seconds']) )

  if datasetsToCreate:
    try:
      didClient = rucio.client.didclient.DIDClient()
    except Exception as e:
      logLine("Connect to Rucio fails with: " + str(e))
      return
      
    for (scopeName,datasetName,lifetimeSeconds) in datasetsToCreate:
      try:
        ret = didClient.add_dataset(scope    = scopeName,
                                    name     = datasetName,
                                    lifetime = lifetimeSeconds)
                                    
      except rucio.common.exception.DataIdentifierAlreadyExists:
        pass

      except:
        logLine("Exception adding dataset %s:%s" % (scopeName, datasetName))
        return

      else:
        if not ret:
          logLine("Failed adding dataset %s:%s" % (scopeName, datasetName))
          return

      try:
        executeMetaCatCommand("dataset create '%s:%s'" % (scopeName, datasetName))
      except:
        # We assume failures are due to the dataset already being registered
        pass

  if requestIDsToStart:
    # All successful (or not needed) so mark requests as running
    try:
      query = ('UPDATE requests SET started=NOW(),state="running" '
               'WHERE request_id IN (%s)' % (','.join(requestIDsToStart)))

      justin.insertUpdate(query)
    except Exception as e:
      logLine("Exception setting requests to running: %s" % str(e))
      return

    justin.db.conn.commit()

def findFinishedRequests():
  # Find requests with all files in terminal states and set to finished

  try:
    query = ('SELECT request_id FROM requests '
             'WHERE state="running" AND '
             '((refind_seconds = 0) OR (refind_end_time < NOW())) '
             'ORDER BY request_id')

    justin.db.cur.execute(query)

    findingRequests = justin.db.cur.fetchall()
  except:
    logLine('Failed to get list of running requests')
    return
    
  if not findingRequests:
    logLine('No running requests to check')
    return

  for request in findingRequests:

    try:
      query = ('SELECT COUNT(*) AS count FROM files '
               'WHERE request_id=%d AND '
               'state <> "processed" AND '
               'state <> "notfound" AND '
               'state <> "failed" AND ' 
               'state <> "recorded" AND '
               'state <> "output"' %
               int(request['request_id']))
             
      justin.db.cur.execute(query)
      count = int(justin.db.cur.fetchone()['count'])
    except Exception as e:
      logLine('Failed to count non-terminal files for Request ID %d: %s' % 
              (request['request_id'], str(e)))
      continue

    if count > 0:
      # Some files have not reached terminal states
      logLine('Still non-terminal files for Request ID %d (%d)' % 
              (request['request_id'], count))
      continue
    
    try:
      query = ('UPDATE requests SET state="finished",finished=NOW() '
               'WHERE request_id=%d' % int(request['request_id']))
    
      justin.db.cur.execute(query)
    except:
      logLine('Failed to update state to finished for Request ID %d' % 
              request['request_id'])
      continue

    logLine('Request ID %d set to finished' % request['request_id'])
    
  justin.db.conn.commit()

def findStalledAbortedJobs():
  # Find jobs which have not sent a heartbeat in jobStalledSeconds
  # or which have reported they have aborted
  # or which were submitted a day ago

  try:
    query = ('SELECT request_id,stage_id,justin_job_id,jobsub_id,site_id,'
             'allocation_state '
             'FROM jobs '
             'WHERE ((allocation_state="started" OR '
             'allocation_state="processing" OR '
             'allocation_state="outputting") AND '
             '(heartbeat_time < DATE_SUB(NOW(),INTERVAL %d SECOND))) '
             'OR allocation_state="aborted" '
             'OR allocation_state="jobscript_error" '
             'OR allocation_state="outputting_failed" '
             'OR (allocation_state="submitted" AND '
             'submitted_time < DATE_SUB(NOW(),INTERVAL 1 DAY)) '
             'ORDER BY justin_job_id' % justin.db.jobStallSeconds)

    justin.db.cur.execute(query)

    jobRows = justin.db.cur.fetchall()
  except Exception as e:
    logLine('Failed to get list of stalled or aborted jobs: ' + str(e))
    return
    
  if not jobRows:
    logLine('No stalled or aborted jobs to process')
    return

  for jobRow in jobRows:

    if jobRow['allocation_state'] not in ['aborted', 'jobscript_error', 
                                                     'outputting_failed']:
      # If not here due to an abort, we mark the job as stalled
      try:
        query = ('UPDATE jobs SET allocation_state="stalled",finished_time=NOW() '
                 'WHERE justin_job_id=%d' % jobRow['justin_job_id'])
    
        justin.db.cur.execute(query)
      except Exception as e: 
        logLine('Failed to set job %s to stalled: %s' 
              % (jobRow['jobsub_id'], str(e)))
        continue

      logLine('Job %s set to stalled from %s' % (jobRow['jobsub_id'], 
                                                 jobRow['allocation_state']))
    
      justin.db.logEvent(eventTypeID = justin.db.event_JOB_STALLED,
                      requestID = jobRow['request_id'],
                      stageID = jobRow['stage_id'],
                      justinJobID = jobRow['justin_job_id'],
                      siteID = jobRow['site_id'])

    # Then find the file(s) allocated to this stalled or aborted job 
    # (IN THE FUTURE WE SHOULD DO SOMETHING CLEVER WITH Rucio/MetaCat 
    #  CHECKS FOR FILE IN THE outputting STATE)
    try:
      query = ('SELECT file_id,allocations,file_did,state '
               'FROM files '
               'WHERE (state="allocated" OR state="outputting") '
               'AND justin_job_id=%d '
               'ORDER BY file_id' % jobRow['justin_job_id'])

      justin.db.cur.execute(query)

      fileRows = justin.db.cur.fetchall()
    except:
      logLine('Failed to get list of files of the stalled or aborted job')
      # We should give up at this point rather than commit a mess?
      sys.exit(0)
    
    for fileRow in fileRows: 
    
      if fileRow['allocations'] >= justin.db.maxAllocations:
        # Reached max allocations allowed per file
        # Mark file as failed in case it is the file causing the problem
        # (eg pathological file causes memory to balloon leading to the site
        # killing the job, and to us the job just appears stalled.)

        try:
          query = ('UPDATE files SET state="failed" '
                   'WHERE file_id=%d' % fileRow['file_id'])

          justin.db.cur.execute(query)
        except:
          logLine('Failed to set file %s to failed in '
                  'request %d, stage %d after job %s' 
                  % (fileRow['file_did'], jobRow['request_id'], 
                     jobRow['stage_id'], jobRow['jobsub_id']))
          # Again, just stop for now on errors
          sys.exit(0)
            
        justin.db.logEvent(eventTypeID = justin.db.event_FILE_SET_TO_FAILED,
                        requestID = jobRow['request_id'],
                        stageID = jobRow['stage_id'],
                        fileID = fileRow['file_id'],
                        justinJobID = jobRow['justin_job_id'],
                        siteID = jobRow['site_id'])
      else:
      
        try:
          query = ('UPDATE files SET state="unallocated" '
                   'WHERE file_id=%d' % fileRow['file_id'])

          justin.db.cur.execute(query)
        except:
          logLine('Failed to set file %s to unallocated in '
                  'request %d, stage %d after job %s' 
                  % (fileRow['file_did'], jobRow['request_id'], 
                     jobRow['stage_id'], jobRow['jobsub_id']))
          # Again, just stop for now on errors
          sys.exit(0)

        justin.db.logEvent(eventTypeID = 
                        justin.db.event_FILE_OUTPUTTING_RESET 
                         if fileRow['state'] == 'outputting'
                         else justin.db.event_FILE_ALLOCATED_RESET,
                        requestID = jobRow['request_id'],
                        stageID = jobRow['stage_id'],
                        fileID = fileRow['file_id'],
                        justinJobID = jobRow['justin_job_id'],
                        siteID = jobRow['site_id'])

        logLine('Reset file %s in %d,%d to unallocated for job %s' % 
                (fileRow['file_did'], jobRow['request_id'],
                 jobRow['stage_id'], jobRow['jobsub_id']))

  # Everything went ok so commit
  justin.db.conn.commit()

def oidcRefreshRequest(refreshToken):
  # Send an OIDC request to CILogon to refresh tokens for a user

  postData = urllib.parse.urlencode(
       { 'grant_type'    : 'refresh_token',
         'client_id'     : justin.conf.cilogonClientID,
         'client_secret' : justin.conf.cilogonSecret,
         'refresh_token' : refreshToken
#         ,
#         'scope'         : 'scope=openid profile org.cilogon.userinfo '
#                           'wlcg.capabilityset:/duneana wlcg.groups:/dune '
#                           'wlcg.groups:/dune/production'
       })

  httpRequest = urllib.request.Request('https://cilogon.org/oauth2/token',
                                       data = postData.encode(),
                                       method = 'POST')

  sslContext = ssl.SSLContext()
  sslContext.load_verify_locations(capath = '/etc/grid-security/certificates')

  try:
    response = urllib.request.urlopen(httpRequest, context = sslContext)
  except Exception as e:
    logLine('OIDC tokens HTTP refresh request fails: ' + str(e))
    return None
  else:
    if response.status != 200:
      logLine('OIDC tokens HTTP response not 200, code=%d' % response.status)
      return None

  try:
    responseData = response.read().decode('utf-8')
    responseDict = json.loads(responseData)
  except Exception as e:
    logLine('OIDC tokens refresh request failed loading json: '+str(e))
    return None

  logLine('responseDict=' + str(responseDict))

  try:
    tokensDict = {} 
    tokensDict['access_token'] = responseDict['access_token']
    tokensDict['access_dict']  = json.loads(base64.urlsafe_b64decode(
                     responseDict['access_token'].split('.')[1] + '=='))

    tokensDict['id_token'] = responseDict['id_token']
    tokensDict['id_dict']  = json.loads(base64.urlsafe_b64decode(
                     responseDict['id_token'].split('.')[1] + '=='))

    tokensDict['refresh_token'] = responseDict['refresh_token']
  except Exception as e:
    logLine('OIDC tokens parsing fails: '+str(e))
    return None
  else:
    return tokensDict

def findTokensToRefresh():

  try:
    query = ('SELECT users.user_id,principal_name,refresh_token '
             'FROM users '
             'LEFT JOIN principal_names '
             'ON principal_names.pn_id=users.main_pn_id '
             'WHERE '
             'DATE_ADD(NOW(), INTERVAL 60 MINUTE) > access_token_expires AND '
             'access_token_expires > "%s" AND '
             '(SELECT expires_time FROM sessions '
             ' WHERE sessions.user_id=users.user_id '
             ' ORDER BY expires_time DESC LIMIT 1) > NOW() AND '
             'refresh_token <> ""'
             % (justin.unixEpoch))
             
    rows = justin.select(query)

  except Exception as e:
    logLine('Failed to find tokens: ' + str(e))
    return

  for row in rows:
    logLine(str(row))
    tokensDict = oidcRefreshRequest(row['refresh_token'])
    logLine(str(tokensDict))
    
    try:
      accessToken        = tokensDict['access_token']
      accessTokenCreated = tokensDict['access_dict']['iat']
      accessTokenExpires = tokensDict['access_dict']['exp']
      refreshToken       = tokensDict['refresh_token']
    except:
      accessToken        = ''
      accessTokenCreated = 0
      accessTokenExpires = 0
      refreshToken       = ''

    try:
      query = ('UPDATE users SET '
               'access_token="%s",'
               'access_token_created=FROM_UNIXTIME(%d),'
               'access_token_expires=FROM_UNIXTIME(%d),'
               'refresh_token="%s" '
               'WHERE user_id=%d' 
               % (accessToken,
                  accessTokenCreated,
                  accessTokenExpires,
                  refreshToken,
                  row['user_id']))
                  
      justin.insertUpdate(query)
    
    except Exception as e:
      logLine('Failed storing refreshed tokens for %s: %s' 
              % (row['principal_name'], str(e)))
      
    else:
      logLine('Tokens refreshed for %s' % row['principal_name'])
      
def oneCycle():

  findTokensToRefresh()
  findSubmittedRequests()
  findFiles()
  findReplicas()
  findFinishedRequests()
  findStalledAbortedJobs()

#
# PROGRAM MAIN
#

if __name__ == '__main__':

  if (os.fork() != 0):
    sys.exit() # first parent

  else:
    os.chdir("/")
    os.setsid()
    os.umask(0)

    if os.fork() != 0:
      sys.exit() # second parent

    else:

      try:
        os.makedirs(justin.conf.justinRunDir,         
                    stat.S_IRUSR | stat.S_IWUSR | stat.S_IXUSR | 
                    stat.S_IRGRP | stat.S_IXGRP | stat.S_IROTH | stat.S_IXOTH)
      except:
        pass
        
      try:
        f = open(justin.conf.justinRunDir + '/finder.pid', 'w')
        f.write(str(os.getpid()) + '\n')
        f.close()
      except:
        print('Failed to create '+justin.conf.justinRunDir+'/finder.pid - exiting')
        sys.exit(1)

      # Close stdin now
      si = open('/dev/null', 'r')
      os.dup2(si.fileno(), sys.stdin.fileno())

      while True:

        # Ensure /var/log/justin directory exists
        try:
          os.makedirs('/var/log/justin', 
                      stat.S_IRUSR|stat.S_IWUSR|stat.S_IXUSR|stat.S_IRGRP|stat.S_IXGRP|stat.S_IROTH|stat.S_IXOTH)
        except:
          pass

        # Close and reopen stdout->log file, in case of logrotate
        try:
          close(so)
        except:
          pass

        so = open('/var/log/justin/finder', 'a+')
        os.dup2(so.fileno(), sys.stdout.fileno())

        # Close and reopen stderr->log file, in case of logrotate
        try:
          close(se)
        except:
          pass
          
        se = open('/var/log/justin/finder', 'a+')
        os.dup2(se.fileno(), sys.stderr.fileno())

        try:
          pf = open(justin.conf.justinRunDir + '/finder.pid', 'r')
          pid = int(pf.read().strip())
          pf.close()

          if pid != os.getpid():
            print('new ' + justin.conf.justinRunDir + '/finder.pid - exiting')
            break

        except:
          print('no ' + justin.conf.justinRunDir + '/finder.pid - exiting')
          break

        # Fork a subprocess to run each cycle
        cyclePid = os.fork()

        if cyclePid == 0:
          logLine('=============== Start cycle ===============')
          
          justin.conf.readConf()
          
          try:
            justin.db.conn = MySQLdb.connect(host=justin.conf.mysqlHostname, 
                                  user=justin.conf.mysqlUsername,
                                  passwd=justin.conf.mysqlPassword, 
                                  db=justin.conf.mysqlDbName)
            justin.db.conn.autocommit(False)
            justin.db.cur = justin.db.conn.cursor(MySQLdb.cursors.DictCursor)
          except Exception as e:
            logLine('Failed to create database connection (' + str(e) + ') - skipping cycle')
          else:
            try:
              oneCycle()
            except Exception as e:
              print('Cycle fails with exception ' + str(e))

          logLine('================ End cycle ================')
          sys.exit(0)

        # wait for cyclePid subprocess to finish
        os.waitpid(cyclePid, 0)

        # wait the allotted time between cycles
        time.sleep(sleepSeconds)

      sys.exit(0) # if we break out of the while loop then we exit

