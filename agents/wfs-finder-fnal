#!/usr/bin/env python3
#
#  wfs-finder-fnal - WFS Finder agent for FNAL
# 
#  Andrew McNab, University of Manchester.
#  Copyright (c) 2013-22. All rights reserved.
#
#  Redistribution and use in source and binary forms, with or
#  without modification, are permitted provided that the following
#  conditions are met:
#
#    o Redistributions of source code must retain the above
#      copyright notice, this list of conditions and the following
#      disclaimer.
#    o Redistributions in binary form must reproduce the above
#      copyright notice, this list of conditions and the following
#      disclaimer in the documentation and/or other materials
#      provided with the distribution.
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
#  CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
#  INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
#  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
#  BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
#  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
#  TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
#  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
#  ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
#  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
#  OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#  POSSIBILITY OF SUCH DAMAGE.
#

import os
import sys
import ssl
import stat
import json
import time
import urllib.request
import tempfile

# Only used for get-pfn-locality external script 
import subprocess

# Needs MySQL-python RPM
import MySQLdb

# wfs/conf.py must define these variables in a way that is both
# valid Python and valid Bash!
#
# mysqlUser='username'
# mysqlPassword='PAsSWoRd'
#
import wfs

maxFileFindsPerCycle = 10
sleepSeconds         = 60
maxPins              = 10
pinSeconds           = 3600
pinRecheckSeconds    = 300

class wfsError(Exception):
  pass

def logLine(text):
  sys.stdout.write(time.strftime('%b %d %H:%M:%S [') + str(os.getpid()) + ']: ' + text + '\n')
  sys.stdout.flush()
    
def findReplicaFnalLocality(pfn):
  #
  # THIS FUNCTION IS NOT CURRENTLY USED
  #
  # Use the dCache REST API to find the locality status of a given
  # DUNE xroot PFN at FNAL. PFNs look something like this:
  #
  #     root://fndca1.fnal.gov:1094/pnfs/fnal.gov/usr/dune//tape_backed/
  #           dunepro/protodune/np04/beam/detector/None/raw/07/44/75/71/
  #           np04_raw_run005769_0001_dl10.root
  #

  fnalPrefix = 'root://fndca1.fnal.gov:1094/pnfs/fnal.gov/usr/dune/'

  if not pfn.startswith(fnalPrefix):
    logLine('PFN must start with "' + fnalPrefix + '" but is "' + pfn + '"')
    return None
    
  restURL = ('https://fndca.fnal.gov:3880/api/v1/namespace/pnfs/fnal.gov'
             '/usr/dune' + pfn[len(fnalPrefix):] + '?qos=true&locality=true')

  if True:
    # Use an external script until we get firewall issue resolved
  
    try: 
      outcome = subprocess.run(['/var/lib/wfs/get-pfn-locality', restURL],
                                stdin   = subprocess.DEVNULL,
                                stderr  = subprocess.DEVNULL,
                                stdout  = subprocess.PIPE,
                                timeout = 60
                              ) 

      jsonDict = json.loads(outcome.stdout.decode())
    except Exception as e:
      logLine("get-pfn-locality fails with error: " + str(e))
      return None

  else:
    sslContext = ssl.SSLContext()
    sslContext.load_cert_chain('/tmp/x509up_u%d' % os.getuid())
    sslContext.load_verify_locations(capath = '/etc/grid-security/certificates')

    try:
      response = urllib.request.urlopen(restURL, context = sslContext)

      if response.status != 200:
        logLine('Reading locality from dCache for ' + pfn + ' fails with ' + 
                response.read().decode('utf-8'))
        return None

      jsonDict = json.load(response)

    except Exception as e:
      logLine("Reading QoS JSON from dCache fails with: " + str(e))
      return None
    
  if 'fileLocality' in jsonDict and jsonDict['fileLocality']:
    return jsonDict['fileLocality']
    
  logLine('json from dCache does not include fileLocality!')
  return None

def createReplicasPins(rseID):
  # Find replicas at an RSE where pinning is necessary
  logLine('Look for replicas needing rows in replicas_pins')

  # Make a list of up to maxFileFindsPerCycle replicas which have no
  # row in replicas_pins table but are at FNAL

  query = ('SELECT replicas.replica_id,pfn FROM replicas '
           'LEFT JOIN files ON files.file_id=replicas.file_id '
           'LEFT JOIN replicas_pins '
           'ON replicas_pins.replica_id=replicas.replica_id '
           'WHERE files.state="unallocated" '
           'AND replicas_pins.replica_id IS NULL '
           'AND replicas.rse_id=' + str(rseID) + ' '
           'ORDER BY replicas.replica_id LIMIT ' + str(maxFileFindsPerCycle))

  try:
    wfs.db.cur.execute(query)
    replicas = wfs.db.cur.fetchall()
  except Exception as e:
    logLine('Reading list of replica_pins rows to create fails: '  + str(e))
    return

  for replica in replicas:    
  
    query = ('INSERT INTO replicas_pins SET replica_id=%d' % 
             replica['replica_id'])
             
    try:
      wfs.db.cur.execute(query)
    except Exception as e:
      logLine('Insert into replicas_pins fails: '  + str(e))
      continue
      
    logLine('Created %s entry in replicas_pins' % replica['pfn'])

  # All ok, so commit it all to the DB
  wfs.db.conn.commit()

def sendPinRequest(pfnsPath):
  # Send a pin request to FNAL dCache using the bulk API

  # WE USE AN EXTERNAL SCRIPT AS A WORKAROUND UNTIL WE CAN ACCESS THE ENDPOINT
  # FROM OUTSIDE FNAL

  try: 
    outcome = subprocess.run(['/var/lib/wfs/send-pin-request', pfnsPath],
                             stdin   = subprocess.DEVNULL,
                             stderr  = subprocess.DEVNULL,
                             stdout  = subprocess.PIPE,
                             timeout = 60
                            ) 

    return outcome.stdout.decode()
  except Exception as e:
    logLine("send-pin-request fails with error: " + str(e))
    return None

  #
  # See https://indico.cern.ch/event/1006673/contributions/4225445/attachments/2188118/3697487/bulk-request.pdf
  # and https://docs.google.com/document/d/14sdrRmJts5JYBFKSvedKCxT1tcrWtWchR-PJhxdunT8/
  # for details of the API
  #

  jsonDict = { "activity"  : "PIN",
               "target"    : pfnsPath,
               "arguments" : { "lifetime"      : pinSeconds,
                               "lifetime-unit" : "SECONDS" } }

  httpRequest = urllib.request.Request(
                   'https://fndca.fnal.gov:3880/api/v1/bulk-requests',
                   data = json.dumps(jsonDict).encode(),
                   headers = { 'User-Agent' : 'wfs-finder-fnal' },
                   method = 'POST')

  sslContext = ssl.SSLContext()
  sslContext.load_cert_chain('/tmp/x509up_u%d' % os.getuid())
  sslContext.load_verify_locations(capath = '/etc/grid-security/certificates')

  try:
    response = urllib.request.urlopen(httpRequest, context = sslContext)

    if response.status != 200:
      logLine('Bulk request to dCache fails with HTTP error: ' + 
              response.read().decode('utf-8'))
      return None

  except Exception as e:
    logLine("Bulk request to dCache fails with: " + str(e))
    return None

  # This is the pin reference, as a URL which can be accessed
  return response.getheader('request-url')

def pfnToPnfsPath(pfn):
  #
  # Convert a root:// FNAL dCache PFN from Rucio into a local /pnfs/.. path
  # suitable for sending to the bulk API
  #

  fnalPrefix = 'root://fndca1.fnal.gov:1094/pnfs/fnal.gov/usr/dune/'

  if not pfn.startswith(fnalPrefix):
    logLine('PFN must start with "' + fnalPrefix + '" but is "' + pfn + '"')
    return None
    
  # Note that this prefix removes the double slash after dune!
  return '/pnfs/fnal.gov/usr/dune' + pfn[len(fnalPrefix):]

def countPins(rseID):

  query = ('SELECT COUNT(*) AS count '
           'FROM replicas_pins '
           'LEFT JOIN replicas ON replicas.replica_id=replicas.replica_id '
           'WHERE replicas.rse_id=' + str(rseID) + ' '
           'AND pin_expire_time > NOW() '
           'AND pin_ref<>""')

  try:
    wfs.db.cur.execute(query)
    row = wfs.db.cur.fetchone()
    return int(row['count'])

  except Exception as e:
    logLine('Reading count of FNAL pins fails with: ' + str(e))
    return None

def pinReplicas(rseID):
  # Find replicas which need to be pinned
  logLine('Looking for replicas which still need to be pinned')

  # Make a list of up to maxFileFindsPerCycle replicas to work on 
  # but limited by maxPins

  newPins = 0  
  oldPins = countPins(rseID)
  
  logLine('Currently there are %s requested pins' % str(oldPins))
  
  if oldPins is None:
    return
  
  if oldPins > maxPins:
    # Bail out if we are over the limit before we even start
    logLine('Do not request any pins: %d exceeds limit of %d' %
              (oldPins, maxPins))
    return

  newPins = 0

  query = ('SELECT replicas_pins.replica_id,pfn '
           'FROM replicas_pins '
           'LEFT JOIN replicas ON replicas.replica_id=replicas.replica_id '
           'LEFT JOIN files ON files.file_id=replicas.file_id '
           'WHERE rse_id=' + str(rseID) + ' '
           'AND accessible_until < NOW() '
           'AND pin_retry_time < NOW() '
           'AND files.state="unallocated" '
           'ORDER BY replicas_pins.replica_id LIMIT ' + 
           str(maxFileFindsPerCycle))

  try:
    wfs.db.cur.execute(query)
    needsPinReplicas = wfs.db.cur.fetchall()
  except Exception as e:
    logLine('Reading list of FNAL replicas needing pinning fails with: ' 
            + str(e))
    return
  
  if not needsPinReplicas:
    # Nothing to do
    logLine('No replicas found that need pinning')
    return
 
  for replica in needsPinReplicas:
  
    # Do not create too many pins overall!
    if oldPins + newPins > maxPins:
      logLine('Stop requesting pins: %d exceeds limit of %d' %
              (oldPins + newPins, maxPins))
      break
  
    pfnsPath = pfnToPnfsPath(replica['pfn'])
    pinURL   = sendPinRequest(pfnsPath)
    
    if pinURL:
      try:
        query = ('UPDATE replicas_pins SET '
                 'pin_expire_time=DATE_ADD(NOW(),INTERVAL %d SECOND),'
                 'pin_ref="%s",'
                 'pin_recheck_time=DATE_ADD(NOW(),INTERVAL %d SECOND) '
                 'WHERE replica_id=%d' % 
                 (pinSeconds, 
                  pinURL, 
                  pinRecheckSeconds, 
                  replica['replica_id']))

        print(query)
        wfs.db.cur.execute(query)
      except Exception as e:
        logLine('Failed updating replicas_pins for %s: %s' %
                (replica['pfn'], str(e)))
                
      newPins += 1
      logLine('Requested pin for %s and receive request URL %s' % 
              (replica['pfn'], pinURL))
    
  # All ok, so commit it all to the DB
  wfs.db.conn.commit()

def checkPinRequest(pinURL):
  # Send a pin request to FNAL dCache using the bulk API

  # WE USE AN EXTERNAL SCRIPT AS A WORKAROUND UNTIL WE CAN ACCESS THE ENDPOINT
  # FROM OUTSIDE FNAL

  try: 
    outcome = subprocess.run(['/var/lib/wfs/check-pin-request', pinURL],
                             stdin   = subprocess.DEVNULL,
                             stderr  = subprocess.DEVNULL,
                             stdout  = subprocess.PIPE,
                             timeout = 60
                            ) 

    return json.loads(outcome.stdout.decode())
  except Exception as e:
    logLine("check-pin-request fails with error: " + str(e))
    return None

  #
  # See https://indico.cern.ch/event/1006673/contributions/4225445/attachments/2188118/3697487/bulk-request.pdf
  # and https://docs.google.com/document/d/14sdrRmJts5JYBFKSvedKCxT1tcrWtWchR-PJhxdunT8/
  # for details of the API
  #

  sslContext = ssl.SSLContext()
  sslContext.load_cert_chain('/tmp/x509up_u%d' % os.getuid())
  sslContext.load_verify_locations(capath = '/etc/grid-security/certificates')

  try:
    response = urllib.request.urlopen(pinURL, context = sslContext)

    if response.status != 200:
      logLine('Bulk request to dCache fails with HTTP error: ' + 
              response.read().decode('utf-8'))
      return None

  except Exception as e:
    logLine("Bulk request to dCache fails with: " + str(e))
    return None

  try:
    # If everything works, this string is a JSON document
    return json.load(response)
  except:
    return None
  
def checkPinRequests(rseID):
  # Check on the status of pins we requested and update in DB once available
  logLine('Checking pin requests to see if they are completed')

  # Make a list of up to maxFileFindsPerCycle waiting pins to work on 

  query = ('SELECT replicas_pins.replica_id,pfn,pin_ref,pin_expire_time,'
           'UNIX_TIMESTAMP(pin_expire_time) AS pin_expire_unixtime '
           'FROM replicas_pins '
           'LEFT JOIN replicas ON replicas.replica_id=replicas.replica_id '
           'WHERE rse_id=' + str(rseID) + ' '
           'AND accessible_until < NOW() '
           'AND pin_expire_time > NOW() '
           'AND pin_recheck_time < NOW() '
           'ORDER BY replicas_pins.replica_id LIMIT ' + 
           str(maxFileFindsPerCycle))

  try:
    wfs.db.cur.execute(query)
    waitingPins = wfs.db.cur.fetchall()
  except Exception as e:
    logLine('Reading list of FNAL replicas waiting for pins fails with: ' 
            + str(e))
    return
  
  if not waitingPins:
    # Nothing to do
    return
 
  for pin in waitingPins:

    jsonDict = checkPinRequest(pin['pin_ref'])
    if not jsonDict: 
      # Something went wrong, will be logged already
      continue
    
    if 'status' not in jsonDict:
      logLine('status missing from pin check for %s' % pin['pfn'])
      continue
    
    if jsonDict['status'] == 'COMPLETED':

      try:
        query = ('UPDATE replicas_pins SET '
                 'pin_retry_time="1971-01-01 00:00:00",'
                 'pin_recheck_time="1971-01-01 00:00:00" '
                 'WHERE replica_id=%d' % pin['replica_id'])

        wfs.db.cur.execute(query)

        query = ('UPDATE replicas SET '
                 'accessible_until=FROM_UNIXTIME(%d) '
                 'WHERE replica_id=%d' % 
                 (pin['pin_expire_unixtime'], pin['replica_id']))

        wfs.db.cur.execute(query)
      except Exception as e:
        logLine('Failed updating replicas and pins for %s: %s' %
                (pin['pfn'], str(e)))
        return
    
      logLine('Updated replica %s to be pinned and accessible until %s' %
              (pin['pfn'], pin['pfn_expire_time']))

    else:
      logLine('Request %s for pfn %s is still in state %s' %
              (pin['pin_ref'], pin['pfn'], jsonDict['status']))
        
  # All ok, so commit it all to the DB
  wfs.db.conn.commit()

def getRseID(rseName):

  query = 'SELECT rse_id FROM storages WHERE rse_name="' + rseName + '"'
  
  try:
    wfs.db.cur.execute(query)
    row = wfs.db.cur.fetchone()
    rseID = int(row['rse_id'])
  except Exception as e:
    logLine('Finding rse_id of ' + rseName + ' fails with : ' + str(e))
    return None
    
  return rseID

def oneCycle():

  fnalRseID = getRseID('FNAL_DCACHE')

  # Create rows for replicas absent from replicas_pins  
  createReplicasPins(fnalRseID)
  
  # Try to create pins where needed
  pinReplicas(fnalRseID)
  
  # Check for pinned replicas and update accessible_until
  checkPinRequests(fnalRseID)

  # Release pins of replicas of files which are now processed
  # TO BE DONE

#
# PROGRAM MAIN
#

if __name__ == '__main__':

  if (os.fork() != 0):
    sys.exit() # first parent

  else:
    os.chdir("/")
    os.setsid()
    os.umask(0)

    if os.fork() != 0:
      sys.exit() # second parent

    else:

      try:
        os.makedirs('/var/run/wfs',         
                    stat.S_IRUSR | stat.S_IWUSR | stat.S_IXUSR | 
                    stat.S_IRGRP | stat.S_IXGRP | stat.S_IROTH | stat.S_IXOTH)
      except:
        pass
        
      try:
        f = open('/var/run/wfs/finder-fnal.pid', 'w')
        f.write(str(os.getpid()) + '\n')
        f.close()
      except:
        print('Failed to create /var/run/wfs/finder-fnal.pid - exiting')
        sys.exit(1)

      # Close stdin now
      si = open('/dev/null', 'r')
      os.dup2(si.fileno(), sys.stdin.fileno())

      while True:

        # Ensure /var/log/wfs directory exists
        try:
          os.makedirs('/var/log/wfs', 
                      stat.S_IRUSR|stat.S_IWUSR|stat.S_IXUSR|stat.S_IRGRP|stat.S_IXGRP|stat.S_IROTH|stat.S_IXOTH)
        except:
          pass

        # Close and reopen stdout->log file, in case of logrotate
        try:
          close(so)
        except:
          pass

        so = open('/var/log/wfs/finder-fnal', 'a+')
        os.dup2(so.fileno(), sys.stdout.fileno())

        # Close and reopen stderr->log file, in case of logrotate
        try:
          close(se)
        except:
          pass
          
        se = open('/var/log/wfs/finder-fnal', 'a+')
        os.dup2(se.fileno(), sys.stderr.fileno())

        try:
          pf = open('/var/run/wfs/finder-fnal.pid', 'r')
          pid = int(pf.read().strip())
          pf.close()

          if pid != os.getpid():
            print('new /var/run/wfs/finder-fnal.pid - exiting')
            break

        except:
          print('no /var/run/wfs/finder-fnal.pid - exiting')
          break

        # Fork a subprocess to run each cycle
        cyclePid = os.fork()

        if cyclePid == 0:
          logLine('=============== Start cycle ===============')
          
          try:
            wfs.db.conn = MySQLdb.connect(host="localhost", 
                                  user=wfs.conf.mysqlUser,
                                  passwd=wfs.conf.mysqlPassword, 
                                  db='wfdb')
            wfs.db.conn.autocommit(False)
            wfs.db.cur = wfs.db.conn.cursor(MySQLdb.cursors.DictCursor)
          except Exception as e:
            logLine('Failed to create database connection (' + str(e) + ') - skipping cycle')
          else:
            try:
              oneCycle()
            except Exception as e:
              print('Cycle fails with exception ' + str(e))

          logLine('================ End cycle ================')
          sys.exit(0)

        # wait for cyclePid subprocess to finish
        os.waitpid(cyclePid, 0)

        # wait the allotted time between cycles
        time.sleep(sleepSeconds)

      sys.exit(0) # if we break out of the while loop then we exit

