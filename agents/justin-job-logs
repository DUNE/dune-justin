#!/usr/bin/env python3
#
# justin-job-logs - justIN Finder agent
#
# Copyright 2013-25, Andrew McNab for the University of Manchester
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

import os
import sys
import ssl
import stat
import json
import time
import base64
import hashlib
import tempfile
import subprocess
import urllib.request
import pathlib
import xml.dom.minidom

## Needs MySQL-python RPM
#import MySQLdb

# WE NEED TO REMOVE OLD MySQLdb REFERENCES STILL!
import pymysql
pymysql.install_as_MySQLdb()
MySQLdb=pymysql

# Installed by pip3 install of Rucio
import rucio.client

import justin

sleepSeconds = 60

class justinError(Exception):
  pass

def saveTerminalJobsLogs():

  justin.logLine('Start of saving HTCondor jobs')

  nowTime = int(time.time())

  terminalWithQuotes = []
  for i in justin.jobStatesTerminal:
    terminalWithQuotes.append('"%s"' % i)
    
  # Get a list of jobs in terminal states without saved wrapper logs
  # that finished in the last hour (so we don't try forever)
  query = ('SELECT jobs.justin_job_id,jobsub_id,job_state,'
           'jobs.workflow_id,jobs.stage_id,jobs.site_id,jobs.entry_id '
           'FROM jobs '
           'LEFT JOIN jobs_logs '
           'ON jobs_logs.justin_job_id=jobs.justin_job_id '
           'WHERE wrapper_log="" AND job_state IN (%s) '
           'AND wrapper_tries_left > 0 '
           'ORDER BY jobs.justin_job_id LIMIT 1000' 
           % ','.join(terminalWithQuotes))

  dbJobRows = justin.select(query)

  # Make a set of unique HTCondor schedd names from the database
  schedds = set()
  for dbJobRow in dbJobRows:
    schedds.add( dbJobRow['jobsub_id'].split('@',1)[1] )

  # Gather details of HTCondor jobs from our set of schedds
  condorJobs = {}  

  for scheddHostname in schedds:
    try: 
      outcome = subprocess.run(
               ['/usr/bin/condor_q',
                '-name',
                scheddHostname,
                '-pool',
                justin.htcondorCollectors[0],
                '-long:json',
                '-attributes',
                'clusterid,procid,jobstatus,enteredcurrentstatus'
               ],
               env      = dict(os.environ, 
                 BEARER_TOKEN_FILE='/etc/justin-secrets/bearer-token-file'),
               encoding = 'utf-8',
               stderr   = subprocess.STDOUT,
               stdout   = subprocess.PIPE,
               timeout  = 120
                            ) 
    except Exception as e:
      justin.logLine("condor_q fails with error: " + str(e))
      return

    justin.logLine('condor_q exit code: ' + str(outcome.returncode))
    
    if outcome.returncode != 0:
      justin.logLine("condor_q fails with return code %d" % outcome.returncode)
      return

    try:
      jsonJobs = json.loads(outcome.stdout)
    except:
      justin.logLine('Failed to load JSON output by condor_q')
      return

    for jsonJob in jsonJobs:  
      if 'jobstatus' not in jsonJob or \
         'enteredcurrentstatus' not in jsonJob or \
         'clusterid' not in jsonJob or \
         'procid' not in jsonJob:
        continue
      
      condorJobs['%d.%d@%s' % 
                 (jsonJob['clusterid'], 
                  jsonJob['procid'],
                  scheddHostname)] = \
           (jsonJob['jobstatus'], jsonJob['enteredcurrentstatus'])

  if not condorJobs:
    # If we get nothing at all then something must be going wrong
    justin.logLine('Failed to find any job info from HTCondor')
    return

  # Go back to the list of jobs from the database that have no wrapper log
  # saved and check each one against its HTCondor status, and try to fetch
  # logs
  for dbJobRow in dbJobRows:
    
    if dbJobRow['jobsub_id'] not in condorJobs:
      # if Condor is unaware of the job, then we're never going to get it
      justin.logLine('Job %s is not known to HTCondor - put placeholder log' 
              % dbJobRow['jobsub_id'])
      try:
        justin.insertUpdate('UPDATE jobs_logs '
              'SET wrapper_tries_left=0,saved_time=NOW() '
              'WHERE justin_job_id=%d' % dbJobRow['justin_job_id'])
      except Exception as e:
        # Log but otherwise ignore error
        justin.logLine('Failed to add placeholder wrapper log for %s: %s'
                       % (dbJobRow['jobsub_id'], str(e)))
    
      continue      

    (jobStatus, enteredCurrentStatus) = condorJobs[dbJobRow['jobsub_id']]

    # If not yet in an HTCondor terminal state them skip for now
    if ((jobStatus != justin.htcondorREMOVED) and
        (jobStatus != justin.htcondorCOMPLETED)):
      justin.logLine('Job %s is in HTCondor state %d - skip for now' %
                (dbJobRow['jobsub_id'], jobStatus))
      continue

    # Try to fetch the HTCondor job log
    try:
      wrapperLog = fetchHTCondorJobLog(dbJobRow['jobsub_id'])
    except Exception as e:
      justin.logLine('Failed fetching wrapper job log for %s: %s' %
                     (dbJobRow['jobsub_id'], str(e)))

      try:
        justin.insertUpdate('UPDATE jobs_logs '
                            'SET wrapper_tries_left=wrapper_tries_left-1 '
                            'WHERE wrapper_tries_left > 0 AND '
                            'justin_job_id=%d' % dbJobRow['justin_job_id'])
      except Exception as e:
        justin.logLine('Failed to update wrapper_tries_left (%s) - ignoring'
                       % str(e))
      continue
      
    # Save the HTCondor job log
    try:
      justin.insertUpdate('UPDATE jobs_logs '
              'SET wrapper_log="%s",saved_time=NOW() '
              'WHERE justin_job_id=%d' % 
              (wrapperLog.replace('\\','\\\\').replace('"','\\"'), 
               dbJobRow['justin_job_id']))
    except Exception as e:
      justin.logLine('Failed to save wrapper job log (%s) - skipping'
                     % str(e))
      continue
    else:
      justin.logEvent(eventTypeID = justin.event_JOB_HTCONDOR_LOGS_CACHED,
                      workflowID  = dbJobRow['workflow_id'],
                      stageID     = dbJobRow['stage_id'],
                      siteID      = dbJobRow['site_id'],
                      entryID     = dbJobRow['entry_id'],
                      justinJobID = dbJobRow['justin_job_id'])

    # If we got this far, the job is in a terminal state, the wrapper log
    # is saved, and we can remove it from the queue    
    try: 
      outcome = subprocess.run(
               ['/usr/bin/condor_rm',
                '-name',
                dbJobRow['jobsub_id'].split('@')[1],
                dbJobRow['jobsub_id'].split('@')[0],
                '-pool',
                justin.htcondorCollectors[0],
               ],
               env      = dict(os.environ, 
                 BEARER_TOKEN_FILE='/etc/justin-secrets/bearer-token-file'),
               encoding = 'utf-8',
               stderr   = subprocess.STDOUT,
               stdout   = subprocess.PIPE,
               timeout  = 120
                            ) 
    except Exception as e:
      justin.logLine('condor_rm fails with error: ' + str(e))
      continue

    justin.logLine('condor_rm exit code: ' + str(outcome.returncode))
    
    if outcome.returncode != 0:
      justin.logLine('condor_rm fails with return code %d' % outcome.returncode)
    else:
      justin.logEvent(eventTypeID = justin.event_JOB_REMOVED_FROM_HTCONDOR,
                      workflowID  = dbJobRow['workflow_id'],
                      stageID     = dbJobRow['stage_id'],
                      siteID      = dbJobRow['site_id'],
                      entryID     = dbJobRow['entry_id'],
                      justinJobID = dbJobRow['justin_job_id'])

      justin.logLine('Job %s removed from queue' % dbJobRow['jobsub_id'])

  # All ok, so commit it all to the DB
  justin.conn.commit()

def oneCycle():

#  findTokensToRefresh()
#  findSubmittedWorkflows()
#
#  pingRucioMilliseconds = justin.pingRucioMilliseconds()
#
#  justin.logLine('pingRucioMilliseconds returns %d' % pingRucioMilliseconds)
#  if pingRucioMilliseconds < justin.overloadRucioMilliseconds:
#    findFiles()
#    findReplicas()
#  else:
#    justin.logLine('Skip findFiles() and findReplicas()')

#  findProblemWorkflows()
#  findWorkflowsToFinish()
#  finishWorkflows()
#  findStalledAbortedJobs()
  saveTerminalJobsLogs()
#  manageCaches()

#  # Is it time to update CILogon Jwks
#  try:
#    lastUpdateCondorJobs = \
#              os.stat('/var/run/justin/last-updates/condorjobs').st_mtime
#  except:
#    lastUpdateCondorJobs = 0
#
#  if lastUpdateCondorJobs + updateCondorJobs < time.time():
#    pathlib.Path('/var/run/justin/last-updates/condorjobs').touch(exist_ok=True)
#    findStalledCondorJobs()
#
# PROGRAM MAIN
#

if __name__ == '__main__':
  justin.agentMainLoop('finder', oneCycle, sleepSeconds, 3600)
