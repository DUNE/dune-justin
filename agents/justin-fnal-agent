#!/usr/bin/env python3
#
# justin-fnal-agent - justIN FNAL agent
#
# Copyright 2013-24, Andrew McNab for the University of Manchester
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

import os
import sys
import ssl
import stat
import json
import time
import random
import base64
import hashlib
import tempfile
import subprocess
import urllib.request
import pathlib
import xml.dom.minidom

## Needs MySQL-python RPM
#import MySQLdb

# WE NEED TO REMOVE OLD MySQLdb REFERENCES STILL!
import pymysql
pymysql.install_as_MySQLdb()
MySQLdb=pymysql

import justin

maxFileFindsPerCycle = 500
sleepSeconds         = 60
updateCondorJobs     = 3600 

class justinError(Exception):
  pass

def getRcdsCvmfsPath(rcdsServer, hashString):

  httpRequest = urllib.request.Request('https://%s//pubapi/exists?cid=dune/%s'
                                       % (rcdsServer, hashString),
                                       data = hashString,
                                       headers = { 'User-Agent':
                                                   'justin-finder' },
                                       method = 'GET')

  sslContext = ssl.SSLContext()
  sslContext.load_cert_chain('/tmp/x509up_u%d' % os.getuid())
  sslContext.load_verify_locations(capath = '/etc/grid-security/certificates')

  try:
    response = urllib.request.urlopen(httpRequest, context = sslContext)
    responseString = response.read().decode('utf-8')
  except:
    return None

  if responseString.startswith('PRESENT:'):
    return responseString[8:]
    
  return None

def uploadRcdsTarfile(rcdsServer, hashString, tarFileContents):

  httpRequest = urllib.request.Request('https://%s//pubapi/publish?cid=dune/%s'
                                       % (rcdsServer, hashString),
                                       data = tarFileContents,
                                       headers = { 'User-Agent': 
                                                   'justin-finder' },
                                       method = 'POST')

  sslContext = ssl.SSLContext()
  sslContext.load_cert_chain('/tmp/x509up_u%d' % os.getuid())
  sslContext.load_verify_locations(capath = '/etc/grid-security/certificates')

  try:
    response = urllib.request.urlopen(httpRequest, context = sslContext)
  except Exception as e:
    justin.logLine('RCDS upload fails: ' + str(e))
    return False

  try:
    responseString = response.read().decode('utf-8')
  except Exception as e:
    justin.logLine('Failed getting RCDS upload response string: ' + str(e))
    return False

  justin.logLine('RCDS upload response: ' + responseString)

  if response.status != 200:
    justin.logLine('RCDS upload fails with HTTP code %d' % response.status)
    return False
  
  if responseString[:2] != 'OK':
    justin.logLine('RCDS upload does not respond with OK')
    return False
    
  return True

def checkGitRepo(gitRepo):
  # Check, and if necessary, upload Git repo to RCDS
#{ 'workflow_id' : row['workflow_id'],
#                        'stage_id'    : row['stage_id'],
#                        'git_repo'    : row['git_repo'],
#                        'git_commit'  : row['git_commit']
#                      }
  rcdsServer = random.choice(justin.rcdsServers)

  (nameRepo, tag) = gitRepo['git_repo'].split(':',1)
  (name, repo)    = nameRepo.split('/',1)
    
  # We need to upload the tar file to RCDS, so first create it using 
  # the Git commit not the tag!
  try:
    tmpDir = tempfile.TemporaryDirectory()
    waitStatus = os.system('export HOME=/home/dunejustin && cd %s && '
                      '/usr/bin/git clone https://github.com/%s/%s.git && '
                      'cd %s && '
                      '/usr/bin/git checkout %s && '
                      'rm -Rf .git .github && '
                      '/usr/bin/tar cvf ../tmp.tar --sort=name --mtime=@0 .'
                      % (tmpDir.name, name, repo, repo, gitRepo['git_commit'])
                          )

    ret = os.waitstatus_to_exitcode(waitStatus)
    if ret:
      raise RuntimeError('git clone / tar returns error %d' % ret)
  except Exception as e:
    justin.logLine('Failed to do git clone / tar creation: ' + str(e))
    return None

  try:
# SHOULD CHECK THIS IS NOT ABSURDLY LARGE BEFORE WE SLURP IT INTO MEMORY!!!
    tarFileContents = open(tmpDir.name + '/tmp.tar', 'rb').read()
    rcdsHash        = hashlib.sha1(tarFileContents).hexdigest()
  except Exception as e:
    justin.logLine('Failed to read and hash tar file tmp.tar: ' + str(e))
    return None

  if not uploadRcdsTarfile(rcdsServer, rcdsHash, tarFileContents):
    justin.logLine('Failed to upload tar file to RCDS for w%ds%d' 
                   % (gitRepo['workflow_id'], gitRepo['stage_id']))
    return None
    
  for i in range(0,12):
    time.sleep(5)
    
    rcdsPath = getRcdsCvmfsPath(rcdsServer, rcdsHash)

    if rcdsPath:
      return { 'rcds_path'  : rcdsPath, 
               'rcds_hash'  : rcdsHash }

  # Failed to get path despite waiting and after many tries
  return None

def processGitRepo(gitRepo):
  # Process one repo
  retDict = checkGitRepo(gitRepo)
  if not retDict:
    justin.logLine('Failed to check git repo / RCDS - exit for now')
    return
      
  # Success! Tell justIN it worked
  httpRequest = urllib.request.Request(
    'https://justin-ui-%s.dune.hep.ac.uk/api/fnal-agent/git-repo-update'
                                       % proDev,
                                       headers = { 'User-Agent': 
                                                   'justin-fnal-agent' },
                                       data = ,
                                       method = 'POST')

  sslContext = ssl.SSLContext()
  sslContext.load_verify_locations(capath = '/etc/grid-security/certificates')

  try:
    response = urllib.request.urlopen(httpRequest, context = sslContext)
  except Exception as e:
    justin.logLine('POST git-repo-update fails: ' + str(e))
  else:
    justin.logLine('Processed repo %d' % len(workflows))

def findUnprocessedGitRepos():
  # Find Git Repos waiting to be uploaded to RCDS
  justin.logLine('Start of finding unprocessed Git Repos')

  for proDev in ('pro', 'int', 'dev'):
    httpRequest = urllib.request.Request(
       'https://justin-ui-%s.dune.hep.ac.uk/api/fnal-agent/git-repos-to-do'
                                       % proDev,
                                       headers = { 'User-Agent': 
                                                   'justin-fnal-agent' },
                                       method = 'GET')

    sslContext = ssl.SSLContext()
    sslContext.load_verify_locations(capath = '/etc/grid-security/certificates')

    try:
      response = urllib.request.urlopen(httpRequest, context = sslContext)
    except Exception as e:
      justin.logLine('GET git-repos-to-do fails: ' + str(e))
      continue

    try:
      responseString = response.read().decode('utf-8')
      reposList = json.loads(responseString)
    except Exception as e:
      justin.logLine('Failed getting git-repos-to-do : ' + str(e))
      continue

    justin.logLine('git-repos-to-do response: ' + str(reposList))

    for gitRepo in reposList:
      processGitRepo(gitRepo)

def oneCycle():
  random.seed()
  findUnprocessedGitRepos()

#
# PROGRAM MAIN
#

if __name__ == '__main__':
  justin.agentMainLoop('fnal-agent', oneCycle, sleepSeconds)
