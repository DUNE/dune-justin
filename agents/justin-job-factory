#!/usr/bin/env python3
#
# justin-job-factory - justIN Job Factory
#
# Copyright 2013-23, Andrew McNab for the University of Manchester
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

import os
import sys
import stat
import time
import secrets
import tempfile
import subprocess

# Needs MySQL-python RPM
import MySQLdb

# justin/conf.py must define these variables in a way that is both
# valid Python and valid Bash!
#
# mysqlUser='username'
# mysqlPassword='PAsSWoRd'
#
import justin

sleepSeconds      = 60
jobsPerCluster    = 192

# DUNE names of all sites we always ignore. This is for sites unknown to us 
# because they do not have pilot factory entries. Known sites are disabled in
# the database.
alwaysIgnoreSitesList = [ ] # [ 'UConn-HPC' ] 

def logLine(text):
  sys.stdout.write(time.strftime('%b %d %H:%M:%S [') + str(os.getpid()) + ']: ' + text + '\n')
  sys.stdout.flush()

def updateSiteCounts():

  try:
    justin.db.cur.execute('UPDATE sites SET '
        'submitted_jobs='
        '(SELECT COUNT(*) FROM jobs WHERE '
         '(sites.site_id = jobs.site_id) AND '
         '(jobs.submitted_time > DATE_SUB(NOW(),INTERVAL 24 HOUR)) AND '
         '(allocation_state = "submitted")),'
        'running_jobs='
        '(SELECT COUNT(*) FROM jobs WHERE '
         'sites.site_id=jobs.site_id AND allocation_state '
         'IN ("started","processing","outputting"))')
  except Exception as e:
    logLine('Update site counts fails with: ' + str(e))
  else:
    justin.db.conn.commit()
    logLine('Updated site job counts')
   
def submitJobs(numberToSubmit, 
               firstSiteID,
               desiredSiteNames,
               minProcessors,
               maxProcessors,
               minRssBytes,
               maxRssBytes,
               maxWallSeconds,
               forAwt = False):

  #Â If targetting one site, then firstSiteID should be non-zero
  # desiredSiteNames is a comma separated list of DUNE site names
  # to match GLIDEIN_DUNESite classads

  logLine('submitJobs %d %d %s %d-%d %d-%d %d' %
          (numberToSubmit,
           firstSiteID,
           desiredSiteNames,
           minProcessors,
           maxProcessors,
           minRssBytes,
           maxRssBytes,
           maxWallSeconds))

  justinJobSecret = secrets.token_urlsafe(64)

  try: 
    outcome = subprocess.run(
               ["/var/lib/justin/justin-submit-wrapper",
                str(numberToSubmit),
                desiredSiteNames,
                str(int(maxRssBytes / 1024)),
                str(maxProcessors),
                str(maxWallSeconds),
                justinJobSecret,
               ],
               stdin   = subprocess.DEVNULL,
               stderr  = subprocess.STDOUT,
               stdout  = subprocess.PIPE,
               timeout = 60
                            ) 
  except Exception as e:
    logLine("run-jobsub-submit fails with error: " + str(e))
    return

  logLine(outcome.stdout.decode())
  logLine('run-jobsub-submit exit code: ' + str(outcome.returncode))

  # Scrape the stdout to find the Jobsub job ID
  majorJobsubJobID = None
  jobsubHost       = None
  
  for line in outcome.stdout.decode().splitlines():
    if 'job(s) submitted to cluster' in line:
      try:
        jobsubJobID      = line.split()[5]
        majorJobsubJobID = jobsubJobID.split('.')[0]
        jobsubHost       = 'justin-prod-sched01.dune.hep.ac.uk'
        break
      except:
        pass
   
  if not majorJobsubJobID or not jobsubHost:
    # What??
    logLine("Valid jobsub job ID not found after submitting job(s)!")
    return

  logLine("Submitted cluster %s to %s%s" % 
          (jobsubJobID, 
           desiredSiteNames,
           ' (AWT job)' if forAwt else ''))

  # Record the job(s) in the database
  for i in range(0, numberToSubmit):
    try:
      justin.db.cur.execute('INSERT INTO jobs '
                  'SET factory_name="%s",'
                  'site_id=%d,'
                  'min_processors=%d,'
                  'max_processors=%d,'
                  'min_rss_bytes=%d,'
                  'max_rss_bytes=%d,'
                  'max_wall_seconds=%d,'
                  'submitted_time=NOW(),'
                  'need_to_fetch_jobsub_log=%s,'
                  'for_awt=%s,'
                  'justin_job_secret="%s",'
                  'jobscript_secret="%s",'
                  'jobsub_id="%s.%d@%s"'
                  % (os.uname()[1],
                     firstSiteID,
                     minProcessors,
                     maxProcessors,
                     minRssBytes,
                     maxRssBytes,
                     maxWallSeconds,
                     "TRUE" if i == 0 else "FALSE",
                     "TRUE" if forAwt else "FALSE",
                     justinJobSecret,
                     secrets.token_urlsafe(64),
                     majorJobsubJobID, i, jobsubHost)
                 )

    except Exception as e:
      # But try to keep going
      logLine('INSERT INTO jobs fails with: ' + str(e))

  # Record that we've done a submission if just for one site
  if firstSiteID:
    try:
      justin.db.cur.execute('UPDATE sites SET last_submitted_time=NOW() '
                            'WHERE site_id=%d' % firstSiteID)

    except Exception as e:
      # But try to keep going
      logLine('Update last_submitted_time fails with: ' + str(e))

  # Commit it all to the DB
  justin.db.conn.commit()

def anySiteJobs():
  
  for (processors, bytesPerProcessor, numberUnallocated) \
   in justin.getUnallocatedCounts():
    logLine('%d processor(s) %d MB: %d unallocated files' % 
            (processors, 
            int((bytesPerProcessor * processors) / (1024 * 1024)),
            numberUnallocated))

    if numberUnallocated > jobsPerCluster:
      numberUnallocated = jobsPerCluster

    try:
      desiredRows = justin.db.select('SELECT site_name '
                     'FROM sites '
                     'LEFT JOIN get_stage_cache '
                     'ON get_stage_cache.site_id=sites.site_id '
                     'AND get_stage_cache.min_processors=%d '
                     'AND get_stage_cache.max_processors=%d '
                     'AND get_stage_cache.min_rss_bytes=%d '
                     'AND get_stage_cache.max_rss_bytes=%d '
                     'AND get_stage_cache.max_wall_seconds=%d '
                     'WHERE get_stage_cache.site_id IS NOT NULL '
                     'AND sites.enabled '
                     'ORDER by site_name' % 
                     (processors - 1, 
                      processors, 
                      bytesPerProcessor * (processors - 1),
                      bytesPerProcessor * processors,
                      86400))
    except Exception as e:
      logLine('Failed getting list of desired sites for get_stage_cache: ' + 
              str(e))
      return

    desiredSites = set() # use a set to remove duplicates
    for desiredRow in desiredRows:
      if desiredRow['site_name'] not in alwaysIgnoreSitesList:
        desiredSites.add(desiredRow['site_name'])

    try:    
        query = ('SELECT COUNT(*) AS count FROM jobs '
                       'WHERE allocation_state = "submitted" AND '
                       'min_processors < %d AND '
                       'max_processors >= %d AND '
                       'min_rss_bytes < %d AND '
                       'max_rss_bytes >= %d AND '
                       'submitted_time > DATE_SUB(NOW(),INTERVAL 1 HOUR) AND '
                       'NOT for_awt' %
                       (processors,
                        processors,
                        bytesPerProcessor * processors,
                        bytesPerProcessor * processors
                       ))
        logLine('numberSubmitted query: ' + query)
        submitted = justin.db.select(query, justOne = True)
        numberSubmitted = submitted['count']
    except Exception as e:
        logLine('Failed getting count of submitted jobs: ' + str(e))
        continue
          
    logLine('%d processors %d MB has %d submitted and %d unallocated' % 
            (processors, 
             int((bytesPerProcessor * processors) / (1024 * 1024)),
             numberSubmitted, numberUnallocated))
            
    if desiredSites and (numberUnallocated > numberSubmitted):
      desiredSitesStr = ','.join(desiredSites)
      
      logLine('Submit jobs with desired sites: ' + desiredSitesStr)
      submitJobs(numberToSubmit = numberUnallocated - numberSubmitted,
               firstSiteID      = 0,
               desiredSiteNames = desiredSitesStr,
               minProcessors    = processors - 1,
               maxProcessors    = processors,
               minRssBytes      = bytesPerProcessor * (processors - 1),
               maxRssBytes      = bytesPerProcessor * processors,
               maxWallSeconds   = 86400,
               forAwt           = False)

def awtJobsToSites():
  # Go through the sites deciding where to submit AWT jobs

  try:
    rows = justin.db.select('SELECT site_id,'
      'site_name,'
      'jobsub_site_name '
      'FROM sites '
      'WHERE '
      '((SELECT COUNT(*) FROM jobs WHERE'
      '  jobs.site_id=sites.site_id AND for_awt AND'
      '  submitted_time > DATE_SUB(NOW(),INTERVAL 6 HOUR)) = 0) AND '
      '(last_seen_time > DATE_SUB(NOW(),INTERVAL %d DAY)) '
      'ORDER BY site_name' % justin.unseenSitesExpireDays
      # Should change this to random order?
               )

  except Exception as e:
    logLine('Failed getting list of sites for AWT jobs: ' + str(e))
    return
  
  for row in rows:
      submitJobs(numberToSubmit = 1,
                 firstSiteID      = row['site_id'],
                 desiredSiteNames = row['site_name'],
                 minProcessors    = 0,
                 maxProcessors    = 1,
                 minRssBytes      = 0,
                 maxRssBytes      = 1024 * 1024 * 1024,
                 maxWallSeconds   = 3600,
                 forAwt           = True)
    
def oneCycle():
  # Update the database with the states of submitted jobsub jobs

#  logLine("updateSiteCounts()")
#  updateSiteCounts()

  logLine("awtJobsToSites()")
  awtJobsToSites()

  logLine("anySiteJobs()")
  anySiteJobs()

#
# PROGRAM MAIN
#

if __name__ == '__main__':

  if (os.fork() != 0):
    sys.exit() # first parent

  else:
    os.chdir("/")
    os.setsid()
    os.umask(0)

    if os.fork() != 0:
      sys.exit() # second parent

    else:

      try:
        os.makedirs('/var/run/justin',         
                    stat.S_IRUSR | stat.S_IWUSR | stat.S_IXUSR | 
                    stat.S_IRGRP | stat.S_IXGRP | stat.S_IROTH | stat.S_IXOTH)
      except:
        pass
        
      try:
        f = open('/var/run/justin/job-factory.pid', 'w')
        f.write(str(os.getpid()) + '\n')
        f.close()
      except:
        print('Failed to create /var/run/justin/job-factory.pid - exiting')
        sys.exit(1)

      # Close stdin now
      si = open('/dev/null', 'r')
      os.dup2(si.fileno(), sys.stdin.fileno())

      while True:

        # Ensure /var/log/justin directory exists
        try:
          os.makedirs('/var/log/justin', 
                      stat.S_IRUSR|stat.S_IWUSR|stat.S_IXUSR|stat.S_IRGRP|stat.S_IXGRP|stat.S_IROTH|stat.S_IXOTH)
        except:
          pass

        # Close and reopen stdout->log file, in case of logrotate
        try:
          close(so)
        except:
          pass

        so = open('/var/log/justin/job-factory', 'a+')
        os.dup2(so.fileno(), sys.stdout.fileno())

        # Close and reopen stderr->log file, in case of logrotate
        try:
          close(se)
        except:
          pass
          
        se = open('/var/log/justin/job-factory', 'a+')
        os.dup2(se.fileno(), sys.stderr.fileno())

        try:
          pf = open('/var/run/justin/job-factory.pid', 'r')
          pid = int(pf.read().strip())
          pf.close()

          if pid != os.getpid():
            print('new /var/run/justin/job-factory.pid - exiting')
            break

        except:
          print('no /var/run/justin/job-factory.pid - exiting')
          break

        # Fork a subprocess to run each cycle
        cyclePid = os.fork()

        if cyclePid == 0:
          logLine('=============== Start cycle ===============')
          
          justin.conf.readConf()
          
          try:
            justin.db.conn = MySQLdb.connect(host=justin.conf.mysqlHostname, 
                                  user=justin.conf.mysqlUsername,
                                  passwd=justin.conf.mysqlPassword, 
                                  db=justin.conf.mysqlDbName)
            justin.db.conn.autocommit(False)
            justin.db.cur = justin.db.conn.cursor(MySQLdb.cursors.DictCursor)
          except Exception as e:
            logLine('Failed to create database connection (' + str(e) + ') - skipping cycle')
          else:
            try:
              oneCycle()
            except Exception as e:
              print('Cycle fails with exception ' + str(e))

          logLine('================ End cycle ================')
          sys.exit(0)

        # wait for cyclePid subprocess to finish
        os.waitpid(cyclePid, 0)

        # wait the allotted time between cycles
        time.sleep(sleepSeconds)

      sys.exit(0) # if we break out of the while loop then we exit

