#!/usr/bin/env python3
#
#  wfs-finder - WFS Finder agent
# 
#  Andrew McNab, University of Manchester.
#  Copyright (c) 2013-22. All rights reserved.
#
#  Redistribution and use in source and binary forms, with or
#  without modification, are permitted provided that the following
#  conditions are met:
#
#    o Redistributions of source code must retain the above
#      copyright notice, this list of conditions and the following
#      disclaimer.
#    o Redistributions in binary form must reproduce the above
#      copyright notice, this list of conditions and the following
#      disclaimer in the documentation and/or other materials
#      provided with the distribution.
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
#  CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
#  INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
#  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
#  BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
#  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
#  TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
#  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
#  ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
#  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
#  OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#  POSSIBILITY OF SUCH DAMAGE.
#

import os
import sys
import ssl
import stat
import json
import time
import urllib.request
import pathlib
import tempfile
import xml.dom.minidom

# Needs MySQL-python RPM
import MySQLdb

# Installed by pip install of Rucio
import rucio.client

# wfs/conf.py must define these variables in a way that is both
# valid Python and valid Bash!
#
# mysqlUser='username'
# mysqlPassword='PAsSWoRd'
#
import wfs

maxFileFindsPerCycle = 10
sleepSeconds         = 60

class wfsError(Exception):
  pass

def logLine(text):
  sys.stdout.write(time.strftime('%b %d %H:%M:%S [') + str(os.getpid()) + ']: ' + text + '\n')
  sys.stdout.flush()

def addFilesMonteCarlo(requestID, count):
  # Add dummy files to keep track of Monte Carlo processing
  
  for i in range(1, count + 1):
    try:
      query = ('INSERT INTO files SET state="unallocated",'
               'request_id=%d,file_did="monte-carlo-%06d-%06d"' 
               % (requestID, requestID, i)
              )

      wfs.db.cur.execute(query)
    except Exception as e:
      logLine('Failed inserting dummy Monte Carlo file for request %d: %s' 
              % (requestID, str(e)))
      return

    try:
      query = ('INSERT INTO replicas SET rse_id=%d,file_id=%d,'
               'pfn="%06d"'
               % (wfs.conf.MonteCarloRseID, wfs.db.cur.lastrowid, i))

      wfs.db.cur.execute(query)
    except Exception as e:
      logLine('Failed inserting dummy Monte Carlo replica for request %d: %s' 
               % (requestID, str(e)))
      return
 
  try:
    query = ('UPDATE requests SET refind_last_time=NOW() WHERE request_id=' +
             str(requestID))

    wfs.db.cur.execute(query)
  except Exception as e:
    logLine('Failed updating request ' + str(requestID))

  # All ok, so commit it all to the DB
  wfs.db.conn.commit()

def findFilesRucio(didClient, requestID, scope, name):
  # Find files to be processed for each request in the finding state

  try:
    didsList = didClient.list_files(scope, name)
  except Exception as e:
    logLine("Reading file list from Rucio fails with: " + str(e))
    return

  for did in didsList:  
    try:
      query = ('INSERT INTO files SET '
               'request_id=' + str(requestID) + ',' +
               'file_did="' + did['scope'] + ':' + did['name'] + '" '
               'ON DUPLICATE KEY UPDATE request_id=request_id'
              )

      wfs.db.cur.execute(query)
    except Exception as e:
      logLine('Failed inserting DID %:%s' % (did['scope'], did['name']))
      return

  # All files found for this request so update its state
  try:
    query = ('UPDATE requests SET find_last_time=NOW() WHERE request_id=' +
             str(requestID))

    wfs.db.cur.execute(query)
  except Exception as e:
    logLine('Failed updating request ' + str(requestID))

  # All ok, so commit it all to the DB
  wfs.db.conn.commit()

def findFilesMetaCat(requestID, mql):
  # Find files matching the mql query from MetaCat

  try:
    response = urllib.request.urlopen(
       "https://metacat.fnal.gov:9443/dune_meta_demo/app/data/query?"
       "with_meta=no&with_provenance=no",
       data = mql.encode()           )

    if response.status != 200:
      logLine("Reading files list from MetaCat fails with HTTP code "
              + str(response.status))
      return

    filesList = json.load(response)
  except Exception as e:
    logLine("Reading files list from MetaCat fails with: " + str(e))
    return

  for fileDict in filesList:
  
    if 'namespace' not in fileDict or not fileDict['namespace'] \
       or 'name' not in fileDict or not fileDict['name']:
      logLine('Ignore file with invalid SCOPE:NAME from MetaCat: '
              + str(fileDict))
      continue

    try:
      query = ('INSERT INTO files SET '
               'request_id=' + str(requestID) + ',' +
               'file_did="' + fileDict['namespace'] + ':' 
                + fileDict['name'] + '" '
               'ON DUPLICATE KEY UPDATE request_id=request_id'
              )

      wfs.db.cur.execute(query)
    except Exception as e:
      logLine('Failed inserting DID %:%s' % 
              ( fileDict['namespace'], fileDict['name'] ))
      return

  # All files found for this request so update its state
  try:
    query = ('UPDATE requests SET find_last_time=NOW() WHERE request_id=' +
             str(requestID))

    wfs.db.cur.execute(query)
  except Exception as e:
    logLine('Failed updating request ' + str(requestID))

  # All ok, so commit it all to the DB
  wfs.db.conn.commit()

def findFiles():
  # Find files to be processed for each request in the finding state
  # By default we use MetaCat, but MQLs starting rucio-dataset or monte-carlo 
  # are handled directly.

  query = ('SELECT request_id,mql FROM requests '
           'WHERE state="running" AND '
           '((refind_seconds=0 AND refind_last_time="%s")'
           ' OR '
           ' (refind_seconds > 0 AND '
           ' DATE_ADD(refind_last_time, INTERVAL refind_seconds SECOND) '
           ' < NOW() AND refind_start_time < NOW() AND '
           'refind_end_time >= NOW())) '
           'ORDER BY request_id' % wfs.db.unixEpoch)

  wfs.db.cur.execute(query)

  findingRequests = wfs.db.cur.fetchall()
  if not findingRequests:  
    # Nothing to do
    return

  didClient = None

  for request in findingRequests:
    mqlSplit = request['mql'].split()

    # Request for a Rucio dataset: "rucio-dataset SCOPE:NAME"
    if len(mqlSplit) == 2 and mqlSplit[0] == 'rucio-dataset':

      if not didClient:      
       # Only set up Rucio if we see a rucio-dataset
       try:
         didClient = rucio.client.didclient.DIDClient()
       except Exception as e:
         logLine("Connect to Rucio fails with: " + str(e))
         continue

      datasetSplit = mqlSplit[1].split(':')
      if len(datasetSplit) == 2:
        findFilesRucio(didClient,
                       request['request_id'], 
                       datasetSplit[0], 
                       datasetSplit[1])
        
    # Monte Carlo request with a count
    elif len(mqlSplit) == 2 and mqlSplit[0] == 'monte-carlo':
      
      try:
        count = int(mqlSplit[1])
      except:
        continue
      
      addFilesMonteCarlo(request['request_id'], count)

    else:
    
      findFilesMetaCat(request['request_id'], request['mql'])

    # Update the stats for the first stage
    wfs.allocator.updateStageCounts(request['request_id'], 1)
    wfs.db.conn.commit()

def findReplicas():
  # Find replicas of files in the finding state

  # Make a list of up to maxFileFindsPerCycle files to work on 
  # but only for Rucio DIDs in scope:name format
  didsList = []
  query = ('SELECT request_id,stage_id,file_id,file_did FROM files '
           'WHERE state="finding" '
           'AND file_did LIKE "%:%" '
           'ORDER BY file_id LIMIT ' + str(maxFileFindsPerCycle))
  
  wfs.db.cur.execute(query)
  findingFiles = wfs.db.cur.fetchall()
  
  if not findingFiles:
    # Nothing to do
    return

  # Receives a list of unique (requestID,stageID) combinations
  requestsStages = set()
  
  for fileRow in findingFiles:
    didSplit = fileRow['file_did'].split(':')
    didsList.append({ 'scope': didSplit[0], 'name' : didSplit[1] })
        
  # Check we can talk to Rucio
  try:
    repClient = rucio.client.replicaclient.ReplicaClient()
  except Exception as e:
    logLine("Connect to Rucio fails with: " + str(e))
    return

  print(didsList)
  try:
    # WE FORCE THE RETURNED SCHEME TO BE root FOR NOW
    repsList = repClient.list_replicas(didsList, schemes=['root'])
  except Exception as e:
    logLine("Reading RSE replicas info from Rucio fails with: " + str(e))
    return

  # Make a dictionary with the replicas of all the file DIDs we asked about
  repsDict = {}

  for rep in repsList:
    repsDict[ rep['scope'] + ':' + rep['name'] ] = rep['rses'].copy()

  # Cache rse_id of each known RSE into a local dictionary
  storagesDict = {}
  wfs.db.cur.execute('SELECT rse_name,rse_id,needs_pin FROM storages')
  allStorages = wfs.db.cur.fetchall()
  
  for storageRow in allStorages:
    storagesDict[storageRow['rse_name']] = { 
                     'rse_id'    : storageRow['rse_id'], 
                     'needs_pin' : bool(storageRow['needs_pin']) }
 
  # Go back to our list of files in finding state and put replicas in DB
  for fileRow in findingFiles:
    replicaInserts = []
    
    if fileRow['file_did'] in repsDict:

      for rseName in repsDict[fileRow['file_did']]:
        if rseName in storagesDict and repsDict[fileRow['file_did']][rseName]:

         if storagesDict[rseName]['needs_pin']:
           accessibleUntil = ',accessible_until="%s" ' %s wfs.db.unixEpoch
         else:
           accessibleUntil = ''
             
         replicaInserts.append('INSERT INTO replicas SET '
                               'rse_id=' + str(storagesDict[rseName]['rse_id']) + ','
                               'file_id=' + str(fileRow['file_id']) + ',' 
                               'pfn="' + 
                                repsDict[fileRow['file_did']][rseName][0] + 
                                '"' + accessibleUntil
                              )
                              
    if replicaInserts:
      for query in replicaInserts:
        try:
          logLine('Inserting replica: ' + query)
          wfs.db.cur.execute(query)
        except Exception as e:
          logLine('Failed inserting replica: ' + str(e))
          # We give up if this happens, without the commit
          return

      # Found all the replicas for this file so update its state
      try:
        query = ('UPDATE files SET state="unallocated" WHERE file_id=' +
                      str(fileRow['file_id']))

        print(query)
        wfs.db.cur.execute(query)
      except Exception as e:
        logLine('Failed updating file (' + 
                str(fileRow['request_id']) + ',' + 
                str(fileRow['stage_id']) +  ',' + 
                fileRow['file_did'] + 
                '): ' + str(e))
        return

      # Add request/stage to the list to have updated stats at the end
      requestsStages.add((fileRow['request_id'],fileRow['stage_id']))

    else:
      # No usable RSE/PFN info for this file from Rucio!      
      # Should protect against transient Rucio failures here...
      try:
        query = ('UPDATE files SET state="notfound" WHERE file_id=' +
                 str(fileRow['file_id']))

        wfs.db.cur.execute(query)
      except Exception as e:
        logLine('Failed updating file (' + 
                str(fileRow['request_id']) + ',' + 
                str(fileRow['stage_id']) +  ',' + 
                fileRow['file_did'] + 
                '): ' + str(e))

  # Update all the stages for which we've updated a file
  for (requestID, stageID) in requestsStages:
    wfs.allocator.updateStageCounts(requestID, stageID)
    
  # All ok, so commit it all to the DB
  wfs.db.conn.commit()

def oneCycle():

  findFiles()
  findReplicas()

#
# PROGRAM MAIN
#

if __name__ == '__main__':

  if (os.fork() != 0):
    sys.exit() # first parent

  else:
    os.chdir("/")
    os.setsid()
    os.umask(0)

    if os.fork() != 0:
      sys.exit() # second parent

    else:

      try:
        os.makedirs('/var/run/wfs',         
                    stat.S_IRUSR | stat.S_IWUSR | stat.S_IXUSR | 
                    stat.S_IRGRP | stat.S_IXGRP | stat.S_IROTH | stat.S_IXOTH)
      except:
        pass
        
      try:
        f = open('/var/run/wfs/finder.pid', 'w')
        f.write(str(os.getpid()) + '\n')
        f.close()
      except:
        print('Failed to create /var/run/wfs/finder.pid - exiting')
        sys.exit(1)

      # Close stdin now
      si = open('/dev/null', 'r')
      os.dup2(si.fileno(), sys.stdin.fileno())

      while True:

        # Ensure /var/log/wfs directory exists
        try:
          os.makedirs('/var/log/wfs', 
                      stat.S_IRUSR|stat.S_IWUSR|stat.S_IXUSR|stat.S_IRGRP|stat.S_IXGRP|stat.S_IROTH|stat.S_IXOTH)
        except:
          pass

        # Close and reopen stdout->log file, in case of logrotate
        try:
          close(so)
        except:
          pass

        so = open('/var/log/wfs/finder', 'a+')
        os.dup2(so.fileno(), sys.stdout.fileno())

        # Close and reopen stderr->log file, in case of logrotate
        try:
          close(se)
        except:
          pass
          
        se = open('/var/log/wfs/finder', 'a+')
        os.dup2(se.fileno(), sys.stderr.fileno())

        try:
          pf = open('/var/run/wfs/finder.pid', 'r')
          pid = int(pf.read().strip())
          pf.close()

          if pid != os.getpid():
            print('new /var/run/wfs/finder.pid - exiting')
            break

        except:
          print('no /var/run/wfs/finder.pid - exiting')
          break

        # Fork a subprocess to run each cycle
        cyclePid = os.fork()

        if cyclePid == 0:
          logLine('=============== Start cycle ===============')
          
          try:
            wfs.db.conn = MySQLdb.connect(host="localhost", 
                                  user=wfs.conf.mysqlUser,
                                  passwd=wfs.conf.mysqlPassword, 
                                  db='wfdb')
            wfs.db.conn.autocommit(False)
            wfs.db.cur = wfs.db.conn.cursor(MySQLdb.cursors.DictCursor)
          except Exception as e:
            logLine('Failed to create database connection (' + str(e) + ') - skipping cycle')
          else:
            try:
              oneCycle()
            except Exception as e:
              print('Cycle fails with exception ' + str(e))

          logLine('================ End cycle ================')
          sys.exit(0)

        # wait for cyclePid subprocess to finish
        os.waitpid(cyclePid, 0)

        # wait the allotted time between cycles
        time.sleep(sleepSeconds)

      sys.exit(0) # if we break out of the while loop then we exit

