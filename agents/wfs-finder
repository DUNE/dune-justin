#!/usr/bin/env python3
#
#  wfs-finder - WFS Finder agent
# 
#  Andrew McNab, University of Manchester.
#  Copyright (c) 2013-22. All rights reserved.
#
#  Redistribution and use in source and binary forms, with or
#  without modification, are permitted provided that the following
#  conditions are met:
#
#    o Redistributions of source code must retain the above
#      copyright notice, this list of conditions and the following
#      disclaimer.
#    o Redistributions in binary form must reproduce the above
#      copyright notice, this list of conditions and the following
#      disclaimer in the documentation and/or other materials
#      provided with the distribution.
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
#  CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
#  INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
#  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
#  BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
#  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
#  TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
#  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
#  ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
#  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
#  OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#  POSSIBILITY OF SUCH DAMAGE.
#

import os
import sys
import stat
import time
import pathlib
import tempfile
import xml.dom.minidom

# Needs MySQL-python RPM
import MySQLdb

# Installed by pip install of Rucio
import rucio.client

# wfs/conf.py must define these variables in a way that is both
# valid Python and valid Bash!
#
# mysqlUser='username'
# mysqlPassword='PAsSWoRd'
#
import wfs

findFilesInterval     = 3600
findReplicasInterval  = 3600
maxFileFindsPerCycle  = 10

sleepSeconds = 60

class wfsError(Exception):
  pass

def logLine(text):
  sys.stdout.write(time.strftime('%b %d %H:%M:%S [') + str(os.getpid()) + ']: ' + text + '\n')
  sys.stdout.flush()

def addFilesMontecarlo(requestID, count):
  # Add dummy files to keep track of Monte Carlo processing
  
  for i in range(1, count + 1):
    try:
      query = ('INSERT INTO files SET '
               'request_id=%d,file_did="montecarlo-%06d-%06d"' 
               % (requestID, requestID, i)
              )

      wfs.db.cur.execute(query)
    except Exception as e:
      logLine('Failed inserting dummy Monte Carlo file')
      return

  # All files found for this request so update its state
  try:
    query = ('UPDATE requests SET state="running" WHERE request_id=' +
             str(requestID))

    wfs.db.cur.execute(query)
  except Exception as e:
    logLine('Failed updating request ' + str(requestID))

  # All ok, so commit it all to the DB
  wfs.db.conn.commit()

def findFilesRucio(didClient, requestID, scope, name):
  # Find files to be processed for each request in the finding state
  
  # WE DO THIS FROM RUCIO FOR NOW, AND JUST WITH DATASETS
  # THIS WILL BE REPLACED WITH QUERIES TO METACAT WITH ITS MQL QUERY API
  # https://metacat.fnal.gov:9443/dune_meta_demo/app/static/docs/html/webapi.html
  #
  # ONLY MQLs OF THE FORM from files scope:name ARE SUPPORTED UNTIL THEN

  try:
    didsList = didClient.list_files(scope, name)
  except Exception as e:
    logLine("Reading RSE list from Rucio fails with: " + str(e))
    return

  for did in didsList:  
    try:
      query = ('INSERT INTO files SET '
               'request_id=' + str(requestID) + ',' +
               'file_did="' + did['scope'] + ':' + did['name'] + '"'
              )

      wfs.db.cur.execute(query)
    except Exception as e:
      logLine('Failed inserting DID')
      return

  # All files found for this request so update its state
  try:
    query = ('UPDATE requests SET state="running" WHERE request_id=' +
             str(requestID))

    wfs.db.cur.execute(query)
  except Exception as e:
    logLine('Failed updating request ' + str(requestID))

  # All ok, so commit it all to the DB
  wfs.db.conn.commit()

def findFiles():
  # Find files to be processed for each request in the finding state
  
  # WE DO THIS FROM RUCIO FOR NOW, AND JUST WITH DATASETS
  # THIS WILL BE REPLACED WITH QUERIES TO METACAT WITH ITS MQL QUERY API
  # https://metacat.fnal.gov:9443/dune_meta_demo/app/static/docs/html/webapi.html
  #
  # ONLY MQLs OF THE FORM from files scope:name ARE SUPPORTED UNTIL THEN

  try:
    didClient = rucio.client.didclient.DIDClient()
  except Exception as e:
    logLine("Connect to Rucio fails with: " + str(e))
    return
  
  wfs.db.cur.execute('SELECT request_id,mql FROM requests WHERE state="finding"')
  findingRequests = wfs.db.cur.fetchall()
  
  for request in findingRequests:
    mqlSplit = request['mql'].split()

    # Ordinary request with a Rucio dataset
    if len(mqlSplit) == 3 and mqlSplit[0] == 'files' and mqlSplit[1] == 'from':
      
      datasetSplit = mqlSplit[2].split(':')
      if len(datasetSplit) == 2:
        findFilesRucio(didClient,
                       request['request_id'], 
                       datasetSplit[0], 
                       datasetSplit[1])
        
    # Monte Carlo request with a count
    elif len(mqlSplit) == 2 and mqlSplit[0] == 'montecarlo':
      
      try:
        count = int(mqlSplit[1])
      except:
        continue
      
      addFilesMontecarlo(request['request_id'], count)

def findReplicas():
  # Find replicas of files in the finding state

  # Check we can talk to Rucio
  try:
    repClient = rucio.client.replicaclient.ReplicaClient()
  except Exception as e:
    logLine("Connect to Rucio fails with: " + str(e))
    return

  # Cache rse_id of each known RSE into a local dictionary
  storagesDict = {}
  wfs.db.cur.execute('SELECT rse_name,rse_id FROM storages')
  allStorages = wfs.db.cur.fetchall()
  
  for storageRow in allStorages:
    storagesDict[storageRow['rse_name']] = storageRow['rse_id']
 
  print(storagesDict)
  # Make a list of up to maxFileFindsPerCycle files to work on 
  didsList = []
  query = ('SELECT request_id,stage_id,file_id,file_did FROM files '
           'WHERE state="finding" AND NOW() > finding_retry_time '
           'ORDER BY file_id LIMIT ' + str(maxFileFindsPerCycle))
  
  wfs.db.cur.execute(query)
  findingFiles = wfs.db.cur.fetchall()
  
  # Make a dictionary with the replicas of all the file DIDs we asked about
  repsDict = {}

  for fileRow in findingFiles:
    if ':' in fileRow['file_did']:
      didSplit = fileRow['file_did'].split(':')
      didsList.append({ 'scope': didSplit[0], 'name' : didSplit[1] })
    elif fileRow['file_did'].startswith('montecarlo-'):
      repsDict[fileRow['file_did']] = 'MONTECARLO'

  print(didsList)
  try:
    # WE FORCE THE RETURNED SCHEME TO BE root FOR NOW
    repsList = repClient.list_replicas(didsList, schemes=['root'])
  except Exception as e:
    logLine("Reading RSE replicas info from Rucio fails with: " + str(e))
    return

  for rep in repsList:
    repsDict[ rep['scope'] + ':' + rep['name'] ] = rep['rses'].copy()

  print(repsDict)
  # Go back to our list of files in finding state and put replicas in DB
  for fileRow in findingFiles:
    print(fileRow)
    if fileRow['file_did'] in repsDict:
      
      for rseName in repsDict[fileRow['file_did']]:
        if rseName in storagesDict and repsDict[fileRow['file_did']][rseName]:
                
          print(repsDict[fileRow['file_did']])
          try:
            logLine('Inserting %s %s for %d,%d,%s' % 
                    (rseName, repsDict[fileRow['file_did']],
                     fileRow['request_id'], 
                     fileRow['stage_id'], 
                     fileRow['file_did']))            

            query = ('INSERT INTO replicas SET '
                     'rse_id=' + str(storagesDict[rseName]) + ','
                     'file_id=' + str(fileRow['file_id']) + ',' 
                     'pfn="' + repsDict[fileRow['file_did']][rseName][0] + '"'
                    )
                    
            print(query)
            wfs.db.cur.execute(query)
          except Exception as e:
            logLine('Failed inserting replica: ' + str(e))
            # We give up if this happens, without the commit
            return

      # All replicas found for this file so update its state
      try:
        query = ('UPDATE files SET state="unallocated" WHERE file_id=' +
                 str(fileRow['file_id']))

        print(query)
        wfs.db.cur.execute(query)
      except Exception as e:
        logLine('Failed updating file (' + 
                str(fileRow['request_id']) + ',' + 
                str(fileRow['stage_id']) +  ',' + 
                fileRow['file_did'] + 
                '): ' + str(e))
        return

  # All ok, so commit it all to the DB
  wfs.db.conn.commit()

def oneCycle():

  # Is it time to find files for requests?
  try:
    lastFindFiles = os.stat('/var/run/wfs/last-find-files').st_mtime
  except:
    lastFindFiles = 0

  if lastFindFiles + findFilesInterval < time.time():
    pathlib.Path('/var/run/wfs/last-find-files').touch(exist_ok=True)
    findFiles()

  # Is it time to find replicas for files?
  try:
    lastFindReplicas = os.stat('/var/run/wfs/last-find-replicas').st_mtime
  except:
    lastFindReplicas = 0

  if lastFindReplicas + findReplicasInterval < time.time():
    pathlib.Path('/var/run/wfs/last-find-replicas').touch(exist_ok=True)
    findReplicas()

#
# PROGRAM MAIN
#

if __name__ == '__main__':

  if (os.fork() != 0):
    sys.exit() # first parent

  else:
    os.chdir("/")
    os.setsid()
    os.umask(0)

    if os.fork() != 0:
      sys.exit() # second parent

    else:

      try:
        os.makedirs('/var/run/wfs',         
                    stat.S_IRUSR | stat.S_IWUSR | stat.S_IXUSR | 
                    stat.S_IRGRP | stat.S_IXGRP | stat.S_IROTH | stat.S_IXOTH)
      except:
        pass
        
      try:
        f = open('/var/run/wfs/finder.pid', 'w')
        f.write(str(os.getpid()) + '\n')
        f.close()
      except:
        print('Failed to create /var/run/wfs/finder.pid - exiting')
        sys.exit(1)

      # Close stdin now
      si = open('/dev/null', 'r')
      os.dup2(si.fileno(), sys.stdin.fileno())

      while True:

        # Ensure /var/log/wfs directory exists
        try:
          os.makedirs('/var/log/wfs', 
                      stat.S_IRUSR|stat.S_IWUSR|stat.S_IXUSR|stat.S_IRGRP|stat.S_IXGRP|stat.S_IROTH|stat.S_IXOTH)
        except:
          pass

        # Close and reopen stdout->log file, in case of logrotate
        try:
          close(so)
        except:
          pass

        so = open('/var/log/wfs/finder', 'a+')
        os.dup2(so.fileno(), sys.stdout.fileno())

        # Close and reopen stderr->log file, in case of logrotate
        try:
          close(se)
        except:
          pass
          
        se = open('/var/log/wfs/finder', 'a+')
        os.dup2(se.fileno(), sys.stderr.fileno())

        try:
          pf = open('/var/run/wfs/finder.pid', 'r')
          pid = int(pf.read().strip())
          pf.close()

          if pid != os.getpid():
            print('new /var/run/wfs/finder.pid - exiting')
            break

        except:
          print('no /var/run/wfs/finder.pid - exiting')
          break

        # Fork a subprocess to run each cycle
        cyclePid = os.fork()

        if cyclePid == 0:
          logLine('=============== Start cycle ===============')
          
          try:
            wfs.db.conn = MySQLdb.connect(host="localhost", 
                                  user=wfs.conf.mysqlUser,
                                  passwd=wfs.conf.mysqlPassword, 
                                  db='wfdb')
            wfs.db.conn.autocommit(False)
            wfs.db.cur = wfs.db.conn.cursor(MySQLdb.cursors.DictCursor)
          except Exception as e:
            logLine('Failed to create database connection (' + str(e) + ') - skipping cycle')
          else:
            try:
              oneCycle()
            except Exception as e:
              print('Cycle fails with exception ' + str(e))

          logLine('================ End cycle ================')
          sys.exit(0)

        # wait for cyclePid subprocess to finish
        os.waitpid(cyclePid, 0)

        # wait the allotted time between cycles
        time.sleep(sleepSeconds)

      sys.exit(0) # if we break out of the while loop then we exit

