#!/bin/bash
#
# To use this bootstrap to process 10 files from the dc4-vd-coldbox-top
# data and put the output in the dc4-test namespace (MetaCat) and scope (Rucio),
# and in the dc4-test:amcnab-01 dataset in MetaCat and Rucio, use this command to 
# create the request:
#
# workflow quick-request \
# --mql "files from dc4:dc4 where core.run_type='dc4-vd-coldbox-top' limit 10" \
# --file dc4-vd-coldbox-top.bootstrap --max-distance 100 \
# --output-pattern 'dc4-test:amcnab-01:*_reco_data_*.root' \
# --output-rse FNAL_DCACHE_TEST
#

base64 -d <<EOF >pdjson2metadata
IyEvdXNyL2Jpbi9lbnYgcHl0aG9uMyAKIwojIENvbnZlcnQgcHJvdG9EVU5FIG1ldGFkYXRhIHRv
IEpTT04gc3VpdGFibGUgdG8gYmUgdGhlIHZhbHVlIG9mIHRoZSAibWV0YWRhdGEiIGtleSBpbiB0
aGUgCiMgSlNPTiBzZW50IHRvIE1ldGFDYXQKIwojIEFkYXB0ZWQgZnJvbSBodHRwczovL2dpdGh1
Yi5jb20vaXZtZm5hbC9wcm90b2R1bmUvYmxvYi9tYWluL3Rvb2xzL2RlY2xhcmVfbWV0YS5weQoj
IHRvIHdyaXRlIG91dCBtb2RpZmllZCBKU09OIHJhdGhlciB0aGFuIHVwbG9hZGluZyBpdC4gCiMg
VGhpcyBhbGxvd3MgdGhlIHNjcmlwdCB0byBiZSBydW4gaW5zaWRlIGJvb3RzdHJhcCBzY3JpcHRz
IHN1cHBsaWVkIGJ5IHVzZXJzLgojCiMgVGhpcyBzY3JpcHQgbXVzdCBiZSBjb252ZXJ0ZWQgdG8g
YmFzZTY0IHdpdGggc29tZXRoaW5nIGxpa2UgdGhlIGZvbGxvd2luZyAKIyBhbmQgaW5jbHVkZWQg
aW4gdGhlIGhlcmUgZG9jdW1lbnQgbmVhciB0aGUgc3RhcnQgb2YgdGhlIGJvb3RzdHJhcCBzY3Jp
cHRzIDoKIwojIChtYWNPUykgYmFzZTY0IC1iIDc2IHBkanNvbjJtZXRhZGF0YSA+IHBkanNvbjJt
ZXRhZGF0YS5iNjQKIyAoTGludXgpIGJhc2U2NCAgICAgICBwZGpzb24ybWV0YWRhdGEgPiBwZGpz
b24ybWV0YWRhdGEuYjY0CiMKCmltcG9ydCBzeXMsIGpzb24KCmNvcmVBdHRyaWJ1dGVzID0gewog
ICAgImV2ZW50X2NvdW50IjogICJjb3JlLmV2ZW50X2NvdW50IiwKICAgICJmaWxlX3R5cGUiICA6
ICAiY29yZS5maWxlX3R5cGUiLCAKICAgICJmaWxlX2Zvcm1hdCI6ICAiY29yZS5maWxlX2Zvcm1h
dCIsCiAgICAiZGF0YV90aWVyIiAgOiAgImNvcmUuZGF0YV90aWVyIiwgCiAgICAiZGF0YV9zdHJl
YW0iOiAgImNvcmUuZGF0YV9zdHJlYW0iLCAKICAgICJldmVudHMiICAgICA6ICAiY29yZS5ldmVu
dHMiLAogICAgImZpcnN0X2V2ZW50IjogICJjb3JlLmZpcnN0X2V2ZW50X251bWJlciIsCiAgICAi
bGFzdF9ldmVudCIgOiAgImNvcmUubGFzdF9ldmVudF9udW1iZXIiLAogICAgImV2ZW50X2NvdW50
IjogICJjb3JlLmV2ZW50X2NvdW50IiwKICAgICJwYXJlbnRzIiAgICA6ICAidGVtcC5wYXJlbnRz
Igp9CiAgIAp0cnk6CiAgaW5wdXRNZXRhZGF0YSA9IGpzb24ubG9hZChvcGVuKHN5cy5hcmd2WzFd
LCAiciIpKQpleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgcHJpbnQoIkVycm9yIHJlYWRpbmcgbWV0
YWRhdGEgZnJvbSBmaWxlOiAiICsgc3RyKGUpLCBmaWxlPXN5cy5zdGRlcnIpCiAgc3lzLmV4aXQo
MSkKCmFsbElucHV0RGlkcyA9IFtdCmlmIGxlbihzeXMuYXJndikgPiAyOgogIHRyeToKICAgIGZv
ciBsaW5lIGluIG9wZW4oc3lzLmFyZ3ZbMl0sICJyIikucmVhZCgpLnNwbGl0bGluZXMoKToKICAg
ICAgYWxsSW5wdXREaWRzLmFwcGVuZChsaW5lKQoKICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAg
ICBwcmludCgiRXJyb3IgcmVhZCBhbGwgaW5wdXQgRElEcyBmaWxlOiAiICsgc3RyKGUpLCBmaWxl
PXN5cy5zdGRlcnIpCiAgICBzeXMuZXhpdCgyKQoKaW5wdXRNZXRhZGF0YS5wb3AoImZpbGVfc2l6
ZSIsIE5vbmUpCmlucHV0TWV0YWRhdGEucG9wKCJjaGVja3N1bSIsIE5vbmUpCmlucHV0TWV0YWRh
dGEucG9wKCJmaWxlX25hbWUiLCBOb25lKQoKIyBNb3N0IG9mIHRoZSBtZXRhZGF0YSBnb2VzIGlu
ICJtZXRhZGF0YSIgd2l0aGluIHRoZSBvdXRlciBkaWN0aW9uYXJ5Cm91dHB1dE1ldGFkYXRhID0g
eyAibWV0YWRhdGEiOiB7fX0KCnJ1bnNTdWJydW5zID0gc2V0KCkKcnVuVHlwZSA9IE5vbmUKcnVu
cyA9IHNldCgpCmZvciBydW4sIHN1YnJ1biwgcnR5cGUgaW4gaW5wdXRNZXRhZGF0YS5wb3AoInJ1
bnMiLCBbXSk6CiAgcnVuVHlwZSA9IHJ0eXBlCiAgcnVucy5hZGQocnVuKQogIHJ1bnNTdWJydW5z
LmFkZCgxMDAwMDAgKiBydW4gKyBzdWJydW4pCgpvdXRwdXRNZXRhZGF0YVsibWV0YWRhdGEiXVsi
Y29yZS5ydW5zX3N1YnJ1bnMiXSA9IHNvcnRlZChsaXN0KHJ1bnNTdWJydW5zKSkKb3V0cHV0TWV0
YWRhdGFbIm1ldGFkYXRhIl1bImNvcmUucnVucyJdID0gc29ydGVkKGxpc3QocnVucykpCm91dHB1
dE1ldGFkYXRhWyJtZXRhZGF0YSJdWyJjb3JlLnJ1bl90eXBlIl0gPSBydW5UeXBlCgpmb3IgbmFt
ZSwgdmFsdWUgaW4gaW5wdXRNZXRhZGF0YS5pdGVtcygpOgogIGlmIG5hbWUgPT0gJ3BhcmVudHMn
OgogICAgcGFyZW50RGlkcyA9IFtdCiAgICBmb3IgcGFyZW50IGluIHZhbHVlOgogICAgICBtYXRj
aGluZ0RpZCA9IE5vbmUKICAgICAgZm9yIGRpZCBpbiBhbGxJbnB1dERpZHM6CiAgICAgICAgaWYg
ZGlkLmVuZHN3aXRoKHBhcmVudFsiZmlsZV9uYW1lIl0pOgogICAgICAgICAgbWF0Y2hpbmdEaWQg
PSBEaWQKICAgICAgICAgIGJyZWFrCgogICAgICBpZiBtYXRjaGluZ0RpZDoKICAgICAgICBwYXJl
bnREaWRzLmFwcGVuZCh7ICJkaWQiIDogbWF0Y2hpbmdEaWQgfSkKICAgICAgZWxzZToKICAgICAg
ICBwcmludCgiTm8gbWF0Y2hpbmcgaW5wdXQgRElEIGZvciBmaWxlICVzIC0gZXhpdGluZyIgJSBz
dHIocGFyZW50KSkKICAgICAgICBzeXMuZXhpdCgzKQogICAgCiAgICAjIEFkZCB0aGUgbGlzdCBv
ZiB7ICJkaWQiOiAiLi4uIiB9IGRpY3Rpb25hcmllcyB0byB0b3AgbGV2ZWwKICAgIG91dHB1dE1l
dGFkYXRhWyJwYXJlbnRzIl0gPSBwYXJlbnREaWRzCiAgICAgIAogIGVsc2U6CiAgICBpZiAnLicg
bm90IGluIG5hbWU6CiAgICAgIGlmIG5hbWUgaW4gY29yZUF0dHJpYnV0ZXM6CiAgICAgICAgbmFt
ZSA9IGNvcmVBdHRyaWJ1dGVzW25hbWVdCiAgICAgIGVsc2U6CiAgICAgICAgbmFtZSA9ICd4Licg
KyBuYW1lCiAgICAgICAgICAgIAogICAgb3V0cHV0TWV0YWRhdGFbIm1ldGFkYXRhIl1bbmFtZV0g
PSB2YWx1ZQogICAgCm91dHB1dE1ldGFkYXRhWyJtZXRhZGF0YSJdLnNldGRlZmF1bHQoImNvcmUu
ZXZlbnRfY291bnQiLCAKICAgICAgICAgICAgICAgIGxlbihvdXRwdXRNZXRhZGF0YVsibWV0YWRh
dGEiXS5nZXQoImNvcmUuZXZlbnRzIiwgW10pKSkKIApqc29uLmR1bXAob3V0cHV0TWV0YWRhdGEs
IHN5cy5zdGRvdXQsIGluZGVudD00LCBzb3J0X2tleXM9VHJ1ZSkK
EOF
chmod +x pdjson2metadata

# fcl file to be used
fclFile=vdcoldbox_raw_tdedataprep_reco.fcl

# number of events to process from the input file
#nEvts=2

# First get an unprocessed file from this stage
did_pfn_rse=`$WFS_PATH/wfs-get-file`

if [ "$did_pfn_rse" = "" ] ; then
  echo "Nothing to process - exit bootstrap"
  exit 1
fi

# Keep a record of all input DIDs, for metadata file -> DID later
echo "$did_pfn_rse" | cut -f1 -d' ' >>all-input-dids.txt

# pfn is also needed when creating wfs-processed-pfns.txt
pfn=`echo $did_pfn_rse | cut -f2 -d' '`

echo "Input PFN = $pfn"

source /cvmfs/dune.opensciencegrid.org/products/dune/setup_dune.sh

# the xroot lib for streaming non-root files is in testproducts, 
# so add it to the start of the path
export PRODUCTS=/cvmfs/dune.opensciencegrid.org/products/dune/testproducts:${PRODUCTS}

export DUNEVERSION=v09_44_00_02
export DUNEQUALIFIER="e20:prof"
setup dunesw $DUNEVERSION -q $DUNEQUALIFIER

now=$(date -u +"%Y-%m-%dT_%H%M%SZ")

# extract filename from $pfn 
Ffname=`echo $pfn | awk -F/ '{print $NF}'`
fname=`echo $Ffname | awk -F. '{print $1}'`

# define output filename
outFile=${fname}_reco_data_${now}.root
echo $Ffname $fname $outFile

# put here the right value, this is just an example 
campaign="WFS.Request-${WFS_REQUEST_ID}.Stage-${WFS_STAGE_ID}"

(
# Do the scary preload stuff in a subshell!
export LD_PRELOAD=${XROOTD_LIB}/libXrdPosixPreload.so
echo "$LD_PRELOAD"

# to test with only 2 events
#lar -c $fclFile "$pfn"  -n $nEvts -o $outFile  > ${fname}_reco_${now}.log 2>&1
lar -c $fclFile "$pfn" -o $outFile  > ${fname}_reco_${now}.log 2>&1
)

# Subshell exits with exit code of last command
larExit=$?
echo "lar exit code $larExit"

if [ $larExit -eq 0 ] ; then
  # write metadata file if lar succeeded
  extractor_prod.py --infile "$outFile" --no_crc --appname reco \
    --appversion ${DUNEVERSION} --appfamily art \
    --campaign ${campaign} > $outFile.ext.json  
  extractorExit=$?
  echo "extractor_prod.py exit code $extractorExit"

  pdjson2metadata $outFile.ext.json all-input-dids.txt > $outFile.json
  p2mExit=$?
  echo "pdjson2metadata exit code $p2mExit"

  if [ $extractorExit -eq 0 -a $p2mExit -eq 0 ] ; then
    echo "Metadata extraction succeeds"
    echo "$pfn" > wfs-processed-pfns.txt
    echo "===Metadata JSON==="
    cat $outFile.json
    echo
    echo "==================="
  fi
fi

ls -lRS

# Create compressed tar file with all log files including the bootstrap.log
tar zcf `echo "$JOBSUBJOBID.logs.tgz" | sed 's/@/_/g'` *.log
