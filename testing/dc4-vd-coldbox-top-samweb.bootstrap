#!/bin/bash
#
# To use this bootstrap to process 10 files from the dc4-vd-coldbox-top
# data and put the output in the dc4-test namespace (MetaCat) and scope (Rucio),
# and in the dc4-test:amcnab-01 dataset in MetaCat and Rucio, use this command to 
# create the request:
#
# workflow quick-request \
# --mql "files from dc4:dc4 where core.run_type='dc4-vd-coldbox-top' limit 10" \
# --file dc4-vd-coldbox-top.bootstrap --max-distance 100 \
# --output-pattern 'dc4-test:amcnab-01:*_reco_data_*.root' \
# --output-rse FNAL_DCACHE_TEST
#

base64 -d <<EOF >pdjson2metadata
IyEvdXNyL2Jpbi9lbnYgcHl0aG9uMyAKIwojIENvbnZlcnQgcHJvdG9EVU5FIG1ldGFkYXRhIHRv
IEpTT04gc3VpdGFibGUgdG8gYmUgdGhlIHZhbHVlIG9mIHRoZSAibWV0YWRhdGEiIGtleSBpbiB0
aGUgCiMgSlNPTiBzZW50IHRvIE1ldGFDYXQKIwojIEFkYXB0ZWQgZnJvbSBodHRwczovL2dpdGh1
Yi5jb20vaXZtZm5hbC9wcm90b2R1bmUvYmxvYi9tYWluL3Rvb2xzL2RlY2xhcmVfbWV0YS5weQoj
IHRvIHdyaXRlIG91dCBtb2RpZmllZCBKU09OIHJhdGhlciB0aGFuIHVwbG9hZGluZyBpdC4gCiMg
VGhpcyBhbGxvd3MgdGhlIHNjcmlwdCB0byBiZSBydW4gaW5zaWRlIGJvb3RzdHJhcCBzY3JpcHRz
IHN1cHBsaWVkIGJ5IHVzZXJzLgojCiMgVGhpcyBzY3JpcHQgbXVzdCBiZSBjb252ZXJ0ZWQgdG8g
YmFzZTY0IHdpdGggc29tZXRoaW5nIGxpa2UgdGhlIGZvbGxvd2luZyAKIyBhbmQgaW5jbHVkZWQg
aW4gdGhlIGhlcmUgZG9jdW1lbnQgbmVhciB0aGUgc3RhcnQgb2YgdGhlIGJvb3RzdHJhcCBzY3Jp
cHRzIDoKIwojIChtYWNPUykgYmFzZTY0IC1iIDc2IHBkanNvbjJtZXRhZGF0YSA+IHBkanNvbjJt
ZXRhZGF0YS5iNjQKIyAoTGludXgpIGJhc2U2NCAgICAgICBwZGpzb24ybWV0YWRhdGEgPiBwZGpz
b24ybWV0YWRhdGEuYjY0CiMKCmltcG9ydCBzeXMsIGpzb24KCmNvcmVBdHRyaWJ1dGVzID0gewog
ICAgImV2ZW50X2NvdW50IjogICJjb3JlLmV2ZW50X2NvdW50IiwKICAgICJmaWxlX3R5cGUiICA6
ICAiY29yZS5maWxlX3R5cGUiLCAKICAgICJmaWxlX2Zvcm1hdCI6ICAiY29yZS5maWxlX2Zvcm1h
dCIsCiAgICAiZGF0YV90aWVyIiAgOiAgImNvcmUuZGF0YV90aWVyIiwgCiAgICAiZGF0YV9zdHJl
YW0iOiAgImNvcmUuZGF0YV9zdHJlYW0iLCAKICAgICJldmVudHMiICAgICA6ICAiY29yZS5ldmVu
dHMiLAogICAgImZpcnN0X2V2ZW50IjogICJjb3JlLmZpcnN0X2V2ZW50X251bWJlciIsCiAgICAi
bGFzdF9ldmVudCIgOiAgImNvcmUubGFzdF9ldmVudF9udW1iZXIiLAogICAgImV2ZW50X2NvdW50
IjogICJjb3JlLmV2ZW50X2NvdW50Igp9CiAgIAp0cnk6CiAgaW5wdXRNZXRhZGF0YSA9IGpzb24u
bG9hZChvcGVuKHN5cy5hcmd2WzFdLCAiciIpKQpleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgcHJp
bnQoIkVycm9yIHJlYWRpbmcgbWV0YWRhdGEgZnJvbSBmaWxlOiAiICsgc3RyKGUpLCBmaWxlPXN5
cy5zdGRlcnIpCiAgc3lzLmV4aXQoMSkKCmFsbElucHV0RGlkcyA9IFtdCmlmIGxlbihzeXMuYXJn
dikgPiAyOgogIHRyeToKICAgIGZvciBsaW5lIGluIG9wZW4oc3lzLmFyZ3ZbMl0sICJyIikucmVh
ZCgpLnNwbGl0bGluZXMoKToKICAgICAgYWxsSW5wdXREaWRzLmFwcGVuZChsaW5lKQoKICBleGNl
cHQgRXhjZXB0aW9uIGFzIGU6CiAgICBwcmludCgiRXJyb3IgcmVhZCBhbGwgaW5wdXQgRElEcyBm
aWxlOiAiICsgc3RyKGUpLCBmaWxlPXN5cy5zdGRlcnIpCiAgICBzeXMuZXhpdCgyKQoKaW5wdXRN
ZXRhZGF0YS5wb3AoImZpbGVfc2l6ZSIsIE5vbmUpCmlucHV0TWV0YWRhdGEucG9wKCJjaGVja3N1
bSIsIE5vbmUpCmlucHV0TWV0YWRhdGEucG9wKCJmaWxlX25hbWUiLCBOb25lKQoKIyBNb3N0IG9m
IHRoZSBtZXRhZGF0YSBnb2VzIGluICJtZXRhZGF0YSIgd2l0aGluIHRoZSBvdXRlciBkaWN0aW9u
YXJ5Cm91dHB1dE1ldGFkYXRhID0geyAibWV0YWRhdGEiOiB7fX0KCnJ1bnNTdWJydW5zID0gc2V0
KCkKcnVuVHlwZSA9IE5vbmUKcnVucyA9IHNldCgpCmZvciBydW4sIHN1YnJ1biwgcnR5cGUgaW4g
aW5wdXRNZXRhZGF0YS5wb3AoInJ1bnMiLCBbXSk6CiAgcnVuVHlwZSA9IHJ0eXBlCiAgcnVucy5h
ZGQocnVuKQogIHJ1bnNTdWJydW5zLmFkZCgxMDAwMDAgKiBydW4gKyBzdWJydW4pCgpvdXRwdXRN
ZXRhZGF0YVsibWV0YWRhdGEiXVsiY29yZS5ydW5zX3N1YnJ1bnMiXSA9IHNvcnRlZChsaXN0KHJ1
bnNTdWJydW5zKSkKb3V0cHV0TWV0YWRhdGFbIm1ldGFkYXRhIl1bImNvcmUucnVucyJdID0gc29y
dGVkKGxpc3QocnVucykpCm91dHB1dE1ldGFkYXRhWyJtZXRhZGF0YSJdWyJjb3JlLnJ1bl90eXBl
Il0gPSBydW5UeXBlCgpmb3IgbmFtZSwgdmFsdWUgaW4gaW5wdXRNZXRhZGF0YS5pdGVtcygpOgog
IGlmIG5hbWUgPT0gJ3BhcmVudHMnOgogICAgcGFyZW50RGlkcyA9IFtdCiAgICBmb3IgcGFyZW50
IGluIHZhbHVlOgogICAgICBtYXRjaGluZ0RpZCA9IE5vbmUKICAgICAgZm9yIGRpZCBpbiBhbGxJ
bnB1dERpZHM6CiAgICAgICAgaWYgZGlkLmVuZHN3aXRoKHBhcmVudFsiZmlsZV9uYW1lIl0pOgog
ICAgICAgICAgbWF0Y2hpbmdEaWQgPSBkaWQKICAgICAgICAgIGJyZWFrCgogICAgICBpZiBtYXRj
aGluZ0RpZDoKICAgICAgICBwYXJlbnREaWRzLmFwcGVuZCh7ICJkaWQiIDogbWF0Y2hpbmdEaWQg
fSkKICAgICAgZWxzZToKICAgICAgICBwcmludCgiTm8gbWF0Y2hpbmcgaW5wdXQgRElEIGZvciBm
aWxlICVzIHdpdGggcGFyZW50IGZpbGVfbmFtZSAlcy0gZXhpdGluZyIgCiAgICAgICAgICAgICAg
JSAoc3RyKHBhcmVudCksIHN0cihwYXJlbnRbImZpbGVfbmFtZSJdKSksCiAgICAgICAgICAgICAg
ZmlsZT1zeXMuc3RkZXJyKQogICAgICAgIHN5cy5leGl0KDMpCiAgICAKICAgICMgQWRkIHRoZSBs
aXN0IG9mIHsgImRpZCI6ICIuLi4iIH0gZGljdGlvbmFyaWVzIHRvIHRvcCBsZXZlbAogICAgb3V0
cHV0TWV0YWRhdGFbInBhcmVudHMiXSA9IHBhcmVudERpZHMKICAgICAgCiAgZWxzZToKICAgIGlm
ICcuJyBub3QgaW4gbmFtZToKICAgICAgaWYgbmFtZSBpbiBjb3JlQXR0cmlidXRlczoKICAgICAg
ICBuYW1lID0gY29yZUF0dHJpYnV0ZXNbbmFtZV0KICAgICAgZWxzZToKICAgICAgICBuYW1lID0g
J3guJyArIG5hbWUKICAgICAgICAgICAgCiAgICBvdXRwdXRNZXRhZGF0YVsibWV0YWRhdGEiXVtu
YW1lXSA9IHZhbHVlCiAgICAKb3V0cHV0TWV0YWRhdGFbIm1ldGFkYXRhIl0uc2V0ZGVmYXVsdCgi
Y29yZS5ldmVudF9jb3VudCIsIAogICAgICAgICAgICAgICAgbGVuKG91dHB1dE1ldGFkYXRhWyJt
ZXRhZGF0YSJdLmdldCgiY29yZS5ldmVudHMiLCBbXSkpKQogCmpzb24uZHVtcChvdXRwdXRNZXRh
ZGF0YSwgc3lzLnN0ZG91dCwgaW5kZW50PTQsIHNvcnRfa2V5cz1UcnVlKQo=
EOF
chmod +x pdjson2metadata

# fcl file to be used
fclFile=vdcoldbox_raw_tdedataprep_reco.fcl

source /cvmfs/dune.opensciencegrid.org/products/dune/setup_dune.sh

# the xroot lib for streaming non-root files is in testproducts, 
# so add it to the start of the path
export PRODUCTS=/cvmfs/dune.opensciencegrid.org/products/dune/testproducts:${PRODUCTS}

export DUNEVERSION=v09_44_00_02
export DUNEQUALIFIER="e20:prof"
setup dunesw $DUNEVERSION -q $DUNEQUALIFIER

now=$(date -u +"%Y-%m-%dT_%H%M%SZ")

# define output filename
outFile=${WFS_REQUEST_ID}_${WFS_STAGE_ID}_reco_data_${now}.root
echo $outFile

# put here the right value, this is just an example 
campaign="WFS.Request-${WFS_REQUEST_ID}.Stage-${WFS_STAGE_ID}"

(
# Do the scary preload stuff in a subshell!
export LD_PRELOAD=${XROOTD_LIB}/libXrdPosixPreload.so
echo "$LD_PRELOAD"

# to test with only 2 events
lar -c $fclFile -n 2 -o $outFile --sam-web-uri "$WFS_SAM_WEB_URI" \
 --sam-process-id 0 > ${outFile}.log 2>&1
#lar -c $fclFile "$pfn" -o $outFile  > ${fname}_reco_${now}.log 2>&1
)

# Subshell exits with exit code of last command
larExit=$?
echo "lar exit code $larExit"

if [ $larExit -eq 0 -a -f "$outFile" ] ; then
  # write metadata file if lar succeeded and output file is exists
  extractor_prod.py --infile "$outFile" --no_crc --appname reco \
    --appversion ${DUNEVERSION} --appfamily art \
    --campaign ${campaign} > $outFile.ext.json  
  extractorExit=$?
  echo "extractor_prod.py exit code $extractorExit"
    
  # Get the list of file DIDs allocated to this job so we can do PFN->DID maps
  $WFS_PATH/wfs-allocated-files > all-input-dids.txt
  wafExit=$?
  
  echo '===start all-input-dids.txt==='
  cat all-input-dids.txt
  echo '===end all-input-dids.txt==='

  pdjson2metadata $outFile.ext.json all-input-dids.txt > $outFile.json
  p2mExit=$?
  echo "pdjson2metadata exit code $p2mExit"

  if [ $extractorExit -eq 0 -a $wafExit -eq 0 -a $p2mExit -eq 0 ] ; then
    echo "Metadata extraction succeeds"
    echo "===Metadata JSON==="
    cat $outFile.json
    echo
    echo "==================="
    # Create compressed tar file with all log files including the bootstrap.log
    tar zcf `echo "$JOBSUBJOBID.logs.tgz" | sed 's/@/_/g'` *.log
    exit 0
  fi
fi

ls -lRS

# Create compressed tar file with all log files including the bootstrap.log
tar zcf `echo "$JOBSUBJOBID.logs.tgz" | sed 's/@/_/g'` *.log
exit 1
