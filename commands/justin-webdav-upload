#!/usr/bin/env python3
#
# justin-webdav-upload - upload files using WebDAV to storages like dCache
#
# Copyright 2013-23, Andrew McNab for the University of Manchester
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

import argparse

import os
import os.path
import sys
import json
import time
import ssl
import urllib.request

#
# Start of WebDAV uploads: this code is shared between justin-webdav-upload 
#Â and justin-wrapper-job-py to make them both self contained
#

def webdavCheckRemoteDirectories(sslContext, token, dirSplit):

  # Go down through the directories looking for the highest one that exists
  for highest in range(len(dirSplit) - 1, 1, -1): 
  
    # Don't do the check once we get down to the bare hostname 
    # But otherwise do stop if the directory exists already
    if highest > 2 and \
       webdavRemoteExists(sslContext, token, '/'.join(dirSplit[:highest + 1])):
      break
      
  for i in range(highest+1, len(dirSplit)):
    webdavRemoteDirCreate(sslContext, token, '/'.join(dirSplit[:i+1]))

def webdavRemoteExists(sslContext, token, url):

  httpRequest = urllib.request.Request(url,
                  headers = { 'User-Agent'     : 'justin-webdav-upload',
                              'Authorization'  : 'Bearer ' + token
                            },
                  method = 'HEAD')

  try:
    response = urllib.request.urlopen(httpRequest, context = sslContext)
    httpCode = response.status 

  except urllib.error.URLError as e:
    httpCode = e.code

  except Exception as e:
    print('Unknown error checking if %s exists: %s' % (url, str(e)), 
          file=sys.stderr)
    raise

  if httpCode == 404:
    print('%s does not exist' % url, file=sys.stderr)
    return False
    
  if httpCode == 200:
    print('%s exists' % url, file=sys.stderr)
    return True

  print('Unexpected HTTP code %d when checking for %s' % (httpCode, url),
        file=sys.stderr)
  raise RuntimeError('Unexpected HTTP code %d' % httpCode)
  
def webdavRemoteDirCreate(sslContext, token, url):

  httpRequest = urllib.request.Request(url,
                  headers = { 'User-Agent'     : 'justin-webdav-upload',
                              'Authorization'  : 'Bearer ' + token
                            },
                  method = 'MKCOL')

  try:
    response = urllib.request.urlopen(httpRequest, context = sslContext)    
    httpCode = response.status 

  except urllib.error.URLError as e:
    # For MKCOL, HTTP code 405 means directory already exists 
    # http://www.webdav.org/specs/rfc2518.html#rfc.section.8.3.2.p.4
    # Presumably another job created it ...
    if e.code == 405:
      print('%s already exists now!' % url, file=sys.stderr)
      return

    print('HTTP error: ' + str(e), file=sys.stderr)
    raise
    
  except Exception as e:
    print('Unknown error: ' + str(e), file=sys.stderr)
    raise
  
  if httpCode == 201:
    print('%s created, HTTP code %d' % (url, httpCode), file=sys.stderr)
    return

  print('Unexpected HTTP code %d when creating %s' % (httpCode, url),
        file=sys.stderr)
  raise RuntimeError('Unexpected HTTP code %d' % httpCode)
  
def webdavPutFile(token, source, destinationDir):

  destDirSplit = destinationDir.split('/')

  # Remove any final "/" and "//" after the one in "https://"
  for i in range(2, len(destDirSplit)):
    if destDirSplit[i] == '':
      destDirSplit.pop(i)
      
  destinationDir = '/'.join(destDirSplit)

  sslContext = ssl.SSLContext()
  sslContext.verify_mode = ssl.CERT_REQUIRED
  sslContext.check_hostname = True
  sslContext.load_verify_locations(capath = '/etc/grid-security/certificates')

  # Check the directory tree already exists and create if necessary
  webdavCheckRemoteDirectories(sslContext, token, destDirSplit)

  sourceFile = source.split('/')[-1]
  destinationURL = destinationDir + '/' + sourceFile
    
  if webdavRemoteExists(sslContext, token, destinationURL):
    print('File already exists at %s' % destinationURL, file=sys.stderr)
    raise RuntimeError('File already exists')
  
  # Do a PUT to the desired destination, but expect a redirect
  httpRequest = urllib.request.Request(destinationURL,
                  headers = { 'User-Agent'     : 'justin-webdav-upload',
                              'Authorization'  : 'Bearer ' + token,
                              'Expect'         : '100-continue'
                            },
                  method = 'PUT')

  try:
    response = urllib.request.urlopen(httpRequest, context = sslContext)
    # Success is failure as we want a 307 redirect
    raise RuntimeError('No redirect received')

  except urllib.error.HTTPError as e:

    if e.code == 307:
      # And failure is success
      location = e.headers['Location']
    else:
      print('Unexpected HTTP code %d when creating %s' 
            % (e.code, destinationURL), file=sys.stderr)
      raise
    
  except Exception as e:
    print('Unexpected error when creating %s: %s' 
          % (str(e), destinationURL), file=sys.stderr)
    message = e.read().decode('utf-8')
    print(message, file=sys.stderr)
    raise

  print('Redirected to %s' % location, file=sys.stderr)

  #
  # Now use the URL we got from the redirection
  # 
  httpRequest = urllib.request.Request(location,
                  data = open(source, 'rb'),
                  headers = { 'User-Agent' : 'justin-webdav-upload' },
                  method = 'PUT')

  # Replace .has_header to prevent the default Content-Type 
  # IMO dCache should ignore Content-Type rather than reject the workflow
  httpRequest.has_header \
   = lambda header_name: (header_name == 'Content-type' or
                urllib.request.Request.has_header(httpRequest, header_name))

  try:
    response = urllib.request.urlopen(httpRequest, context = sslContext)
  except Exception as e:
    print('Error when creating %s: %s'
          % (destinationURL, str(e)), file=sys.stderr)
    raise

  if response.status == 201:
    # Created successfully
    print('Created ' + destinationURL)
    return

  print('Unexpected HTTP code %d when creating %s' 
        % (response.status, destinationURL), file=sys.stderr)
  raise RuntimeError('Unexpected HTTP code %d' % response.status)

#
# End of WebDAV uploads code
#

#
# PROGRAM MAIN !!!
# 

parser = argparse.ArgumentParser(prog='justin-webdav-upload',
  usage='justin-webdav-upload [--help] --token-file '
        'TOKENFILE --source-file SOURCEFILE --destination-directory URL \n\n'
        'See the justin-webdav-upload(1) man page for detailed help '
        'and command syntax\n')
                                 
parser.add_argument("--token-file",
                    type = str,
                    help = "Token file")

parser.add_argument("--source-file",
                    type = str,
                    help = "Source file")

parser.add_argument("--destination-directory",
                    type = str,
                    help = "Destination directory URL")

try:
  args = vars(parser.parse_args())
except:
  sys.exit(1)

if not args['token_file']:
  print('--token-file missing', file=sys.stderr)
  sys.exit(1)

try:
  token = open(args['token_file'], 'r').read().strip()
except:
  print('Failed to read token from %s' % args['token_file'], 
        file=sys.stderr)
  sys.exit(1)

if not args['source_file']:
  print('--source-file missing', file=sys.stderr)
  sys.exit(1)

if not os.path.exists(args['source_file']):
  print('source file %s does not exist' % args['source_file'], file=sys.stderr)
  sys.exit(1)

if not args['destination_directory']:
  print('--destination-directory missing', file=sys.stderr)
  sys.exit(1)

if not args['destination_directory'].startswith('https://'):
  print('Only https:// destination directory URLs are supported', 
        file=sys.stderr)
  sys.exit(1)

if not args['destination_directory'].startswith( \
                  'https://fndcadoor.fnal.gov:2880/dune/scratch/users/'):
  print('Unsupported destination directory URL - just FNAL scratch for now',
        file=sys.stderr)
  sys.exit(1)

destinationDir = args['destination_directory']

try:
  webdavPutFile(token, args['source_file'], destinationDir)
  sys.exit(0)
except Exception as e:
  print('justin-webdav-upload fails: ' + str(e), file=sys.stderr)
  sys.exit(2)
  