#!/usr/bin/env python3
#
# metacat-rucio-to-sam - backfill SAM with files registered in MetaCat and
#                        Rucio
#
# Copyright 2013-23, Andrew McNab for the University of Manchester
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
"""

Set up your environment with something like this:

source /cvmfs/dune.opensciencegrid.org/products/dune/setup_dune.sh
setup rucio
setup sam_web_client
export SAM_EXPERIMENT=dune
export METACAT_AUTH_SERVER_URL=https://metacat.fnal.gov:8143/auth/dune
export METACAT_SERVER_URL=https://metacat.fnal.gov:9443/dune_meta_prod/app
setup metacat
metacat auth login -m x509 dunepro

then do

metacat-rucio-to-sam --mql MQL --sam-query SAMQUERY --number N

The script does the MQL query with MetaCat and the SAMQUERY with SAM
and tries to declare each file returned by the MetaCat query which is absent
from the SAM query.

"""

import os
import sys
import copy
import json
import datetime
import argparse
import subprocess
import rucio.client

def getListFromSAM(samQuery):
  try:
    outcome = subprocess.run('samweb list-files "%s" ' % samQuery,
                             stdout=subprocess.PIPE,
                             stderr=subprocess.STDOUT,
                             shell=True,
                             encoding='utf-8' 
                            )
  except Exception as e:
    print('samweb list-files fails with ' + str(e))
    return None
    
  return outcome.stdout.splitlines()

def getListFromMetaCat(mql):
  try:
    outcome = subprocess.run('metacat query --json --metadata all "%s" ' % mql,
                             stdout=subprocess.PIPE,
                             stderr=subprocess.STDOUT,
                             shell=True,
                             encoding='utf-8' 
                            )
    filesList = json.loads(outcome.stdout)
  except Exception as e:
    print('metacat query fails with ' + str(e))
    return None
    
  return filesList

def makeMetadataForSAM(metaCatFile):

  samMetadata = copy.deepcopy(metaCatFile['metadata'])

  # From pdjson2metadata
  coreAttributes = {
                     "event_count" :  "core.event_count",
                     "file_type"   :  "core.file_type", 
                     "file_format" :  "core.file_format",
                     "data_tier"   :  "core.data_tier", 
                     "data_stream" :  "core.data_stream", 
                     "events"      :  "core.events",
                     "first_event" :  "core.first_event_number",
                     "last_event"  :  "core.last_event_number",
                     "event_count" :  "core.event_count",
                     "DUNE.fcl_name" : "dune.config_file",
                     "parents": "core.parents",
                   }

  # Rename MetaCat core attributes
  for sk in coreAttributes:
    if coreAttributes[sk] in samMetadata:
      samMetadata[sk] = samMetadata[coreAttributes[sk]]
      samMetadata.pop(coreAttributes[sk], None)


  # Set dune.* and dune_mc.* to uppercase
  for sk in samMetadata:
    if sk.startswith('dune.') or sk.startswith('dune_mc.'):
      (prefix, suffix) = sk.split('.', 1)
      samMetadata[prefix.upper() + '.' + suffix] = samMetadata[sk]
      samMetadata.pop(sk, None)

  # Remove extra bad stuff
  samMetadata.pop('DUNE.workflow', None)
  samMetadata.pop('DUNE.output_status', None)

  # Try patching parents
  if 'parents' in samMetadata:
    for parent in samMetadata['parents']:
     # Remove fardet-hd/vd preamble if needed
      parent['file_name'] = (parent['file_name'].replace('fardet-hd:', '').
          replace('fardet-vd:', ''))
      print('Patched parent', parent)

  try:
    samMetadata['application'] = { 
       "name"    : samMetadata['core.application.name'],
       "family"  : samMetadata['core.application.family'],
       "version" : samMetadata['core.application.version'] }
  except:
    pass

  for mk in ['core.application.name',    'core.application.family',
             'core.application.version', 'core.application' ]:
    samMetadata.pop(mk, None)

  samMetadata['runs'] = []

  for subrunStr in samMetadata['core.runs_subruns']:
    subrun = int(subrunStr)
    run = int(subrun / 100000)
    sub = subrun - 100000 * run
    samMetadata['runs'].append([run, sub, samMetadata['core.run_type']])
    
  samMetadata.pop('core.run_type', None)
  samMetadata.pop('core.runs', None)
  samMetadata.pop('core.runs_subruns', None)

  if 'checksums' in metaCatFile and 'adler32' in metaCatFile['checksums']:
    samMetadata['checksum'] = \
                        [ 'adler32:' + metaCatFile['checksums']['adler32'] ]

  samMetadata['file_name'] = metaCatFile['name']
  samMetadata['file_size'] = metaCatFile['size']
  samMetadata['user']      = metaCatFile['creator']
  samMetadata['group']     = 'dune'
  samMetadata.pop('core.user',  None)
  samMetadata.pop('core.group', None)

  for sk in ['start_time', 'end_time']:
    if 'core.' + sk in samMetadata:
      samMetadata[sk] = datetime.datetime.fromtimestamp(
                                     samMetadata['core.' + sk], 
                                     datetime.timezone.utc).isoformat('T')
    samMetadata.pop('core.' + sk, None)
 
  return samMetadata

def processMissingFiles(dryRun, number, samList, metaCatList, repClient):

  numberDeclared = 0

  for metaCatFile in metaCatList:
    if metaCatFile['name'] in samList:
      # SAM already has that file, so skip
      continue

    try:
      rucioFilesList = repClient.list_replicas(
                         [ { 'scope' : metaCatFile['namespace'],
                             'name'  : metaCatFile['name']
                           } ],
                         schemes=['root'],
                         domain='wan')
      rucioFile = next(rucioFilesList)
    except Exception as e:
      print('Skip %s:%s - failed to get replicas: %s' 
            % (metaCatFile['namespace'], metaCatFile['name'], str(e)))
      continue

    samPFN = None
    for pfn in rucioFile['pfns']:
      if pfn.startswith('root://fndca1.fnal.gov:1094/pnfs/fnal.gov/usr'
                        '/dune/persistent/staging/'):
                        
        pfnSplit = pfn.split('/')
        samPFN = 'dcache:/pnfs/' + '/'.join(pfnSplit[6:-1])

    if not samPFN:
      print('%s has no Fermilab PFN - skipping' % metaCatFile['name'])
      continue
 
    samMetadata = makeMetadataForSAM(metaCatFile)
    if not samMetadata:
      print('Failed converting metadata for %s:%s - skipping'
            % (metaCatFile['namespace'], metaCatFile['name']))
      continue

    print('=========================================')
    print(json.dumps(samMetadata, indent = 4))
    print('=========================================')

    with open('m-r-t-s.json', 'w') as f:
      f.write(json.dumps(samMetadata, indent = 4) + '\n')

    print('(%d/%d) samweb declare-file m-r-t-s.json for %s' 
          % (numberDeclared + 1, number, metaCatFile['name']))
    if dryRun:
      ret = 0
    else:
      ret = os.system('samweb declare-file m-r-t-s.json')

    if ret == 0:
      print('samweb add-file-location %s %s' % (metaCatFile['name'], samPFN))

      if not dryRun:
        ret = os.system('samweb add-file-location %s %s' 
                        % (metaCatFile['name'], samPFN))
              
        if ret == 0:
          numberDeclared += 1
          if numberDeclared >= number:
            break
        else:
          print('Failed to add location for %s' % metaCatFile['name'])
    else:
      print('samweb declare for %s fails with code %d!'
            % (metaCatFile['name'], ret))

  if dryRun:
    print('\nDry run - would declare %d file(s) to SAM\n' % numberDeclared)
  else:
    print('\n%d file(s) declared to SAM\n' % numberDeclared)

#
# PROGRAM MAIN !!!
# 

parser = argparse.ArgumentParser(prog='metacat-rucio-to-sam',
  usage='metacat-rucio-to-sam [OPTIONS]\n')
                                 
parser.add_argument("--mql",
                    type = str,
                    help = "MQL query")

parser.add_argument("--sam-query",
                    type = str,
                    help = "SAM query")

parser.add_argument("--number",
                    type = int,
                    help = "SAM declares per invocation")

parser.add_argument("--dry-run",
                    action = "store_true",
                    help = "Do not commit to SAM")

try:
  args = vars(parser.parse_args())
except:
  sys.exit(1)

if not args['mql']:
  print('--mql missing', file=sys.stderr)
  sys.exit(1)

if not args['sam_query']:
  print('--sam-query missing', file=sys.stderr)
  sys.exit(1)

if not args['number']:
  print('--number missing', file=sys.stderr)
  sys.exit(1)

samList = getListFromSAM(args['sam_query'])
if samList is None:
  sys.exit(1)
#print(samList)

metaCatList = getListFromMetaCat(args['mql'])
if not metaCatList:
  sys.exit(1)
#print(metaCatList)

# Connect to Rucio
try:
  repClient = rucio.client.replicaclient.ReplicaClient()
except Exception as e:
  print("Connect to Rucio fails with: " + str(e))
  sys.exit(2)

sys.exit(processMissingFiles(args['dry_run'],
                             args['number'], 
                             samList, 
                             metaCatList, 
                             repClient))
