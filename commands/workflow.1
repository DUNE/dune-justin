.TH WORKFLOW  "2021" "workflow" "WFS Manual"
.SH NAME
.B workflow
\- Workflow System utility command
.SH SYNOPSIS
.B workflow subcommand [options]
.SH DESCRIPTION
.B workflow
is a command-line utility for managing requests, stages, files, and replicas
in the Workflow System Database (WFDB).

.SH GENERAL OPTIONS

.HP 
.B "-h, --help"
.br
Show help message and exit

.HP 
.B "-v, --verbose"
.br
Turn on verbose logging of the communication with the WFDB service.

.HP 
.B "--hostname HOSTNAME"
.br
Use an alternative Worklow Service, rather than wfs.dune.hep.ac.uk. This 
option is only needed during development and testing.

.SH SUBCOMMANDS

.HP
.B "create-request [--name NAME] [--mql QUERY]"
.br
Create a new, empty request in the database, optionally with the given 
human-readable name and MetaCat Query Language expression. If a name is not 
given, a name based on a timestamp is created. If present, the query will be
used by the Workflow System to build the list of input files from MetaCat.
Requests are created in the state "draft" and the command returns the new 
request's ID number.

.HP
.B "show-requests [--request-id ID]"
.br
Show details of all requests or optionally of a single request. Each line
of the output gives the request ID, state, creation time, name, and MetaCat
query of one request.

.HP
.B "submit-request --request-id ID"
.br
.B Currently not used. 
Changes the state of the given request from "draft" to "submitted". In the 
future, this
will allow automated sanity checking and prioritisation of requests. For 
very large requests it may give an opportunity for manual approval by the 
operations team.

.HP
.B "approve-request --request-id ID"
.br
Approves the a request in the "draft" or "submitted" state and changes its 
state to "finding".

.HP
.B "pause-request --request-id ID"
.br
Changes the state of the given request to "paused". This state temporarily
excludes a request from the workflow allocation process.

.HP
.B "run-request --request-id ID"
.br
Changes the state of the given request back to "running". Requests in this
state are included in the workflow allocation process.

.HP
.B "create-stage --request-id ID --stage-id ID --upload-file FILENAME --max-wall-seconds N --max-rss-bytes N [--min-processors N] [--max-processors N] [--any-location TRUE/FALSE] [--output-pattern PATTERN] [--output-pattern-next-stage PATTERN]"
.br
Creates a new stage for the given request ID with the given stage ID. Stages
must be numbered consecutively from 1, and each request must have at least
one stage. Each stage must have a boostrap shell script associated with it,
given by the
.B --upload-file
option which will be executed on worker nodes to process its files. 

The maximum wallclock time and the maximum amount of resident memory that
may be needed
by the script  must be given. The resident memory corresponds to the physical
memory managed by HTCondor's ResidentSetSize value.

If the script can make use of multiple processors then 
.B --min-processors
and
.B --max-processors
can be used to give the minimum it needs and the maximum it can use. The 
minimum defaults to 1 and the maximum defaults to be the same as the minimum 
value.

By default, input files will only be allocated to a script which are on 
storages at the same site or nearby sites. This can be changed by setting
.B --any-location TRUE
to allow input files to be allocated from any accessible storage.

If 
.B --output-pattern
is given then the generic job will look for files created by the script
which match this pattern. The pattern is a Bash shell pattern using *, ? and
[...] expressions. See the bash(1) Pattern Matching section for details. Any
output files found by this matching will be uploaded and registered by the
generic job. Furthermore, if the found files have a corresponding JSON metadata
file with the same name but with ".json" appended, that will be recorded for
that file in MetaCat.

Alternatively
.B --output-pattern-next-stage
can be given in which the output file will also be registered in the
Workflow Database as an unprocessed input file for the next stage and
available for allocation to instances of that stage's script.

.HP
.B "show-stages --request-id ID [--stage-id ID]"
.br
Shows details of all stages of the given request or optionally of a single 
stage of that request. Each line
of the output gives the request ID, stage ID,, min processors,
max processors, max wallclock seconds, max RSS bytes, and the any location 
switch.

.HP
.B "show-bootstrap --request-id ID --stage-id ID"
.br
Show the bootstrap script of the given stage within the given request.

.HP
.B "show-stage-outputs --request-id ID --stage-id ID"
.br
Shows the patterns used to find output files of the given stage within the 
given request. Each line of the response consists of "(next)" or "(  )" 
depending on whether the files are passed to the next stage within the
request, and then the pattern itself.

.HP
.B "show-storages [--rse-name NAME]"
.br
Shows information about RUCIO storage elements cached in the Workflow
Database, optionally limiting output to a single RSE using its name. Each
line of the output consists of the RSE name followed by the occupancy
fraction obtained from RUCIO in the range 0.0 to 1.0.

.HP
.B "show-sites-storages [--site-name NAME] [--rse-name NAME]"
.br
Shows information about the locations of RUCIO storage elements relative to
sites, optionally limited to the given site and/or RSE. Each line of the
output gives the site name, RSE name, and then their relative locaton:
"samesite", "nearby" or "accessible". 

.HP
.B "add-file --request-id ID [--stage-id ID] --file-did DID --rse-name NAME --pfn URL"
.br
Adds one file to the list of files to be processed in a stage, with the
given RUCIO file Data Identifier (DID). 
.B Normally this should only be done for the first stage, 
which is the default. Files are created in the "unallocated" state, ready
for processing. Exactly RSE which has a replica of the file must be
given along with one PFN to access the replica on that RSE. This subcommand is
only intended for testing, as normall an agent builds the lists of files and 
replicas for the first stage of a request using MetaCat and Rucio.

.HP
.B "show-files [--request-id ID] [--stage-id ID] [--file-did DID]"
.br
Shows files information cached in the Workflow Database, either limited by 
request ID and stage ID or by file DID. For each file, the request ID, stage
ID, file state, and file DID are shown. The file state is one of "finding",
"unallocated", "allocated", or "processed". Files wait in the "unallocated"
state, are then allocated to an instance of the stage's script by the 
Workflow Allocator, and then either return to "unallocated" or move to
"processed" depending on whether the script is able to process them
correctly.

.HP
.B "show-replicas [--request-id ID] [--stage-id ID] [--file-did DID]"
.br
Shows file and replica information in the Workflow Database, either limited by 
request ID and stage ID or by file DID. For each replica of each file, the 
request ID, stage ID, file state, RSE name, and file DID are shown. 

.HP
.B "show-jobs --job-id ID | --request-id ID [--stage-id ID] [--state STATE]"
.br
Show jobs identified by Job ID or Request ID (and optionally Stage ID). Job 
state can also be given to further filter the jobs listed. For each job,
the Job ID, Request ID, Stage ID, State, and creation time are shown.

.SH FILES

An X.509 user proxy is currently needed to contact the Workflow Service,
which is either given by 
.B $X509_USER_PROXY 
or 
.B /tmp/x509up_uUSERID
where 
.B USERID
is the numeric Unix user id, given by 
.B id -u

.SH AUTHOR
Andrew McNab <Andrew.McNab@cern.ch>

.SH "SEE ALSO"
bash(1)
