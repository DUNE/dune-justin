#!/usr/bin/env python3
#
# justin-rucio-upload - upload files to Rucio managed storage using the
#                       extra options of the Rucio upload Python API
#
# Copyright 2013-24, Andrew McNab for the University of Manchester
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

import sys
import logging
import argparse
import rucio.client.uploadclient

#
# PROGRAM MAIN !!!
# 

parser = argparse.ArgumentParser(prog='justin-rucio-upload',
  usage='justin-rucio-upload [--help] PATH '
        'See the justin-rucio-upload(1) man page for detailed help '
        'and command syntax\n')
                                 
parser.add_argument("path",
                    type = str,
                    help = "File path")

parser.add_argument("--rse",
                    type = str,
                    help = "RSE name")

parser.add_argument("--scope",
                    type = str,
                    help = "Scope of file and dataset")

parser.add_argument("--dataset",
                    type = str,
                    help = "Name of dataset without scope prefix")

parser.add_argument("--protocol",
                    type = str,
                    help = "Protocol")

parser.add_argument("--timeout",
                    type = int,
                    help = "Timeout limit in seconds")

parser.add_argument("--tries",
                    type = int,
                    help = "Number of times to try Rucio calls")

parser.add_argument("--no-check",
                    action = "store_true",
                    help = "Do not check Rucio registrations")

try:
  args = vars(parser.parse_args())
except:
  sys.exit(1)

if not args['rse']:
  print('--rse missing', file=sys.stderr)
  sys.exit(1)

if not args['scope']:
  print('--scope missing', file=sys.stderr)
  sys.exit(1)

if not args['dataset']:
  print('--dataset missing', file=sys.stderr)
  sys.exit(1)

if not args['protocol']:
  protocol = 'davs'
else:
  protocol = args['protocol']

try:
  timeout = int(args['timeout'])
except:
  timeout = 60

try:
  tries = int(args['tries'])
except:
  tries = 1

try:
  filename = args['path'].split('/')[-1]
except:
  print('Cannot extract filename from path', file=sys.stderr)
  sys.exit(1)

logging.basicConfig(level = logging.DEBUG)

for i in range(1, tries + 1):
  print('--- Upload try %d/%d' % (i, tries + 1), file=sys.stderr)
  try:
    client       = rucio.client.Client(timeout = timeout)
    uploadClient = rucio.client.uploadclient.UploadClient(client)
    uploadDict   = { 'path'             : args['path'],
                     'rse'              : args['rse'],
                     'did_scope'        : args['scope'],
                     'dataset_scope'    : args['scope'],
                     'dataset_name'     : args['dataset'],
                     'force_protocol'   : protocol,
                     'transfer_timeout' : timeout
                   }

    ret = uploadClient.upload([uploadDict])
  except Exception as e:
    ret = None
    print('Rucio upload fails: ' + str(e), file=sys.stderr)

if ret is None:
  # If an exception than exit with 99
  sys.exit(99)

if ret:
  # Exit with the return code of the last upload attempt
  sys.exit(ret)

if args['no_check']:
  # If not running checks then exit immediately with 0 for success
  sys.exit(0)

# Check the file is registered in Rucio, with replica(s)
for i in range(1, tries + 1):
  print('--- Replica check try %d/%d' % (i, tries + 1), file=sys.stderr)
  try:
    repClient = rucio.client.replicaclient.ReplicaClient()

    repGen = repClient.list_replicas([{'scope' : args['scope'],
                                       'name'  : filename
                                      }])
    # Just one file anyway!
    reps = next(repGen)
  except Exception as e:
    reps = None
    print('Rucio list_replicas fails: ' + str(e), file=sys.stderr)

if not reps or 'pfns' not in reps or not reps['pfns']:
  # No replicas returned!
  sys.exit(98)

# Check the file is in the given dataset
for i in range(1, tries + 1):
  print('--- Dataset check try %d/%d' % (i, tries + 1), file=sys.stderr)
  try:
    didClient = rucio.client.didclient.DIDClient()

    parentGen = didClient.list_parent_dids(scope, filename)
  except Exception as e:
    parentGen = None
    print('Rucio list_parent_dids fails: ' + str(e), file=sys.stderr)

if not parentGen:
  # No parents returned!
  sys.exit(97)

# Try to find the given dataset in the parents
for parent in parentGen:
  if ('scope' in parent and 
      'name'  in parent and 
      parent['scope'] == args['scope'] and 
      parent['name']  == args['dataset']):
    # Found the given dataset as a parent
    sys.exit(0)

# We didn't find the given dataset as a parent of the uploaded file!     
print('Did not find the dataset as a parent!', file=sys.stderr)
sys.exit(96)
