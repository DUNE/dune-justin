#!/usr/bin/env python3
#
# justin - justIN command line utility
#
# Copyright 2013-23, Andrew McNab for the University of Manchester
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# See the justin(1) man page for full usage. 

import os
import sys
import json
import time
import ssl
import urllib.request
import argparse
import platform

# The make-justin-tag script looks for this and updates it - so format matters
versionNumber = '00.04.00'
sessionFile   = '/tmp/justin.session.' + str(os.getuid())

def body(buf): 

  sys.stdout.write(buf.decode('UTF-8'))
#
# PROGRAM MAIN !!!
# 

parser = argparse.ArgumentParser()

commands = [ "create-request", 
             "submit-request", 
             "restart-request",
             "pause-request",
             "finish-request",
             "create-stage", 
             "create-jobscript",
             "quick-request", 
             "create-storage",
             "create-site-storage",
             "show-requests", "show-stages", "show-jobscript",
             "show-stage-outputs",
             "show-files",
             "fail-files",
             "show-replicas", "show-storages",
             "show-sites-storages", "show-jobs",
             "time" ]

parser.add_argument("command",
                    type = str,
                    help = "justin command to execute: " +
                           ' '.join(commands) )

parser.add_argument("-v", 
                    "--verbose",
                    action = "store_true",
                    help = "Verbose logging")

parser.add_argument("--request-id",
                    type = int,
                    help = "Request ID number")

parser.add_argument("--stage-id",
                    type = int,
                    help = "Stage ID number")

parser.add_argument("--file-did",
                    type = str,
                    help = "File DID")

parser.add_argument("--site-name",
                    type = str,
                    help = "Site name")

parser.add_argument("--rse-name",
                    type   = str,
                    action = "append",
                    help   = "RSE name")

parser.add_argument("--description",
                    type = str,
                    help = "Description to assign")

parser.add_argument("--name",
                    type = str,
                    help = "Name to assign")

parser.add_argument("--scope",
                    type = str,
                    help = "Scope")

parser.add_argument("--mql",
                    type = str,
                    help = "MetaCat Query")

parser.add_argument("--monte-carlo",
                    type = int,
                    help = "Monte Carlo count")

parser.add_argument("--refind-start-date",
                    type = int,
                    help = "Refind start date")

parser.add_argument("--refind-duration-days",
                    type = int,
                    help = "Refind duration in days")

parser.add_argument("--refind-interval-hours",
                    type = int,
                    help = "Refind frequency in hours")

parser.add_argument("--jobscript",
                    type = str,
                    help = "Specify a jobscript file")

parser.add_argument("--jobscript-id",
                    type = str,
                    help = "Specify a jobscript JSID")

parser.add_argument("--processors",
                    type = int,
                    help = "Number of processors required")

parser.add_argument("--wall-seconds",
                    type = int,
                    help = "Maximum wall seconds")

parser.add_argument("--rss-mb",
                    type = float,
                    help = "Maximum RSS MiB")

parser.add_argument("--max-distance",
                    type = float,
                    help = "Max distance for reading from storage")

parser.add_argument("--max-files-per-job",
                    type = int,
                    help = "Max files per job")

parser.add_argument("--output-pattern",
                    type   = str,
                    action = "append",
                    help   = "Output files pattern")

parser.add_argument("--output-pattern-next-stage",
                    type   = str,
                    action = "append",
                    help   = "Output files for next stage pattern")

parser.add_argument("--output-rse",
                    type   = str,
                    action = "append",
                    help   = "Name of RSE to use for output files")

parser.add_argument("--env",
                    type   = str,
                    action = "append",
                    help   = "Environment variables for the jobscript")

parser.add_argument("--lifetime-days",
                    type = int,
                    help = "Rucio lifetime for output files")

parser.add_argument("--pfn",
                    type   = str,
                    action = "append",
                    help   = "PFN of a replica")

parser.add_argument("--jobsub-id",
                    type = str,
                    help = "Jobsub ID number")

parser.add_argument("--state",
                    type = str,
                    help = "Restrict output by state")

parser.add_argument("--url",
                    type = str,
                    help = "justIN service to contact")

args = parser.parse_args()
jsonDict = vars(args)

if jsonDict['command'] == 'version':
  print(versionNumber)
  sys.exit(0)

jsonDict['version'] = versionNumber

if jsonDict['jobscript']:
  with open(jsonDict['jobscript']) as f:
    contents = f.read()
    jsonDict['jobscript'] = contents

if args.command not in commands:
  print("%s not recognised as a justin command" % args.command)
  sys.exit(1)

if jsonDict['verbose']:
  print(jsonDict)

# Set up request contexts to send the command to justIN 

if jsonDict['url']:
  url = jsonDict['url']
else:
  # This will move to justin.dune.hep.ac.uk once we are using tokens...
  url = 'https://justin-allocator-pro.dune.hep.ac.uk/api/commands'

try:
  (session, secret) = open(sessionFile, 'r').read().split()
except:
  session = None
  secret  = None
        
jsonDict['session']    = session
jsonDict['secret']     = secret

try:
  jsonDict['os_release'] = open('/etc/system-release','r').read().strip()
except:
  try:
    macPlatform = platform.mac_ver()[0]
    if macPlatform:
      jsonDict['os_release'] = 'macOS ' + macPlatform
  except:
    jsonDict['os_release'] = ''

httpRequest = urllib.request.Request(url + '/' + args.command,
                                     data = json.dumps(jsonDict).encode(),
                                     headers = { 'User-Agent': 
                                                 'justin ' + versionNumber },
                                     method = 'POST')

sslContext = ssl.SSLContext()

if 'X509_CERTIFICATES' in os.environ and os.environ['X509_CERTIFICATES']:
  sslContext.load_verify_locations(capath = os.environ['X509_CERTIFICATES'])
else:
  sslContext.load_verify_locations(capath = '/etc/grid-security/certificates')

try:
  response = urllib.request.urlopen(httpRequest, context = sslContext)

except urllib.error.HTTPError as e:
  if e.code == 401:
    try:
      responseDict = json.loads(e.read().decode('utf-8'))
      session = responseDict['session']
      secret  = responseDict['secret']
      message = responseDict['message']
    except:
      print('Failed to parse JSON response from justIN!', file=sys.stderr)
      sys.exit(21)

    try:
      os.umask(0)
      fd = os.open(path  = sessionFile,
                 flags = (os.O_WRONLY | os.O_CREAT | os.O_TRUNC),
                 mode  = 0o600)

      with open(fd, 'w') as f:
        f.write(session + ' ' + secret)
    except:
      print('Failed to create new session file %s' % sessionFile, 
            file=sys.stderr)
      sys.exit(22)
  
    print(message)
    sys.exit(0)

  print(e.read().decode('utf-8'), file=sys.stderr)
  sys.exit(21)
  
#if response.status != 200:
#  if jsonDict['verbose']:
#    print(response.read().decode('utf-8'), file=sys.stderr)
#  sys.exit(20)
  
print(response.read().decode('utf-8'), end='')
sys.exit(0)
 