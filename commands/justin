#!/usr/bin/env python3
#
# justin - justIN command line utility
#
# Copyright 2013-24, Andrew McNab for the University of Manchester
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# See the justin(1) man page for full usage. 

import os
import os.path
import sys
import json
import time
import ssl
import shlex
import shutil
import urllib.request
import argparse
import platform

# The make-justin-tag script looks for this and updates it - so format matters
versionNumber = '00.00.00'
sessionFile   = '/var/tmp/justin.session.' + str(os.getuid())

def body(buf): 

  sys.stdout.write(buf.decode('UTF-8'))
#
# PROGRAM MAIN !!!
# 

#parser = argparse.ArgumentParser(prog='justin', usage='justin COMMAND OPTIONS')
parser = argparse.ArgumentParser(usage='justin COMMAND OPTIONS')

commands = [ "create-workflow", 
             "submit-workflow", 
             "restart-workflow",
             "pause-workflow",
             "finish-workflow",
             "create-stage", 
             "create-jobscript",
             "simple-workflow", 
             "show-workflows", "show-stages", "show-jobscript",
             "show-stage-outputs",
             "show-files",
             "fail-files",
             "show-replicas", 
             "show-jobs",
             "fetch-logs",
             "whoami",
             "time" ]

parser.add_argument("command",
                    type = str,
                    help = ' '.join(commands) )

parser.add_argument("-v", 
                    "--verbose",
                    action = "store_true",
                    help = "Verbose logging")

parser.add_argument("--workflow-id",
                    type = int,
                    help = "Workflow ID number")

parser.add_argument("--stage-id",
                    type = int,
                    help = "Stage ID number")

parser.add_argument("--file-did",
                    type = str,
                    help = "File DID")

parser.add_argument("--site-name",
                    type = str,
                    help = "Site name")

parser.add_argument("--rse-name",
                    type   = str,
                    action = "append",
                    help   = "RSE name")

parser.add_argument("--description",
                    type = str,
                    help = "Description to assign")

parser.add_argument("--name",
                    type = str,
                    help = "Name to assign")

parser.add_argument("--scope",
                    type = str,
                    help = "Scope")

parser.add_argument("--mql",
                    type = str,
                    help = "MetaCat Query")

parser.add_argument("--monte-carlo",
                    type = int,
                    help = "Monte Carlo count")

parser.add_argument("--refind-end-date",
                    type = int,
                    help = "Refind end date")

parser.add_argument("--refind-interval-hours",
                    type = int,
                    help = "Refind frequency in hours")

parser.add_argument("--jobscript",
                    type = str,
                    help = "Specify a jobscript file")

parser.add_argument("--jobscript-id",
                    type = str,
                    help = "Specify a jobscript JSID")

parser.add_argument("--jobscript-github",
                    type = str,
                    help = "Specify a jobscript in GitHub")

parser.add_argument("--processors",
                    type = int,
                    help = "Number of processors required")

parser.add_argument("--wall-seconds",
                    type = int,
                    help = "Maximum wall seconds")

parser.add_argument("--rss-mib",
                    "--rss-mb",
                    type = float,
                    help = "Maximum RSS MiB")

parser.add_argument("--max-distance",
                    type = float,
                    help = "Max distance for reading from storage")

parser.add_argument("--output-pattern",
                    type   = str,
                    action = "append",
                    help   = "Output files pattern")

parser.add_argument("--output-pattern-next-stage",
                    type   = str,
                    action = "append",
                    help   = "Output files for next stage pattern")

parser.add_argument("--output-rse",
                    type   = str,
                    action = "append",
                    help   = "Name of RSE to use for output files")

parser.add_argument("--env",
                    type   = str,
                    action = "append",
                    help   = "Environment variables for the jobscript")

parser.add_argument("--classad",
                    type   = str,
                    action = "append",
                    help   = "Additional ClassAds for jobs")

parser.add_argument("--lifetime-days",
                    type = int,
                    help = "Rucio lifetime for output files")

parser.add_argument("--pfn",
                    type   = str,
                    action = "append",
                    help   = "PFN of a replica")

parser.add_argument("--jobsub-id",
                    type = str,
                    help = "Jobsub ID number")

parser.add_argument("--state",
                    type = str,
                    help = "Restrict output by state")

parser.add_argument("--unpack",
                    action = 'store_true',
                    help = "Unpack tgz file")

parser.add_argument("--url",
                    type = str,
                    help = "justIN service to contact")

justinOptions = os.getenv('JUSTIN_OPTIONS')

if justinOptions:
  justinArgv = sys.argv[1:2] + shlex.split(justinOptions) + sys.argv[2:]
else:
  justinArgv = sys.argv[1:]

try:
  args = parser.parse_args(justinArgv)
except:
  print('\nSee the justin(1) man page for detailed help and command syntax\n')
  parser.print_help()
  sys.exit(0)

jsonDict = vars(args)

if jsonDict['command'] == 'version':
  print(versionNumber)
  sys.exit(0)

jsonDict['version'] = versionNumber

if jsonDict['jobscript']:
  with open(jsonDict['jobscript']) as f:
    contents = f.read()
    jsonDict['jobscript'] = contents

if args.command not in commands:
  print("%s not recognised as a justin command" % args.command)
  sys.exit(1)

if jsonDict['verbose']:
  print(jsonDict)

# Set up workflow contexts to send the command to justIN 

if jsonDict['url']:
  url = jsonDict['url']
else:
  url = 'https://justin-ui-pro.dune.hep.ac.uk/api/commands'

try:
  (session, secret) = open(sessionFile, 'r').read().split()
except:
  session = None
  secret  = None
        
jsonDict['session']    = session
jsonDict['secret']     = secret

try:
  jsonDict['os_release'] = open('/etc/system-release','r').read().strip()
except:
  try:
    macPlatform = platform.mac_ver()[0]
    if macPlatform:
      jsonDict['os_release'] = 'macOS ' + macPlatform
  except:
    jsonDict['os_release'] = ''

httpRequest = urllib.request.Request(url + '/' + args.command,
                                     data = json.dumps(jsonDict).encode(),
                                     headers = { 'User-Agent': 
                                                 'justin ' + versionNumber },
                                     method = 'POST')

sslContext = ssl.SSLContext()
sslContext.verify_mode = ssl.CERT_REQUIRED
sslContext.check_hostname = True

# Use embedded UK e-Science CA and Root certificates, expiring in 2027
sslContext.load_verify_locations(cadata = '''
-----BEGIN CERTIFICATE-----
MIIDwzCCAqugAwIBAgICASMwDQYJKoZIhvcNAQELBQAwVDELMAkGA1UEBhMCVUsx
FTATBgNVBAoTDGVTY2llbmNlUm9vdDESMBAGA1UECxMJQXV0aG9yaXR5MRowGAYD
VQQDExFVSyBlLVNjaWVuY2UgUm9vdDAeFw0xMTA2MTgxMzAwMDBaFw0yNzEwMzAw
OTAwMDBaMFMxCzAJBgNVBAYTAlVLMRMwEQYDVQQKEwplU2NpZW5jZUNBMRIwEAYD
VQQLEwlBdXRob3JpdHkxGzAZBgNVBAMTElVLIGUtU2NpZW5jZSBDQSAyQjCCASIw
DQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAKkLgb2eIcly4LZfj0Rf5F7s+HE/
6Tvpf4jsKkm7qs33y3EEudCbcPwQKjS2MgytPv+8xpEPHqy/hqTseNlZ6oJgc+V8
xlJ+0iws882Ca8a9ZJ/iGQH9UzXU4q35ArN3cbwoWAAvMvzZ6hUV86fAAQ1AueQN
6h7/tnfYfaUMiB4PNxucmouMHDJGmYzl47FtlLeHUr2c4m/oWSG5pADIvGFpWFHj
NIw8/x4n97w5/ks0tc/8/5Q6xzUfCX/VfqciQCvKcui2J5MBhUlBDLenzwqvUytB
4XAwX/pRcKmnFEYwoc9OKGExNx9tn9RjQYJAC/KLb44Jqno9l0eRxu3uw4sCAwEA
AaOBnzCBnDAPBgNVHRMBAf8EBTADAQH/MA4GA1UdDwEB/wQEAwIBBjAdBgNVHQ4E
FgQUEqW/kZ9/4q9qXAny4vpZ4Dbh81UwHwYDVR0jBBgwFoAUXvgbSKZ3ayk8LgBT
Mytjont+k8AwOQYDVR0fBDIwMDAuoCygKoYoaHR0cDovL2NybC5jYS5uZ3MuYWMu
dWsvY3JsL3Jvb3QtY3JsLmRlcjANBgkqhkiG9w0BAQsFAAOCAQEArd5TFOo9SzGW
0+KrAdzzf60zh4Wy//vZz4tgt7NeDbNpz2TZROBAClSu7oLPiruzgnhNP/Vxeu0s
pI41wRQsh0DVxhM+9ZFOskH+OdmHzKagoejvHh6Jt8WNN0eBLzN8Bvsue7ImJPaY
cf/Qj1ZTBhaRHcMsLNnqak3un/P+uLPxqSuxVKMtC8es/jqosS4czJ3dgs1hgFy9
nPQiwuIyf3OJ9eifAOGXk9Nlpha9C54zhc+hAkSLnpx/FhPjwLgpwDRgDJud6otH
15x3qZqXNx7xbYfeHaM1R1HMEjfVdzKCTY4zsqNEGPEF/0nUQSFk6KQVz0/ugNmI
9qoDx3FeEg==
-----END CERTIFICATE-----
-----BEGIN CERTIFICATE-----
MIIDhjCCAm6gAwIBAgIBADANBgkqhkiG9w0BAQUFADBUMQswCQYDVQQGEwJVSzEV
MBMGA1UEChMMZVNjaWVuY2VSb290MRIwEAYDVQQLEwlBdXRob3JpdHkxGjAYBgNV
BAMTEVVLIGUtU2NpZW5jZSBSb290MB4XDTA3MTAzMDA5MDAwMFoXDTI3MTAzMDA5
MDAwMFowVDELMAkGA1UEBhMCVUsxFTATBgNVBAoTDGVTY2llbmNlUm9vdDESMBAG
A1UECxMJQXV0aG9yaXR5MRowGAYDVQQDExFVSyBlLVNjaWVuY2UgUm9vdDCCASIw
DQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAM3ORtmmUHotwDTfAH5/eIlo3+BK
oElDeaeN5Sg2lhPu0laPch7pHKSzlqyHmZGsk3fZb8hBmO0lD49+dKnA31zLU6ko
Bje1THqdrGZPcjTm0lhc/SjzsBtWm4oC/bpYBACliB9wa3eSuU4Rqq71n7+4J+WO
KvaDHvaTdRYE3pyie2Xe5QTI8CXedCMh18+EdFvwlV79dlmNRNY93ZWUu6POL6d+
LapQkUmasXLjyjNzcoPXgDyGauHOqmyqxuPx4tDTsC25nKr+7K5k3T+lplJ/jMkQ
l/QHgqnABBXQILzzrt0a8nQdM8ONA+bht+8sy4eN/0zMulNj8kAzrutkhJsCAwEA
AaNjMGEwDwYDVR0TAQH/BAUwAwEB/zAOBgNVHQ8BAf8EBAMCAQYwHQYDVR0OBBYE
FF74G0imd2spPC4AUzMrY6J7fpPAMB8GA1UdIwQYMBaAFF74G0imd2spPC4AUzMr
Y6J7fpPAMA0GCSqGSIb3DQEBBQUAA4IBAQCT0a0kcE8oVYzjTGrd5ayvOI+vbdiY
MG7/2V2cILKIts7DNdIrEIonlV0Cw96pQShjRRIizSHG5eH1kLJcbK/DpgX6QuPR
WhWR5wDJ4vaz0qTmUpwEpsT9mmyehhHbio/EsYM7LesScJrO2piD2Bf6pFUMR1LC
scAqN7fTXJSg6Mj6tOhpWpPwM9WSwQn8sDTgL0KkrjVOVaeJwlyNyEfUpJuFIgTl
rEnkXqhWQ6ozArDonB4VHlew6eqIGaxWB/yWMNvY5K+b1j5fdcMelzA45bFucOf1
Ag+odBgsGZahpFgOqKvBuvSrk/8+ie8I2CVYwT486pPnb5JFgHgUfZo8
-----END CERTIFICATE-----
''')

try:
  response = urllib.request.urlopen(httpRequest, context = sslContext)

except urllib.error.URLError as e:
  try:
    httpCode = e.code
  except:
    httpCode = 0

  if httpCode == 401:
    try:
      responseDict = json.loads(e.read().decode('utf-8'))
      session = responseDict['session']
      secret  = responseDict['secret']
      message = responseDict['message']
    except:
      print('Failed to parse JSON response from justIN!', file=sys.stderr)
      sys.exit(21)

    try:
      os.umask(0)
      fd = os.open(path  = sessionFile,
                   flags = (os.O_WRONLY | os.O_CREAT | os.O_TRUNC),
                   mode  = 0o600)

      with open(fd, 'w') as f:
        f.write(session + ' ' + secret)
    except:
      print('Failed to create new session file %s' % sessionFile, 
            file=sys.stderr)
      sys.exit(22)
  
    print(message, file=sys.stderr)
    sys.exit(1)

  if int(httpCode / 100) in (4, 5):
    message = e.read().decode('utf-8')
    print(message, file=sys.stderr)
    sys.exit(2)

  print('Connection error: ' + str(e), file=sys.stderr)
  sys.exit(21)

if jsonDict['command'] == 'fetch-logs':
  try:
    open(jsonDict['jobsub_id'].replace('@','-') + 
              '.logs.tgz', 'wb').write(response.read())
  except Exception as e:
    print('Failed to write out logs.tgz file:' + str(e), file=sys.stderr)
    sys.exit(23)

  if jsonDict['unpack']:
    shutil.unpack_archive(jsonDict['jobsub_id'].replace('@','-')+'.logs.tgz')

  sys.exit(0)
else:
  print(response.read().decode('utf-8'), end='')
  sys.exit(0)
v