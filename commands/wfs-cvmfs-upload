#!/usr/bin/env python3
#
#  wfs-cvmfs-upload - Upload tar file Fermilab RCDS for cvmfs
#
#  Andrew McNab, University of Manchester.
#  Copyright (c) 2013-23. All rights reserved.
#
#  Redistribution and use in source and binary forms, with or
#  without modification, are permitted provided that the following
#  conditions are met:
#
#    o Redistributions of source code must retain the above
#      copyright notice, this list of conditions and the following
#      disclaimer. 
#    o Redistributions in binary form must reproduce the above
#      copyright notice, this list of conditions and the following
#      disclaimer in the documentation and/or other materials
#      provided with the distribution. 
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
#  CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
#  INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
#  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
#  BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
#  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
#  TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
#  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
#  ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
#  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
#  OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#  POSSIBILITY OF SUCH DAMAGE.

import os
import sys
import json
import ssl
import time
import urllib.request
import argparse
import hashlib

versionNumber = '00.00.00'

def sendRequest(url, method, data):

  httpRequest = urllib.request.Request(url,
                                       data = data,
                                       headers = { 'User-Agent': 
                                                   'wfs-cvmfs-upload ' 
                                                   + versionNumber,
                                                   'Accept':
                                                   'application/json' },
                                       method = method)

  sslContext = ssl.SSLContext()

  if 'X509_USER_PROXY' in os.environ and os.environ['X509_USER_PROXY']:
    sslContext.load_cert_chain(os.environ['X509_USER_PROXY'])
  else:
    sslContext.load_cert_chain('/tmp/x509up_u%d' % os.getuid())

  if 'X509_CERTIFICATES' in os.environ and os.environ['X509_CERTIFICATES']:
    sslContext.load_verify_locations(capath = os.environ['X509_CERTIFICATES'])
  else:
    sslContext.load_verify_locations(capath = '/etc/grid-security/certificates')

  try:
    response = urllib.request.urlopen(httpRequest, context = sslContext)
  except urllib.error.URLError as e:
    return None
    
  return response

def findRcdsServer():

  for jobsubServer in ['jobsub03.fnal.gov:8443',
                       'jobsub02.fnal.gov:8443',
                       'jobsub01.fnal.gov:8443']:

    response = sendRequest('https://%s/jobsub/acctgroups/dune/dropboxcvmfsserver/' 
                           % jobsubServer,
                           'GET', 
                           None)

    try:
      responseJson = json.loads(response.read().decode('utf-8'))
      return responseJson['out']
    except:
      return None

def getCvmfsPath(rcdsServer, hashString):

  response = sendRequest('https://%s//pubapi/exists?cid=dune/%s'
                          % (rcdsServer, hashString),
                         'GET',
                         None)                       
  try:
    responseString = response.read().decode('utf-8')
  except:
    None

  if responseString.startswith('PRESENT:'):
    return responseString[8:]
    
  return None

def uploadTarfile(rcdsServer, hashString, tarFileContents):

  response = sendRequest('https://%s//pubapi/publish?cid=dune/%s'
                          % (rcdsServer, hashString),
                         'POST',
                         tarFileContents)

  if not response or response.status != 200:
    return False
  
  responseString = response.read().decode('utf-8')
  if responseString[:2] != 'OK':
    return False
    
  return True

#
# PROGRAM MAIN !!!
# 

parser = argparse.ArgumentParser()

parser.add_argument("-v", 
                    "--verbose",
                    action = "store_true",
                    help = "Verbose logging")

parser.add_argument('tar_file',
                    type = str,
                    help = 'tar file to upload')

args = parser.parse_args()

rcdsServer = findRcdsServer()
if not rcdsServer:
  print('Failed to find RCDS server', file=sys.stderr)
  sys.exit(1)

if args.verbose:
  print('Found RCDS server: ' + rcdsServer, file=sys.stderr)

try:
  tarFileContents = open(args.tar_file, 'rb').read()
  hashString = hashlib.sha1(tarFileContents).hexdigest()
except:
  print('Failed to calculate sha1 hash of %s' % args.tar_file)
  sys.exit(2)

if args.verbose:
  print('Check RCDS server for %s (%s)' % (args.tar_file, hashString),
        file=sys.stderr)

path = getCvmfsPath(rcdsServer, hashString)
if path:
  # Found cvmfs path, so just print it
  print(path, end='')
  sys.exit(0)

if not uploadTarfile(rcdsServer, hashString, tarFileContents):
  print('Failed to upload %s to RCDS server' % args.tar_file,
        file=sys.stderr)
  sys.exit(3)

if args.verbose:
  print('Uploaded %s (%s) to RCDS server' % (args.tar_file, hashString),
        file=sys.stderr)

for i in range(0,12):
  time.sleep(5)

  path = getCvmfsPath(rcdsServer, hashString)
  if path:
    # Found, so just print it
    print(path, end='')
    sys.exit(0)

print('cvmfs directory not available despite upload', file=sys.stderr)
sys.exit(4)
