#!/usr/bin/env python3
#
#  workflow - DUNE WFS command line utility
#
#  See the workflow(1) man page for full usage. 
#  For example with the command  man ./workflow.1 
#
#  Andrew McNab, University of Manchester.
#  Copyright (c) 2013-21. All rights reserved.
#
#  Redistribution and use in source and binary forms, with or
#  without modification, are permitted provided that the following
#  conditions are met:
#
#    o Redistributions of source code must retain the above
#      copyright notice, this list of conditions and the following
#      disclaimer. 
#    o Redistributions in binary form must reproduce the above
#      copyright notice, this list of conditions and the following
#      disclaimer in the documentation and/or other materials
#      provided with the distribution. 
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
#  CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
#  INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
#  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
#  BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
#  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
#  TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
#  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
#  ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
#  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
#  OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#  POSSIBILITY OF SUCH DAMAGE.

import os
import sys
import json
import pycurl
import argparse

versionString = 'Workflow 0.1 (pyCurl)'

def body(buf): 

  sys.stdout.write(buf.decode('UTF-8'))

#
# PROGRAM MAIN !!!
# 

parser = argparse.ArgumentParser()

commands = [ "create-request", 
             "submit-request", "start-request",
             "add-file",
             "restart-request", "pause-request",
             "create-stage", 
             "quick-request", 
             "create-storage",
             "create-site-storage",
             "show-requests", "show-stages", "show-bootstrap",
             "show-stage-outputs",
             "show-files", "show-replicas", "show-storages",
             "show-sites-storages", "show-jobs" ]

parser.add_argument("command",
                    type = str,
                    help = "Workflow command to execute: " +
                           ' '.join(commands) )

parser.add_argument("-v", 
                    "--verbose",
                    action = "store_true",
                    help = "Verbose logging")

parser.add_argument("--request-id",
                    type = int,
                    help = "Request ID number")

parser.add_argument("--stage-id",
                    type = int,
                    help = "Stage ID number")

parser.add_argument("--file-did",
                    type = str,
                    help = "File DID")

parser.add_argument("--site-name",
                    type = str,
                    help = "Site name")

parser.add_argument("--rse-name",
                    type   = str,
                    action = "append",
                    help   = "RSE name")

parser.add_argument("--name",
                    type = str,
                    help = "Name to assign")

parser.add_argument("--mql",
                    type = str,
                    help = "MetaCat Query")

parser.add_argument("--monte-carlo",
                    type = int,
                    help = "Monte Carlo count")

parser.add_argument("--refind-days",
                    type = float,
                    help = "Refind interval in days")

parser.add_argument("--refind-limit-days",
                    type = float,
                    help = "Refind duration in days")

parser.add_argument("--upload-file",
                    type = str,
                    help = "Specify a local file")

parser.add_argument("--processors",
                    type = int,
                    help = "Number of processors required")

parser.add_argument("--wall-seconds",
                    type = int,
                    help = "Maximum wall seconds")

parser.add_argument("--rss-mb",
                    type = float,
                    help = "Maximum RSS MiB")

parser.add_argument("--any-location",
                    type = bool,
                    help = "Input files from any location")

parser.add_argument("--output-pattern",
                    type   = str,
                    action = "append",
                    help   = "Output files pattern")

parser.add_argument("--output-pattern-next-stage",
                    type   = str,
                    action = "append",
                    help   = "Output files for next stage pattern")

parser.add_argument("--output-rse",
                    type   = str,
                    action = "append",
                    help   = "Name of RSE to use for output files")

parser.add_argument("--pfn",
                    type   = str,
                    action = "append",
                    help   = "PFN of a replica")

parser.add_argument("--jobsub-id",
                    type = str,
                    help = "Jobsub ID number")

parser.add_argument("--state",
                    type = str,
                    help = "Restrict output by state")

parser.add_argument("--hostname",
                    type = str,
                    help = "WFS service to contact")

args = parser.parse_args()
jsonDict = vars(args)

if jsonDict['upload_file']:
  with open(jsonDict['upload_file']) as f:
    jsonDict['file'] = f.read()

if args.command not in commands:
  print("%s not recognised as a workflow command" % args.command)
  sys.exit(1)

if jsonDict['verbose']:
  print(jsonDict)

c = pycurl.Curl()
if jsonDict['hostname']:
  c.setopt(c.URL, 'https://' + jsonDict['hostname'] + '/wfdb-cgi')
else:
  c.setopt(c.URL, 'https://wfs-pro.dune.hep.ac.uk/wfdb-cgi')

if 'X509_USER_PROXY' in os.environ and os.environ['X509_USER_PROXY']:
  x509UserProxy = os.environ['X509_USER_PROXY']
else:
  x509UserProxy = '/tmp/x509up_u%d' % os.getuid()

c.setopt(c.SSLCERT,        x509UserProxy)
c.setopt(c.SSLKEY,         x509UserProxy)
c.setopt(c.CAINFO,         x509UserProxy)
c.setopt(c.POSTFIELDS,     json.dumps(jsonDict))
c.setopt(c.HTTPHEADER,     ['Content-Type: application/json'])
c.setopt(c.WRITEFUNCTION,  body)
c.setopt(c.USERAGENT,      versionString)
c.setopt(c.TIMEOUT,        30)
c.setopt(c.FOLLOWLOCATION, False)
c.setopt(c.SSL_VERIFYPEER, 1)
c.setopt(c.SSL_VERIFYHOST, 2)

if jsonDict['verbose']:
  c.setopt(c.VERBOSE, 1)

if os.path.isdir('/etc/grid-security/certificates'):
  c.setopt(c.CAPATH, '/etc/grid-security/certificates')
  
try:
  c.perform()
except Exception as e:
  print(str(e))
  sys.exit(10)

if c.getinfo(c.RESPONSE_CODE) != 200:
  sys.exit(20)
  
sys.exit(0)
