#!/bin/bash
#
# Generic Job script which will get a stage's bootstrap script from the
# justIN allocator service
#

# Everything goes to stdout
exec 2>&1

function log_line() {
echo `date -u +'%Y-%m-%d %H:%M:%S '`$1
}

log_line '====Start of justin-generic-job===='

function job_aborted() {

  cat <<EOF >justin-job-aborted.json
{
  "method"         : "job_aborted",
  "jobsub_id"      : "$JOBSUBJOBID",
  "http_code"      :  $2,
  "aborted_method" : "$3",
  "rse_name"       : "$4"
}
EOF

  curl \
     --user-agent 'justin-generic-job' \
     --header "X-Jobid: $JOBSUBJOBID" \
     --key $X509_USER_PROXY \
     --cert $X509_USER_PROXY \
     --cacert $X509_USER_PROXY \
     --capath $X509_CERTIFICATES \
     --data @justin-job-aborted.json \
     https://justin-allocator-pro.dune.hep.ac.uk/api/allocator/job_aborted_$2

  # If in a subshell, this just exits that, not the job, so must be caught
  # The 1st argument lets the caller choose the exit code on errors
  exit $1
}

#echo '### date ; pwd ; printenv'
#date
#pwd
#printenv
#echo "### $_CONDOR_JOB_AD"
#cat $_CONDOR_JOB_AD

echo '### Start of  printenv | sort'
printenv | sort
echo '### End of printenv'

echo 'Before GFAL unsets, do  printenv | grep GFAL'
printenv | grep GFAL
unset GFAL_CONFIG_DIR GFAL_PLUGIN_DIR

echo '### pwd ; ls -lt ###'
pwd
ls -lt
echo '##############'

# Used by bootstrap script to find files from this generic job
export JUSTIN_PATH=`pwd`

# Create the justin-get-file command
base64 -d <<EOF > $JUSTIN_PATH/justin-get-file
IyEvYmluL3NoCiMKIyBTY3JpcHQgZm9yIHVzZSB3aXRoaW4gYm9vdHN0cmFwIHNjcmlwdCB0byBn
ZXQgdGhlIERJRCwgUEZOLCBhbmQgUlNFCiMgb2YgYSBmaWxlIHRvIHByb2Nlc3Mgd2l0aGluIHRo
ZSBzdGFnZSBhc3NpZ25lZCB0byB0aGUgam9iLgojCiMgQm9vdHN0cmFwIHNjcmlwdHMgY2FuIGV4
ZWN1dGUgdGhpcyBzY3JpcHQgYXM6ICRXRlNfUEFUSC93ZnMtZ2V0LWZpbGUKIwojIEVycm9yIG1l
c3NhZ2VzIHRvIHN0ZGVycgojIERJRCBQRk4gUlNFIHRvIHN0ZG91dCBvbiBvbmUgbGluZSBpZiBh
IGZpbGUgaXMgYXZhaWxhYmxlCiMKIyBUaGlzIHNjcmlwdCBtdXN0IGJlIGNvbnZlcnRlZCB0byBi
YXNlNjQgd2l0aCBzb21ldGhpbmcgbGlrZSB0aGUgZm9sbG93aW5nIAojIGFuZCBpbmNsdWRlZCBp
biB0aGUgaGVyZSBkb2N1bWVudCBuZWFyIHRoZSBzdGFydCBvZiB3ZnMtZ2VuZXJpYy1qb2IgOgoj
CiMgKG1hY09TKSBiYXNlNjQgLWIgNzYgd2ZzLWdldC1maWxlID4gd2ZzLWdldC1maWxlLmI2NAoj
IChMaW51eCkgYmFzZTY0ICAgICAgIHdmcy1nZXQtZmlsZSA+IHdmcy1nZXQtZmlsZS5iNjQKCmlm
IFsgISAtciAiJFdGU19QQVRIL3dmcy1nZXQtZmlsZS5qc29uIiBdIDsgdGhlbgogIGVjaG8gIiRX
RlNfUEFUSC93ZnMtZ2V0LWZpbGUuanNvbiBub3QgZm91bmQhIiA+JjIKICBleGl0IDIKZmkKCkdF
VF9GSUxFX1RNUD1gbWt0ZW1wIC90bXAvd2ZzX2dldF9maWxlX1hYWFhYWGAKCmh0dHBfY29kZT1g
Y3VybCBcCi0tdXNlci1hZ2VudCAnd2ZzLWdldC1maWxlJyBcCi0tc2lsZW50IFwKLS1oZWFkZXIg
IlgtSm9iaWQ6ICRKT0JTVUJKT0JJRCIgXAotLWhlYWRlciAiQWNjZXB0OiB0ZXh0L3BsYWluIiBc
Ci0tY2FwYXRoICR7WDUwOV9DRVJUSUZJQ0FURVM6LS9ldGMvZ3JpZC1zZWN1cml0eS9jZXJ0aWZp
Y2F0ZXMvfSBcCi0tZGF0YSBAJFdGU19QQVRIL3dmcy1nZXQtZmlsZS5qc29uIFwKLS1vdXRwdXQg
JEdFVF9GSUxFX1RNUCBcCi0td3JpdGUtb3V0ICIle2h0dHBfY29kZX1cbiIgXApodHRwczovL3dm
cy1wcm8uZHVuZS5oZXAuYWMudWsvYXBpL2FsbG9jYXRvci9nZXRfZmlsZSAyPi9kZXYvbnVsbGAK
CmlmIFsgIiRodHRwX2NvZGUiID0gMjAwIF0gOyB0aGVuCiBjYXQgJEdFVF9GSUxFX1RNUAogcmV0
Y29kZT0wCmVsaWYgWyAiJGh0dHBfY29kZSIgPSA0MDQgXSA7IHRoZW4gCiBlY2hvICJObyBmaWxl
cyBhdmFpbGFibGUgZnJvbSB0aGlzIHN0YWdlIiA+JjIKIHJldGNvZGU9MQplbHNlCiBlY2hvICJn
ZXRfZmlsZSByZWNlaXZlczoiID4mMgogY2F0ICRHRVRfRklMRV9UTVAgPiYyCiBlY2hvICJnZXQt
ZmlsZSBmYWlscyB3aXRoIEhUVFAgY29kZSAkaHR0cF9jb2RlIGZyb20gYWxsb2NhdG9yISIgPiYy
CiByZXRjb2RlPTMKZmkKCnJtIC1mICRHRVRfRklMRV9UTVAKZXhpdCAkcmV0Y29kZQo=
EOF
chmod +x $JUSTIN_PATH/justin-get-file

# Create the justin-allocated-files command
base64 -d <<EOF > $JUSTIN_PATH/justin-allocated-files
IyEvYmluL3NoCiMKIyBTY3JpcHQgZm9yIHVzZSB3aXRoaW4gYm9vdHN0cmFwIHNjcmlwdCB0byBn
ZXQgdGhlIERJRHMgb2YgYWxsIGZpbGVzIAojIGFsbG9jYXRlZCB0byB0aGlzIGpvYgojCiMgQm9v
dHN0cmFwIHNjcmlwdHMgY2FuIGV4ZWN1dGUgdGhpcyBzY3JpcHQgYXM6ICRXRlNfUEFUSC93ZnMt
YWxsb2NhdGVkLWZpbGVzCiMKIyBFcnJvciBtZXNzYWdlcyB0byBzdGRlcnIKIyBaZXJvIG9yIG1v
cmUgRElEcyB0byBzdGRvdXQsIG9uZSBwZXIgbGluZQojCiMgVGhpcyBzY3JpcHQgbXVzdCBiZSBj
b252ZXJ0ZWQgdG8gYmFzZTY0IHdpdGggc29tZXRoaW5nIGxpa2UgdGhlIGZvbGxvd2luZyAKIyBh
bmQgaW5jbHVkZWQgaW4gdGhlIGhlcmUgZG9jdW1lbnQgbmVhciB0aGUgc3RhcnQgb2Ygd2ZzLWdl
bmVyaWMtam9iIDoKIwojIChtYWNPUykgYmFzZTY0IC1iIDc2IHdmcy1hbGxvY2F0ZWQtZmlsZXMg
PiB3ZnMtYWxsb2NhdGVkLWZpbGVzLmI2NAojIChMaW51eCkgYmFzZTY0ICAgICAgIHdmcy1hbGxv
Y2F0ZWQtZmlsZXMgPiB3ZnMtYWxsb2NhdGVkLWZpbGVzLmI2NAoKaWYgWyAhIC1yICIkV0ZTX1BB
VEgvd2ZzLWFsbG9jYXRlZC1maWxlcy5qc29uIiBdIDsgdGhlbgogIGVjaG8gIiRXRlNfUEFUSC93
ZnMtYWxsb2NhdGVkLWZpbGVzLmpzb24gbm90IGZvdW5kISIgPiYyCiAgZXhpdCAyCmZpCgpBTExP
Q0FURURfRklMRVNfVE1QPWBta3RlbXAgL3RtcC93ZnNfYWxsb2NhdGVkX2ZpbGVzX1hYWFhYWGAK
Cmh0dHBfY29kZT1gY3VybCBcCi0tdXNlci1hZ2VudCAnd2ZzLWFsbG9jYXRlZC1maWxlcycgXAot
LXNpbGVudCBcCi0taGVhZGVyICJYLUpvYmlkOiAkSk9CU1VCSk9CSUQiIFwKLS1oZWFkZXIgIkFj
Y2VwdDogdGV4dC9wbGFpbiIgXAotLWNhcGF0aCAke1g1MDlfQ0VSVElGSUNBVEVTOi0vZXRjL2dy
aWQtc2VjdXJpdHkvY2VydGlmaWNhdGVzL30gXAotLWRhdGEgQCRXRlNfUEFUSC93ZnMtYWxsb2Nh
dGVkLWZpbGVzLmpzb24gXAotLW91dHB1dCAkQUxMT0NBVEVEX0ZJTEVTX1RNUCBcCi0td3JpdGUt
b3V0ICIle2h0dHBfY29kZX1cbiIgXApodHRwczovL3dmcy1wcm8uZHVuZS5oZXAuYWMudWsvYXBp
L2FsbG9jYXRvci9nZXRfYWxsb2NhdGVkX2ZpbGVzIDI+L2Rldi9udWxsYAoKaWYgWyAiJGh0dHBf
Y29kZSIgPSAyMDAgXSA7IHRoZW4KIGNhdCAkQUxMT0NBVEVEX0ZJTEVTX1RNUAogcmV0Y29kZT0w
CmVsc2UKIGVjaG8gIndmcy1hbGxvY2F0ZWQtZmlsZXMgcmVjZWl2ZXM6IiA+JjIKIGNhdCAkQUxM
T0NBVEVEX0ZJTEVTX1RNUCA+JjIKIGVjaG8gPiYyCiBlY2hvICJ3ZnMtYWxsb2NhdGVkLWZpbGVz
IGZhaWxzIHdpdGggSFRUUCBjb2RlICRodHRwX2NvZGUhIiA+JjIKIHJldGNvZGU9MQpmaQoKcm0g
LWYgJEFMTE9DQVRFRF9GSUxFU19UTVAKZXhpdCAkcmV0Y29kZQo=
EOF
chmod +x $JUSTIN_PATH/justin-allocated-files

# Create the justin-metadata command
base64 -d <<EOF > $JUSTIN_PATH/justin-metadata
IyEvdXNyL2Jpbi9lbnYgcHl0aG9uMwojCiMgQ2hlY2sgYW55IG1ldGFkYXRhIEpTT04gZnJvbSBi
b290c3RyYXAgc2NyaXB0IGZvciBhIGdpdmVuIGZpbGUgYW5kIGFkZAojwqBXRlMgbWV0YWRhdGEg
dG8gaXQuIFRoZSBvdXRwdXQgZmlsZSBhbmQgaXRzIEpTT04gZmlsZSB3aWxsIGJlIGxvb2tlZCBm
b3IgaW4gCiMgdGhlIHdvcmtzcGFjZSBzdWJkaXJlY3RvcnkuCiMKIyBUaGlzIHNjcmlwdCBtdXN0
IGJlIGNvbnZlcnRlZCB0byBiYXNlNjQgd2l0aCBzb21ldGhpbmcgbGlrZSB0aGUgZm9sbG93aW5n
IAojIGFuZCBpbmNsdWRlZCBpbiB0aGUgaGVyZSBkb2N1bWVudCBuZWFyIHRoZSBzdGFydCBvZiB3
ZnMtZ2VuZXJpYy1qb2IgOgojCiMgKG1hY09TKSBiYXNlNjQgLWIgNzYgd2ZzLW1ldGFkYXRhID4g
d2ZzLW1ldGFkYXRhLmI2NAojIChMaW51eCkgYmFzZTY0ICAgICAgIHdmcy1tZXRhZGF0YSA+IHdm
cy1tZXRhZGF0YS5iNjQKCmltcG9ydCBvcwppbXBvcnQgc3lzCmltcG9ydCBqc29uCgp0cnk6CiAg
ZmlsZVNjb3BlID0gc3lzLmFyZ3ZbMV0KICBmaWxlTmFtZSAgPSBzeXMuYXJndlsyXQpleGNlcHQ6
CiAgcHJpbnQoIndmcy1tZXRhZGF0YSBTQ09QRSBOQU1FIiwgZmlsZT1zeXMuc3RkZXJyKQogIHN5
cy5leGl0KDEpCiAgICAKdHJ5OgogIG1ldGFkYXRhID0ganNvbi5sb2FkKG9wZW4oJ3dvcmtzcGFj
ZS8nICsgZmlsZU5hbWUgKyAnLmpzb24nLCAncicpKQpleGNlcHQgRmlsZU5vdEZvdW5kRXJyb3I6
CiAgbWV0YWRhdGEgPSB7ICJtZXRhZGF0YSIgOiB7fSB9CmV4Y2VwdCBFeGNlcHRpb24gYXMgZToK
ICBwcmludCgiRmlsZSB3b3Jrc3BhY2UvJXMuanNvbiBleGlzdHMgYnV0IEpTT04gbG9hZCBmYWls
czogJXMiICUgCiAgICAgICAgKGZpbGVOYW1lLCBzdHIoZSkpKQoKbWV0YWRhdGFbJ3NpemUnXSAg
ICAgID0gb3MucGF0aC5nZXRzaXplKCd3b3Jrc3BhY2UvJyArIGZpbGVOYW1lKQptZXRhZGF0YVsn
bmFtZXNwYWNlJ10gPSBmaWxlU2NvcGUKbWV0YWRhdGFbJ25hbWUnXSAgICAgID0gZmlsZU5hbWUK
bWV0YWRhdGFbJ21ldGFkYXRhJ11bJ0RVTkUud29ya2Zsb3cnXSA9IHt9CgptZXRhZGF0YVsnbWV0
YWRhdGEnXVsnRFVORS53b3JrZmxvdyddWydzaXRlX25hbWUnXSBcCiA9IG9zLmVudmlyb25bJ1dG
U19TSVRFX05BTUUnXQptZXRhZGF0YVsnbWV0YWRhdGEnXVsnRFVORS53b3JrZmxvdyddWydyZXF1
ZXN0X2lkJ10gXAogPSBpbnQob3MuZW52aXJvblsnV0ZTX1JFUVVFU1RfSUQnXSkKbWV0YWRhdGFb
J21ldGFkYXRhJ11bJ0RVTkUud29ya2Zsb3cnXVsnc3RhZ2VfaWQnXSBcCiA9IGludChvcy5lbnZp
cm9uWydXRlNfU1RBR0VfSUQnXSkKbWV0YWRhdGFbJ21ldGFkYXRhJ11bJ0RVTkUud29ya2Zsb3cn
XVsnaG9zdG5hbWUnXSBcCiA9IG9zLmVudmlyb25bJ1dGU19IT1NUTkFNRSddCm1ldGFkYXRhWydt
ZXRhZGF0YSddWydEVU5FLndvcmtmbG93J11bJ3NjcmlwdF9zdGFydCddIFwKID0gb3MuZW52aXJv
blsnV0ZTX0JPT1RTVFJBUF9TQ1JJUFRfU1RBUlQnXQptZXRhZGF0YVsnbWV0YWRhdGEnXVsnRFVO
RS53b3JrZmxvdyddWydzY3JpcHRfZmluaXNoJ10gXAogPSBvcy5lbnZpcm9uWydXRlNfQk9PVFNU
UkFQX1NDUklQVF9GSU5JU0gnXQptZXRhZGF0YVsnbWV0YWRhdGEnXVsnRFVORS53b3JrZmxvdydd
WydjcHVpbmZvJ10gXAogPSBvcy5lbnZpcm9uWydXRlNfQ1BVSU5GTyddCm1ldGFkYXRhWydtZXRh
ZGF0YSddWydEVU5FLndvcmtmbG93J11bJ29zX3JlbGVhc2UnXSBcCiA9IG9zLmVudmlyb25bJ1dG
U19PU19SRUxFQVNFJ10KbWV0YWRhdGFbJ21ldGFkYXRhJ11bJ0RVTkUud29ya2Zsb3cnXVsnam9i
X2lkJ10gXAogPSBvcy5lbnZpcm9uWydKT0JTVUJKT0JJRCddCgpwcmludChqc29uLmR1bXBzKG1l
dGFkYXRhLCBpbmRlbnQgPSA0LCBzb3J0X2tleXMgPSBUcnVlKSkK
EOF
chmod +x $JUSTIN_PATH/justin-metadata

# Assemble values to record
export JUSTIN_CPUINFO=`grep '^model name' /proc/cpuinfo | head -1 | cut -c14-`
export JUSTIN_OS_RELEASE=`head -1 /etc/redhat-release`
export JUSTIN_HOSTNAME=${HOSTNAME:-`hostname`}
export site_name=${GLIDEIN_DUNESite:-XX_UNKNOWN}
if [ "$site_name" = "XX_UNKNOWN" -a "$GLIDEIN_Site" = "FNAL" ] ; then
  export site_name=US_FNAL
fi
if [ "$site_name" = "XX_UNKNOWN" -a "$GLIDEIN_Site" = "FermiGrid" ] ; then
  export site_name=US_FNAL
fi
if [ "$site_name" = "US_FermiGrid" ] ; then
  export site_name=US_FNAL
fi

export processors=`grep '^RequestCpus = ' $_CONDOR_JOB_AD | cut -d' ' -f3`
export rss_mb=`grep '^RequestMemory = ' $_CONDOR_JOB_AD | cut -d' ' -f3`
export rss_bytes=`expr $rss_mb \* 1048576`
export wall_seconds=`grep '^GLIDEIN_Max_Walltime = ' $_CONDOR_MACHINE_AD | cut -d' ' -f3`

export X509_CERTIFICATES=${X509_CERTIFICATES:-/etc/grid-security/certificates/}

# Check requirements are present

if [ ! -r "$X509_USER_PROXY" ] ; then
 # Stop if proxy file is missing or deleted
 log_line "Cannot read X509_USER_PROXY file = $X509_USER_PROXY"
 exit 0
fi

curl --version
if [ $? -ne 0 ] ; then
 log_line Failed running curl
 exit 0
fi

cat <<EOF >justin-send-heartbeat.json
{
  "method"       : "send_heartbeat",
  "jobsub_id"    : "$JOBSUBJOBID"
}
EOF

(
# Subprocess to send regular heartbeats

while :
do
  # Stop if JSON file is missing or deleted
  if [ ! -r justin-send-heartbeat.json ] ; then
    exit 0
  fi

  curl \
     --user-agent 'justin-generic-job' \
     --header "X-Jobid: $JOBSUBJOBID" \
     --key $X509_USER_PROXY \
     --cert $X509_USER_PROXY \
     --cacert $X509_USER_PROXY \
     --capath $X509_CERTIFICATES \
     --data @justin-send-heartbeat.json \
     https://justin-allocator-pro.dune.hep.ac.uk/api/allocator/send_heartbeat

  sleep 600
done

) >justin-heartbeat.log 2>&1 &

# Create the JSON to send to the allocator
cat <<EOF >justin-get-stage.json
{
  "method"       : "get_stage",
  "jobsub_id"    : "$JOBSUBJOBID",
  "site_name"    : "${site_name:-XX-UNKNOWN}",
  "cpuinfo"      : "${JUSTIN_CPUINFO:-Unknown}",
  "os_release"   : "${JUSTIN_OS_RELEASE:-Unknown}",
  "hostname"     : "${JUSTIN_HOSTNAME:-unknown}",
  "rss_bytes"    : ${rss_bytes:-0},
  "processors"   : ${processors:-0},
  "wall_seconds" : ${wall_seconds:-0},
  "site_job_id"  : "${JOB_GLIDEIN_SiteWMS_JobId:-unknown}"
}
EOF

echo '====start justin-get-stage.json===='
cat justin-get-stage.json
echo '====end justin-get-stage.json===='

for i in 1 2 3 4 5 
do

# Sleep for up to 60 seconds to spread out job start storms
sleep `expr $RANDOM / 512`

# Make the call to the Workflow Allocator
http_code=`curl \
--retry 0 \
--user-agent 'justin-generic-job' \
--header "X-Jobid: $JOBSUBJOBID" \
--key $X509_USER_PROXY \
--cert $X509_USER_PROXY \
--cacert $X509_USER_PROXY \
--capath $X509_CERTIFICATES \
--data @justin-get-stage.json \
--output justin-files.tar \
--write-out "%{http_code}\n" \
https://justin-allocator-pro.dune.hep.ac.uk/api/allocator/get_stage`

log_line "($i/5) curl returns HTTP code $http_code"

if [ "$http_code" != "503" ] ; then
 break
fi
done

if [ "$http_code" != "200" ] ; then
  log_line "curl call to WFA to get stage fails with code $http_code"
  cat justin-files.tar
  echo
  exit 0
fi

tar xvf justin-files.tar

if [ -r justin-env.sh ] ; then
  . ./justin-env.sh
fi

echo '====Start justin-output-patterns.txt===='
cat justin-output-patterns.txt
echo '====End justin-output-patterns.txt===='

echo '====Start justin-env.sh===='
cat justin-env.sh
echo '====End justin-env.sh===='

echo '====Start justin-bootstrap-env.sh===='
cat justin-bootstrap-env.sh
echo '====End justin-bootstrap-env.sh===='

echo '====Start justin-get-file.json===='
cat justin-get-file.json
echo '====End justin-get-file.json===='

# Run the bootstrap script
if [ -f justin-bootstrap.sh ] ; then
  chmod +x justin-bootstrap.sh

  echo '====Start justin-bootstrap.sh===='
  cat justin-bootstrap.sh
  echo '====End justin-bootstrap.sh===='

  mkdir workspace
  echo '====Run justin-bootstrap.sh===='
  export JUSTIN_BOOTSTRAP_SCRIPT_START=`date --iso-8601=seconds --utc`
  ( . ./justin-bootstrap-env.sh
    cd workspace
    stdbuf -oL -eL $JUSTIN_PATH/justin-bootstrap.sh ) \
      > workspace/justin-bootstrap.log 2>&1
  export BOOTSTRAP_EXIT=$?
  export JUSTIN_BOOTSTRAP_SCRIPT_FINISH=`date --iso-8601=seconds --utc`
  echo '====After justin-bootstrap.sh===='
else
  # How can this happen???
  log_line No justin-bootstrap.sh found
  exit 0
fi

echo '#### justin-bootstrap.log'
cat workspace/justin-bootstrap.log
echo '####'

#if [ "$retval" != 0 ] ; then
#  job_aborted 0 900 "Bootstrap script error $BOOTSTRAP_EXIT"
#fi

# Make the lists of output files and files for the next stage
echo -n > justin-outputs.txt
echo -n > justin-output-dids.txt
echo -n > justin-next-stage-dids.txt

echo '### Contents of workspace directory ###'
ls -lR workspace
echo '###'

cat justin-output-patterns.txt | (
while read lifetime for_next_stage dataset scope pattern
do  
  (
    cd workspace
    # $pattern is wildcard-expanded here - so a list of files
    for fn in $pattern
    do
      if [ -r "$fn" ] ; then
        # justin-outputs.txt gets DATASET SCOPE FILENAME on each line
        echo "$lifetime $dataset $scope $fn" >> $JUSTIN_PATH/justin-outputs.txt

        if [ "$for_next_stage" = "True" ] ; then
          # justin-next-stage-dids gets a list of DIDs
          echo "$scope:$fn" >> $JUSTIN_PATH/justin-next-stage-dids.txt
        else
          # justin-output-dids.txt gets DID = SCOPE:FILENAME
          echo "$scope:$fn" >> $JUSTIN_PATH/justin-output-dids.txt
        fi
      fi
    done
  )
done
)

echo '#### justin-outputs.txt'
cat $JUSTIN_PATH/justin-outputs.txt
echo '####'
echo
echo '#### justin-output-dids.txt'
cat $JUSTIN_PATH/justin-output-dids.txt
echo '####'
echo
echo '#### justin-next-stage-dids.txt'
cat $JUSTIN_PATH/justin-next-stage-dids.txt
echo '####'
echo
echo '#### justin-output-rse-list.txt'
cat $JUSTIN_PATH/justin-output-rse-list.txt
echo '####'

output_dids=`echo \`sed 's/.*/"&"/' justin-output-dids.txt\`|sed 's/ /,/g'`

next_stage_dids=`echo \`sed 's/.*/"&"/' justin-next-stage-dids.txt\`|sed 's/ /,/g'`

# justin-bootstrap.sh should produce lists of successfully processed input files
if [ -f workspace/justin-processed-dids.txt ] ; then
  processed_dids=`echo \`sed -r 's/.+/"&"/' workspace/justin-processed-dids.txt\`|sed 's/ /,/g'`
fi

if [ -f workspace/justin-processed-pfns.txt ] ; then
  processed_pfns=`echo \`sed -r 's/.+/"&"/' workspace/justin-processed-pfns.txt\`|sed 's/ /,/g'`
fi

tail -c 10000 workspace/justin-bootstrap.log | base64 --wrap=0 > justin-bootstrap.log.b64

cat <<EOF >justin-record-results.json
{
  "method": "record_results",
  "jobsub_id": "$JOBSUBJOBID",
  "processed_dids": [$processed_dids],
  "processed_pfns": [$processed_pfns],
  "output_dids": [$output_dids],
  "next_stage_dids": [$next_stage_dids],
  "bootstrap_log": "`cat justin-bootstrap.log.b64`",
  "bootstrap_exit": $BOOTSTRAP_EXIT
}
EOF

echo "=====Start justin-record-results.json=="
cat justin-record-results.json
echo "=====End justin-record-results.json=="

http_code=`curl \
--retry 5 \
--retry-max-time 300 \
--max-time 600 \
--user-agent 'justin-generic-job' \
--key $X509_USER_PROXY \
--cert $X509_USER_PROXY \
--cacert $X509_USER_PROXY \
--header "X-Jobid: $JOBSUBJOBID" \
--capath $X509_CERTIFICATES \
--data @justin-record-results.json \
--output record-results.log \
--write-out "%{http_code}\n" \
https://justin-allocator-pro.dune.hep.ac.uk/api/allocator/record_results`

log_line "record_results returns HTTP code $http_code"
echo "=====Start record-results.log=="
touch record-results.log
cat record-results.log
echo "=====End record-results.log=="

if [ "$http_code" != 200 ] ; then
  job_aborted 0 $http_code record_results
fi

if [ "$BOOTSTRAP_EXIT" != 0 ; then
  job_aborted 0 900 bootstrap exit $BOOTSTRAP_EXIT
fi

# Just try the first RSE for now; eventually will do failovers on errors
export OUTPUT_RSE=`head -1 justin-output-rse-list.txt | cut -f1 -d' '`
export OUTPUT_PROTOCOL=`head -1 justin-output-rse-list.txt | cut -f2 -d' '`
log_line "Using $OUTPUT_RSE for output"

cat $JUSTIN_PATH/justin-outputs.txt | (

cat <<EOF >$JUSTIN_PATH/rucio.cfg
[client]
rucio_host = https://dune-rucio.fnal.gov
auth_host = https://auth-dune-rucio.fnal.gov
account = dunepro
auth_type = x509_proxy
request_retries = 3
EOF

echo '====Start rucio.cfg===='
cat $JUSTIN_PATH/rucio.cfg
echo '====End rucio.cfg===='

source /cvmfs/dune.opensciencegrid.org/products/dune/setup_dune.sh
setup rucio
setup metacat

export METACAT_AUTH_SERVER_URL=https://metacat.fnal.gov:8143/auth/dune
export METACAT_SERVER_URL=https://metacat.fnal.gov:9443/dune_meta_demo/app

rucio --config $JUSTIN_PATH/rucio.cfg --version
if [ $? != 0 ] ; then
  job_aborted 1 900 'Rucio test fails'
fi

metacat auth login -m x509 dunepro
metacat auth whoami
if [ $? != 0 ] ; then
  job_aborted 1 900 'MetaCat whoami fails'
fi

touch justin-output-dids-rses.txt

while read lifetime dataset scope fn
do
  $JUSTIN_PATH/justin-metadata "$scope" "$fn" > tmp.json
  echo "==== Start MetaCat JSON for $fn ===="
  cat tmp.json
  echo "==== End MetaCat JSON for $fn ===="

  log_line "Try to declare file in MetaCat (1/3)"
  metacat file declare --json tmp.json "$dataset"
  metacat_return_code=$?
  if [ $metacat_return_code != 0 ] ; then
    sleep 1
    log_line "Retry declare file in MetaCat (2/3)"
    metacat file declare --json tmp.json "$dataset"
    metacat_return_code=$?
    if [ $metacat_return_code != 0 ] ; then
      sleep 1
      log_line "Last chance to declare file in MetaCat (3/3)"
      metacat file declare --json tmp.json "$dataset"
      metacat_return_code=$?
    fi
  fi

  if [ $metacat_return_code = 0 ] ; then
    if [ "$lifetime" -gt 0 ] ; then
      lifetime_option="--lifetime $lifetime"
    fi
    log_line "Upload $scope:$fn to $OUTPUT_RSE/$OUTPUT_PROTOCOL"
    rucio --config $JUSTIN_PATH/rucio.cfg --verbose \
          upload \
          $lifetime_option \
          --rse "$OUTPUT_RSE" \
          --transfer-timeout 1200 \
          --protocol "$OUTPUT_PROTOCOL" \
          --scope "$scope" --name "$fn" "workspace/$fn"

    if [ $? = 0 ] ; then
      log_line "Add $scope:$fn to $dataset"
      rucio --config $JUSTIN_PATH/rucio.cfg \
            --verbose attach "$dataset" "$scope:$fn"
      if [ $? != 0 ] ; then
        log_line "rucio attach fails"
        job_aborted 1 900 "rucio attach error"
      fi
      echo "\"$scope:$fn\":\"$OUTPUT_RSE\"" >> justin-output-dids-rses.txt
    else
      log_line "rucio upload fails"
      job_aborted 1 900 "rucio upload error" "$OUTPUT_RSE"
    fi
  else
    log_line "metacat file declaration fails"
    job_aborted 1 900 "metacat file declare error"
  fi 
done

)
if [ $? != 0 ] ; then
  # Exit/aborts inside subshell just exit the subshell with a non-zero code
  # So we exit the generic job script properly here
  exit 0
fi

# If all ok, then confirm that to the Workflow Allocator

cat <<EOF >justin-confirm-results.json
{
  "method": "confirm_results",
  "jobsub_id": "$JOBSUBJOBID",
  "output_dids": {
EOF

echo `cat justin-output-dids-rses.txt` | sed 's/ /,/g' >>justin-confirm-results.json

echo '} }' >>justin-confirm-results.json

echo "=====Start justin-confirm-results.json=="
cat justin-confirm-results.json
echo "=====End justin-confirm-results.json=="

http_code=`curl \
--retry 5 \
--retry-max-time 300 \
--max-time 600 \
--user-agent 'justin-generic-job' \
--header "X-Jobid: $JOBSUBJOBID" \
--key $X509_USER_PROXY \
--cert $X509_USER_PROXY \
--cacert $X509_USER_PROXY \
--capath $X509_CERTIFICATES \
--data @justin-confirm-results.json \
--output confirm-results.log \
--write-out "%{http_code}\n" \
https://justin-allocator-pro.dune.hep.ac.uk/api/allocator/confirm_results`

log_line "confirm_results returns HTTP code $http_code"
echo "=====Start confirm-results.log=="
touch confirm-results.log
cat confirm-results.log
echo "=====End confirm-results.log=="

if [ "$http_code" != 200 ] ; then
  job_aborted 0 $http_code confirm_results
fi

log_line '====End of justin-generic-job===='
exit 0

