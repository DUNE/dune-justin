#!/bin/bash
#
# Generic Job which will get a stage's jobscript from the
# justIN allocator service
#

# Everything goes to stdout
exec 2>&1

function log_line() {
echo `date -u +'%Y-%m-%d %H:%M:%S '`$1
}

log_line '====Start of justin-generic-job===='

function job_aborted() {

  cat <<EOF >justin-job-aborted.json
{
  "method"         : "job_aborted",
  "jobsub_id"      : "$JOBSUBJOBID",
  "http_code"      :  $2,
  "aborted_method" : "$3",
  "rse_name"       : "$4"
}
EOF

  curl \
     --user-agent 'justin-generic-job' \
     --header "X-Jobid: $JOBSUBJOBID" \
     --key $X509_USER_PROXY \
     --cert $X509_USER_PROXY \
     --cacert $X509_USER_PROXY \
     --capath $X509_CERTIFICATES \
     --data @justin-job-aborted.json \
     https://justin-allocator-pro.dune.hep.ac.uk/api/allocator/job_aborted_$2

  # If in a subshell, this just exits that, not the job, so must be caught
  # The 1st argument lets the caller choose the exit code on errors
  exit $1
}

#echo '### date ; pwd ; printenv'
#date
#pwd
#printenv
#echo "### $_CONDOR_JOB_AD"
#cat $_CONDOR_JOB_AD

echo '### Start of  printenv | sort'
printenv | sort
echo '### End of printenv'

echo 'Before GFAL unsets, do  printenv | grep GFAL'
printenv | grep GFAL
unset GFAL_CONFIG_DIR GFAL_PLUGIN_DIR

echo '### pwd ; ls -lt ###'
pwd
ls -lt
echo '##############'

# Used by user's jobscript to find files from this generic job
export JUSTIN_PATH=`pwd`

# Create the justin-get-file command
base64 -d <<EOF > $JUSTIN_PATH/justin-get-file
IyEvYmluL3NoCiMKIyBTY3JpcHQgZm9yIHVzZSB3aXRoaW4gam9ic2NyaXB0IHRvIGdldCB0aGUg
RElELCBQRk4sIGFuZCBSU0UKIyBvZiBhIGZpbGUgdG8gcHJvY2VzcyB3aXRoaW4gdGhlIHN0YWdl
IGFzc2lnbmVkIHRvIHRoZSBqb2IuCiMKIyBKb2JzY3JpcHRzIGNhbiBleGVjdXRlIHRoaXMgc2Ny
aXB0IGFzOiAkSlVTVElOX1BBVEgvanVzdGluLWdldC1maWxlCiMKIyBFcnJvciBtZXNzYWdlcyB0
byBzdGRlcnIKIyBESUQgUEZOIFJTRSB0byBzdGRvdXQgb24gb25lIGxpbmUgaWYgYSBmaWxlIGlz
IGF2YWlsYWJsZQojCiMgVGhpcyBzY3JpcHQgbXVzdCBiZSBjb252ZXJ0ZWQgdG8gYmFzZTY0IHdp
dGggc29tZXRoaW5nIGxpa2UgdGhlIGZvbGxvd2luZyAKIyBhbmQgaW5jbHVkZWQgaW4gdGhlIGhl
cmUgZG9jdW1lbnQgbmVhciB0aGUgc3RhcnQgb2YganVzdGluLWdlbmVyaWMtam9iIDoKIwojICht
YWNPUykgYmFzZTY0IC1iIDc2IGp1c3Rpbi1nZXQtZmlsZSA+IGp1c3Rpbi1nZXQtZmlsZS5iNjQK
IyAoTGludXgpIGJhc2U2NCAgICAgICBqdXN0aW4tZ2V0LWZpbGUgPiBqdXN0aW4tZ2V0LWZpbGUu
YjY0CgppZiBbICEgLXIgIiRKVVNUSU5fUEFUSC9qdXN0aW4tZ2V0LWZpbGUuanNvbiIgXSA7IHRo
ZW4KICBlY2hvICIkSlVTVElOX1BBVEgvanVzdGluLWdldC1maWxlLmpzb24gbm90IGZvdW5kISIg
PiYyCiAgZXhpdCAyCmZpCgpHRVRfRklMRV9UTVA9YG1rdGVtcCAvdG1wL2p1c3Rpbl9nZXRfZmls
ZV9YWFhYWFhgCgpodHRwX2NvZGU9YGN1cmwgXAotLXVzZXItYWdlbnQgJ2p1c3Rpbi1nZXQtZmls
ZScgXAotLXNpbGVudCBcCi0taGVhZGVyICJYLUpvYmlkOiAkSk9CU1VCSk9CSUQiIFwKLS1oZWFk
ZXIgIkFjY2VwdDogdGV4dC9wbGFpbiIgXAotLWNhcGF0aCAke1g1MDlfQ0VSVElGSUNBVEVTOi0v
ZXRjL2dyaWQtc2VjdXJpdHkvY2VydGlmaWNhdGVzL30gXAotLWRhdGEgQCRKVVNUSU5fUEFUSC9q
dXN0aW4tZ2V0LWZpbGUuanNvbiBcCi0tb3V0cHV0ICRHRVRfRklMRV9UTVAgXAotLXdyaXRlLW91
dCAiJXtodHRwX2NvZGV9XG4iIFwKaHR0cHM6Ly9qdXN0aW4tYWxsb2NhdG9yLXByby5kdW5lLmhl
cC5hYy51ay9hcGkvYWxsb2NhdG9yL2dldF9maWxlIDI+L2Rldi9udWxsYAoKaWYgWyAiJGh0dHBf
Y29kZSIgPSAyMDAgXSA7IHRoZW4KIGNhdCAkR0VUX0ZJTEVfVE1QCiByZXRjb2RlPTAKZWxpZiBb
ICIkaHR0cF9jb2RlIiA9IDQwNCBdIDsgdGhlbiAKIGVjaG8gIk5vIGZpbGVzIGF2YWlsYWJsZSBm
cm9tIHRoaXMgc3RhZ2UiID4mMgogcmV0Y29kZT0xCmVsc2UKIGVjaG8gImdldF9maWxlIHJlY2Vp
dmVzOiIgPiYyCiBjYXQgJEdFVF9GSUxFX1RNUCA+JjIKIGVjaG8gImdldC1maWxlIGZhaWxzIHdp
dGggSFRUUCBjb2RlICRodHRwX2NvZGUgZnJvbSBhbGxvY2F0b3IhIiA+JjIKIHJldGNvZGU9Mwpm
aQoKcm0gLWYgJEdFVF9GSUxFX1RNUApleGl0ICRyZXRjb2RlCg==
EOF
chmod +x $JUSTIN_PATH/justin-get-file

# Create the justin-allocated-files command
base64 -d <<EOF > $JUSTIN_PATH/justin-allocated-files
IyEvYmluL3NoCiMKIyBTY3JpcHQgZm9yIHVzZSB3aXRoaW4gdXNlcidzIGpvYnNjcmlwdCB0byBn
ZXQgdGhlIERJRHMgb2YgYWxsIGZpbGVzIAojIGFsbG9jYXRlZCB0byB0aGlzIGpvYgojCiMgSm9i
c2NyaXB0cyBjYW4gZXhlY3V0ZSB0aGlzIHNjcmlwdCBhczogJEpVU1RJTl9QQVRIL2p1c3Rpbi1h
bGxvY2F0ZWQtZmlsZXMKIwojIEVycm9yIG1lc3NhZ2VzIHRvIHN0ZGVycgojIFplcm8gb3IgbW9y
ZSBESURzIHRvIHN0ZG91dCwgb25lIHBlciBsaW5lCiMKIyBUaGlzIHNjcmlwdCBtdXN0IGJlIGNv
bnZlcnRlZCB0byBiYXNlNjQgd2l0aCBzb21ldGhpbmcgbGlrZSB0aGUgZm9sbG93aW5nIAojIGFu
ZCBpbmNsdWRlZCBpbiB0aGUgaGVyZSBkb2N1bWVudCBuZWFyIHRoZSBzdGFydCBvZiBqdXN0aW4t
Z2VuZXJpYy1qb2IgOgojCiMgKG1hY09TKSBiYXNlNjQgLWIgNzYganVzdGluLWFsbG9jYXRlZC1m
aWxlcyA+IGp1c3Rpbi1hbGxvY2F0ZWQtZmlsZXMuYjY0CiMgKExpbnV4KSBiYXNlNjQgICAgICAg
anVzdGluLWFsbG9jYXRlZC1maWxlcyA+IGp1c3Rpbi1hbGxvY2F0ZWQtZmlsZXMuYjY0CgppZiBb
ICEgLXIgIiRKVVNUSU5fUEFUSC9qdXN0aW4tYWxsb2NhdGVkLWZpbGVzLmpzb24iIF0gOyB0aGVu
CiAgZWNobyAiJEpVU1RJTl9QQVRIL2p1c3Rpbi1hbGxvY2F0ZWQtZmlsZXMuanNvbiBub3QgZm91
bmQhIiA+JjIKICBleGl0IDIKZmkKCkFMTE9DQVRFRF9GSUxFU19UTVA9YG1rdGVtcCAvdG1wL2p1
c3Rpbl9hbGxvY2F0ZWRfZmlsZXNfWFhYWFhYYAoKaHR0cF9jb2RlPWBjdXJsIFwKLS11c2VyLWFn
ZW50ICdqdXN0aW4tYWxsb2NhdGVkLWZpbGVzJyBcCi0tc2lsZW50IFwKLS1oZWFkZXIgIlgtSm9i
aWQ6ICRKT0JTVUJKT0JJRCIgXAotLWhlYWRlciAiQWNjZXB0OiB0ZXh0L3BsYWluIiBcCi0tY2Fw
YXRoICR7WDUwOV9DRVJUSUZJQ0FURVM6LS9ldGMvZ3JpZC1zZWN1cml0eS9jZXJ0aWZpY2F0ZXMv
fSBcCi0tZGF0YSBAJEpVU1RJTl9QQVRIL2p1c3Rpbi1hbGxvY2F0ZWQtZmlsZXMuanNvbiBcCi0t
b3V0cHV0ICRBTExPQ0FURURfRklMRVNfVE1QIFwKLS13cml0ZS1vdXQgIiV7aHR0cF9jb2RlfVxu
IiBcCmh0dHBzOi8vanVzdGluLWFsbG9jYXRvci1wcm8uZHVuZS5oZXAuYWMudWsvYXBpL2FsbG9j
YXRvci9nZXRfYWxsb2NhdGVkX2ZpbGVzIDI+L2Rldi9udWxsYAoKaWYgWyAiJGh0dHBfY29kZSIg
PSAyMDAgXSA7IHRoZW4KIGNhdCAkQUxMT0NBVEVEX0ZJTEVTX1RNUAogcmV0Y29kZT0wCmVsc2UK
IGVjaG8gImp1c3Rpbi1hbGxvY2F0ZWQtZmlsZXMgcmVjZWl2ZXM6IiA+JjIKIGNhdCAkQUxMT0NB
VEVEX0ZJTEVTX1RNUCA+JjIKIGVjaG8gPiYyCiBlY2hvICJqdXN0aW4tYWxsb2NhdGVkLWZpbGVz
IGZhaWxzIHdpdGggSFRUUCBjb2RlICRodHRwX2NvZGUhIiA+JjIKIHJldGNvZGU9MQpmaQoKcm0g
LWYgJEFMTE9DQVRFRF9GSUxFU19UTVAKZXhpdCAkcmV0Y29kZQo=
EOF
chmod +x $JUSTIN_PATH/justin-allocated-files

# Create the justin-metadata command
base64 -d <<EOF > $JUSTIN_PATH/justin-metadata
IyEvdXNyL2Jpbi9lbnYgcHl0aG9uMwojCiMgQ2hlY2sgYW55IG1ldGFkYXRhIEpTT04gZnJvbSBq
b2JzY3JpcHQgZm9yIGEgZ2l2ZW4gZmlsZSBhbmQgYWRkCiPCoHdvcmtmbG93IG1ldGFkYXRhIHRv
IGl0LiBUaGUgb3V0cHV0IGZpbGUgYW5kIGl0cyBKU09OIGZpbGUgd2lsbCBiZSBsb29rZWQgZm9y
CiMgaW4gdGhlIHdvcmtzcGFjZSBzdWJkaXJlY3RvcnkuCiMKIyBUaGlzIHNjcmlwdCBtdXN0IGJl
IGNvbnZlcnRlZCB0byBiYXNlNjQgd2l0aCBzb21ldGhpbmcgbGlrZSB0aGUgZm9sbG93aW5nIAoj
IGFuZCBpbmNsdWRlZCBpbiB0aGUgaGVyZSBkb2N1bWVudCBuZWFyIHRoZSBzdGFydCBvZiBqdXN0
aW4tZ2VuZXJpYy1qb2IgOgojCiMgKG1hY09TKSBiYXNlNjQgLWIgNzYganVzdGluLW1ldGFkYXRh
ID4ganVzdGluLW1ldGFkYXRhLmI2NAojIChMaW51eCkgYmFzZTY0ICAgICAgIGp1c3Rpbi1tZXRh
ZGF0YSA+IGp1c3Rpbi1tZXRhZGF0YS5iNjQKCmltcG9ydCBvcwppbXBvcnQgc3lzCmltcG9ydCBq
c29uCgp0cnk6CiAgZmlsZVNjb3BlID0gc3lzLmFyZ3ZbMV0KICBmaWxlTmFtZSAgPSBzeXMuYXJn
dlsyXQpleGNlcHQ6CiAgcHJpbnQoImp1c3Rpbi1tZXRhZGF0YSBTQ09QRSBOQU1FIiwgZmlsZT1z
eXMuc3RkZXJyKQogIHN5cy5leGl0KDEpCiAgICAKdHJ5OgogIG1ldGFkYXRhID0ganNvbi5sb2Fk
KG9wZW4oJ3dvcmtzcGFjZS8nICsgZmlsZU5hbWUgKyAnLmpzb24nLCAncicpKQpleGNlcHQgRmls
ZU5vdEZvdW5kRXJyb3I6CiAgbWV0YWRhdGEgPSB7ICJtZXRhZGF0YSIgOiB7fSB9CmV4Y2VwdCBF
eGNlcHRpb24gYXMgZToKICBwcmludCgiRmlsZSB3b3Jrc3BhY2UvJXMuanNvbiBleGlzdHMgYnV0
IEpTT04gbG9hZCBmYWlsczogJXMiICUgCiAgICAgICAgKGZpbGVOYW1lLCBzdHIoZSkpKQoKbWV0
YWRhdGFbJ3NpemUnXSAgICAgID0gb3MucGF0aC5nZXRzaXplKCd3b3Jrc3BhY2UvJyArIGZpbGVO
YW1lKQptZXRhZGF0YVsnbmFtZXNwYWNlJ10gPSBmaWxlU2NvcGUKbWV0YWRhdGFbJ25hbWUnXSAg
ICAgID0gZmlsZU5hbWUKbWV0YWRhdGFbJ21ldGFkYXRhJ11bJ0RVTkUud29ya2Zsb3cnXSA9IHt9
CgptZXRhZGF0YVsnbWV0YWRhdGEnXVsnRFVORS53b3JrZmxvdyddWydzaXRlX25hbWUnXSBcCiA9
IG9zLmVudmlyb25bJ0pVU1RJTl9TSVRFX05BTUUnXQptZXRhZGF0YVsnbWV0YWRhdGEnXVsnRFVO
RS53b3JrZmxvdyddWydyZXF1ZXN0X2lkJ10gXAogPSBpbnQob3MuZW52aXJvblsnSlVTVElOX1JF
UVVFU1RfSUQnXSkKbWV0YWRhdGFbJ21ldGFkYXRhJ11bJ0RVTkUud29ya2Zsb3cnXVsnc3RhZ2Vf
aWQnXSBcCiA9IGludChvcy5lbnZpcm9uWydKVVNUSU5fU1RBR0VfSUQnXSkKbWV0YWRhdGFbJ21l
dGFkYXRhJ11bJ0RVTkUud29ya2Zsb3cnXVsnaG9zdG5hbWUnXSBcCiA9IG9zLmVudmlyb25bJ0pV
U1RJTl9IT1NUTkFNRSddCm1ldGFkYXRhWydtZXRhZGF0YSddWydEVU5FLndvcmtmbG93J11bJ2pv
YnNjcmlwdF9zdGFydCddIFwKID0gb3MuZW52aXJvblsnSlVTVElOX0pPQlNDUklQVF9TVEFSVCdd
Cm1ldGFkYXRhWydtZXRhZGF0YSddWydEVU5FLndvcmtmbG93J11bJ2pvYnNjcmlwdF9maW5pc2gn
XSBcCiA9IG9zLmVudmlyb25bJ0pVU1RJTl9KT0JTQ1JJUFRfRklOSVNIJ10KbWV0YWRhdGFbJ21l
dGFkYXRhJ11bJ0RVTkUud29ya2Zsb3cnXVsnY3B1aW5mbyddIFwKID0gb3MuZW52aXJvblsnSlVT
VElOX0NQVUlORk8nXQptZXRhZGF0YVsnbWV0YWRhdGEnXVsnRFVORS53b3JrZmxvdyddWydvc19y
ZWxlYXNlJ10gXAogPSBvcy5lbnZpcm9uWydKVVNUSU5fT1NfUkVMRUFTRSddCm1ldGFkYXRhWydt
ZXRhZGF0YSddWydEVU5FLndvcmtmbG93J11bJ2pvYl9pZCddIFwKID0gb3MuZW52aXJvblsnSk9C
U1VCSk9CSUQnXQoKcHJpbnQoanNvbi5kdW1wcyhtZXRhZGF0YSwgaW5kZW50ID0gNCwgc29ydF9r
ZXlzID0gVHJ1ZSkpCg==
EOF
chmod +x $JUSTIN_PATH/justin-metadata

# Assemble values to record
export JUSTIN_CPUINFO=`grep '^model name' /proc/cpuinfo | head -1 | cut -c14-`
export JUSTIN_OS_RELEASE=`head -1 /etc/redhat-release`
export JUSTIN_HOSTNAME=${HOSTNAME:-`hostname`}
export site_name=${GLIDEIN_DUNESite:-XX_UNKNOWN}
if [ "$site_name" = "XX_UNKNOWN" -a "$GLIDEIN_Site" = "FNAL" ] ; then
  export site_name=US_FNAL
fi
if [ "$site_name" = "XX_UNKNOWN" -a "$GLIDEIN_Site" = "FermiGrid" ] ; then
  export site_name=US_FNAL
fi
if [ "$site_name" = "US_FermiGrid" ] ; then
  export site_name=US_FNAL
fi

export processors=`grep '^RequestCpus = ' $_CONDOR_JOB_AD | cut -d' ' -f3`
export rss_mb=`grep '^RequestMemory = ' $_CONDOR_JOB_AD | cut -d' ' -f3`
export rss_bytes=`expr $rss_mb \* 1048576`
export wall_seconds=`grep '^GLIDEIN_Max_Walltime = ' $_CONDOR_MACHINE_AD | cut -d' ' -f3`

export X509_CERTIFICATES=${X509_CERTIFICATES:-/etc/grid-security/certificates/}

# Check requirements are present

if [ ! -r "$X509_USER_PROXY" ] ; then
 # Stop if proxy file is missing or deleted
 log_line "Cannot read X509_USER_PROXY file = $X509_USER_PROXY"
 exit 0
fi

curl --version
if [ $? -ne 0 ] ; then
 log_line Failed running curl
 exit 0
fi

cat <<EOF >justin-send-heartbeat.json
{
  "method"       : "send_heartbeat",
  "jobsub_id"    : "$JOBSUBJOBID"
}
EOF

(
# Subprocess to send regular heartbeats

while :
do
  # Stop if JSON file is missing or deleted
  if [ ! -r justin-send-heartbeat.json ] ; then
    exit 0
  fi

  curl \
     --user-agent 'justin-generic-job' \
     --header "X-Jobid: $JOBSUBJOBID" \
     --key $X509_USER_PROXY \
     --cert $X509_USER_PROXY \
     --cacert $X509_USER_PROXY \
     --capath $X509_CERTIFICATES \
     --data @justin-send-heartbeat.json \
     https://justin-allocator-pro.dune.hep.ac.uk/api/allocator/send_heartbeat

  sleep 600
done

) >justin-heartbeat.log 2>&1 &

# Create the JSON to send to the allocator
cat <<EOF >justin-get-stage.json
{
  "method"       : "get_stage",
  "jobsub_id"    : "$JOBSUBJOBID",
  "site_name"    : "${site_name:-XX-UNKNOWN}",
  "cpuinfo"      : "${JUSTIN_CPUINFO:-Unknown}",
  "os_release"   : "${JUSTIN_OS_RELEASE:-Unknown}",
  "hostname"     : "${JUSTIN_HOSTNAME:-unknown}",
  "rss_bytes"    : ${rss_bytes:-0},
  "processors"   : ${processors:-0},
  "wall_seconds" : ${wall_seconds:-0},
  "site_job_id"  : "${JOB_GLIDEIN_SiteWMS_JobId:-unknown}"
}
EOF

echo '====start justin-get-stage.json===='
cat justin-get-stage.json
echo '====end justin-get-stage.json===='

for i in 1 2 3 4 5 
do

# Sleep for up to 60 seconds to spread out job start storms
sleep `expr $RANDOM / 512`

# Make the call to the Workflow Allocator
http_code=`curl \
--retry 0 \
--user-agent 'justin-generic-job' \
--header "X-Jobid: $JOBSUBJOBID" \
--key $X509_USER_PROXY \
--cert $X509_USER_PROXY \
--cacert $X509_USER_PROXY \
--capath $X509_CERTIFICATES \
--data @justin-get-stage.json \
--output justin-files.tar \
--write-out "%{http_code}\n" \
https://justin-allocator-pro.dune.hep.ac.uk/api/allocator/get_stage`

log_line "($i/5) curl returns HTTP code $http_code"

if [ "$http_code" != "503" ] ; then
 break
fi
done

if [ "$http_code" != "200" ] ; then
  log_line "curl call to WFA to get stage fails with code $http_code"
  cat justin-files.tar
  echo
  exit 0
fi

tar xvf justin-files.tar

if [ -r justin-env.sh ] ; then
  . ./justin-env.sh
fi

echo '====Start justin-output-patterns.txt===='
cat justin-output-patterns.txt
echo '====End justin-output-patterns.txt===='

echo '====Start justin-env.sh===='
cat justin-env.sh
echo '====End justin-env.sh===='

echo '====Start justin-jobscript-env.sh===='
cat justin-jobscript-env.sh
echo '====End justin-jobscript-env.sh===='

echo '====Start justin-get-file.json===='
cat justin-get-file.json
echo '====End justin-get-file.json===='

# Run the jobscript
if [ -f justin-jobscript.sh ] ; then
  chmod +x justin-jobscript.sh

  echo '====Start justin-jobscript.sh===='
  cat justin-jobscript.sh
  echo '====End justin-jobscript.sh===='

  mkdir workspace
  echo '====Run justin-jobscript.sh===='
  export JUSTIN_JOBSCRIPT_START=`date --iso-8601=seconds --utc`
  ( . ./justin-jobscript-env.sh
    cd workspace
    stdbuf -oL -eL $JUSTIN_PATH/justin-jobscript.sh ) \
      > workspace/justin-jobscript.log 2>&1
  export JOBSCRIPT_EXIT=$?
  export JUSTIN_JOBSCRIPT_FINISH=`date --iso-8601=seconds --utc`
  echo '====After justin-jobscript.sh===='
else
  # How can this happen???
  log_line No justin-jobscript.sh found
  exit 0
fi

echo '#### justin-jobscript.log'
cat workspace/justin-jobscript.log
echo '####'

#if [ "$retval" != 0 ] ; then
#  job_aborted 0 900 "jobscript script error $JOBSCRIPT_EXIT"
#fi

# Make the lists of output files and files for the next stage
echo -n > justin-outputs.txt
echo -n > justin-output-dids.txt
echo -n > justin-next-stage-dids.txt

echo '### Contents of workspace directory ###'
ls -lR workspace
echo '###'

cat justin-output-patterns.txt | (
while read lifetime for_next_stage dataset scope pattern
do  
  (
    cd workspace
    # $pattern is wildcard-expanded here - so a list of files
    for fn in $pattern
    do
      if [ -r "$fn" ] ; then
        # justin-outputs.txt gets DATASET SCOPE FILENAME on each line
        echo "$lifetime $dataset $scope $fn" >> $JUSTIN_PATH/justin-outputs.txt

        if [ "$for_next_stage" = "True" ] ; then
          # justin-next-stage-dids gets a list of DIDs
          echo "$scope:$fn" >> $JUSTIN_PATH/justin-next-stage-dids.txt
        else
          # justin-output-dids.txt gets DID = SCOPE:FILENAME
          echo "$scope:$fn" >> $JUSTIN_PATH/justin-output-dids.txt
        fi
      fi
    done
  )
done
)

echo '#### justin-outputs.txt'
cat $JUSTIN_PATH/justin-outputs.txt
echo '####'
echo
echo '#### justin-output-dids.txt'
cat $JUSTIN_PATH/justin-output-dids.txt
echo '####'
echo
echo '#### justin-next-stage-dids.txt'
cat $JUSTIN_PATH/justin-next-stage-dids.txt
echo '####'
echo
echo '#### justin-output-rse-list.txt'
cat $JUSTIN_PATH/justin-output-rse-list.txt
echo '####'

output_dids=`echo \`sed 's/.*/"&"/' justin-output-dids.txt\`|sed 's/ /,/g'`

next_stage_dids=`echo \`sed 's/.*/"&"/' justin-next-stage-dids.txt\`|sed 's/ /,/g'`

# justin-jobscript.sh should produce lists of successfully processed input files
if [ -f workspace/justin-processed-dids.txt ] ; then
  processed_dids=`echo \`sed -r 's/.+/"&"/' workspace/justin-processed-dids.txt\`|sed 's/ /,/g'`
fi

if [ -f workspace/justin-processed-pfns.txt ] ; then
  processed_pfns=`echo \`sed -r 's/.+/"&"/' workspace/justin-processed-pfns.txt\`|sed 's/ /,/g'`
fi

tail -c 10000 workspace/justin-jobscript.log | base64 --wrap=0 > justin-jobscript.log.b64

cat <<EOF >justin-record-results.json
{
  "method": "record_results",
  "jobsub_id": "$JOBSUBJOBID",
  "processed_dids": [$processed_dids],
  "processed_pfns": [$processed_pfns],
  "output_dids": [$output_dids],
  "next_stage_dids": [$next_stage_dids],
  "jobscript_log": "`cat justin-jobscript.log.b64`",
  "jobscript_exit": $JOBSCRIPT_EXIT
}
EOF

echo "=====Start justin-record-results.json=="
cat justin-record-results.json
echo "=====End justin-record-results.json=="

http_code=`curl \
--retry 5 \
--retry-max-time 300 \
--max-time 600 \
--user-agent 'justin-generic-job' \
--key $X509_USER_PROXY \
--cert $X509_USER_PROXY \
--cacert $X509_USER_PROXY \
--header "X-Jobid: $JOBSUBJOBID" \
--capath $X509_CERTIFICATES \
--data @justin-record-results.json \
--output record-results.log \
--write-out "%{http_code}\n" \
https://justin-allocator-pro.dune.hep.ac.uk/api/allocator/record_results`

log_line "record_results returns HTTP code $http_code"
echo "=====Start record-results.log=="
touch record-results.log
cat record-results.log
echo "=====End record-results.log=="

if [ "$http_code" != 200 ] ; then
  job_aborted 0 $http_code record_results
fi

if [ "$JOBSCRIPT_EXIT" != 0 ; then
  job_aborted 0 900 jobscript exit $JOBSCRIPT_EXIT
fi

# Just try the first RSE for now; eventually will do failovers on errors
export OUTPUT_RSE=`head -1 justin-output-rse-list.txt | cut -f1 -d' '`
export OUTPUT_PROTOCOL=`head -1 justin-output-rse-list.txt | cut -f2 -d' '`
log_line "Using $OUTPUT_RSE for output"

cat $JUSTIN_PATH/justin-outputs.txt | (

cat <<EOF >$JUSTIN_PATH/rucio.cfg
[client]
rucio_host = https://dune-rucio.fnal.gov
auth_host = https://auth-dune-rucio.fnal.gov
account = dunepro
auth_type = x509_proxy
request_retries = 3
EOF

echo '====Start rucio.cfg===='
cat $JUSTIN_PATH/rucio.cfg
echo '====End rucio.cfg===='

source /cvmfs/dune.opensciencegrid.org/products/dune/setup_dune.sh
setup rucio
setup metacat

export METACAT_AUTH_SERVER_URL=https://metacat.fnal.gov:8143/auth/dune
export METACAT_SERVER_URL=https://metacat.fnal.gov:9443/dune_meta_demo/app

rucio --config $JUSTIN_PATH/rucio.cfg --version
if [ $? != 0 ] ; then
  job_aborted 1 900 'Rucio test fails'
fi

metacat auth login -m x509 dunepro
metacat auth whoami
if [ $? != 0 ] ; then
  job_aborted 1 900 'MetaCat whoami fails'
fi

touch justin-output-dids-rses.txt

while read lifetime dataset scope fn
do
  $JUSTIN_PATH/justin-metadata "$scope" "$fn" > tmp.json
  echo "==== Start MetaCat JSON for $fn ===="
  cat tmp.json
  echo "==== End MetaCat JSON for $fn ===="

  log_line "Try to declare file in MetaCat (1/3)"
  metacat file declare --json tmp.json "$dataset"
  metacat_return_code=$?
  if [ $metacat_return_code != 0 ] ; then
    sleep 1
    log_line "Retry declare file in MetaCat (2/3)"
    metacat file declare --json tmp.json "$dataset"
    metacat_return_code=$?
    if [ $metacat_return_code != 0 ] ; then
      sleep 1
      log_line "Last chance to declare file in MetaCat (3/3)"
      metacat file declare --json tmp.json "$dataset"
      metacat_return_code=$?
    fi
  fi

  if [ $metacat_return_code = 0 ] ; then
    if [ "$lifetime" -gt 0 ] ; then
      lifetime_option="--lifetime $lifetime"
    fi
    log_line "Upload $scope:$fn to $OUTPUT_RSE/$OUTPUT_PROTOCOL"
    rucio --config $JUSTIN_PATH/rucio.cfg --verbose \
          upload \
          $lifetime_option \
          --rse "$OUTPUT_RSE" \
          --transfer-timeout 1200 \
          --protocol "$OUTPUT_PROTOCOL" \
          --scope "$scope" --name "$fn" "workspace/$fn"

    if [ $? = 0 ] ; then
      log_line "Add $scope:$fn to $dataset"
      rucio --config $JUSTIN_PATH/rucio.cfg \
            --verbose attach "$dataset" "$scope:$fn"
      if [ $? != 0 ] ; then
        log_line "rucio attach fails"
        job_aborted 1 900 "rucio attach error"
      fi
      echo "\"$scope:$fn\":\"$OUTPUT_RSE\"" >> justin-output-dids-rses.txt
    else
      log_line "rucio upload fails"
      job_aborted 1 900 "rucio upload error" "$OUTPUT_RSE"
    fi
  else
    log_line "metacat file declaration fails"
    job_aborted 1 900 "metacat file declare error"
  fi 
done

)
if [ $? != 0 ] ; then
  # Exit/aborts inside subshell just exit the subshell with a non-zero code
  # So we exit the generic job script properly here
  exit 0
fi

# If all ok, then confirm that to the Workflow Allocator

cat <<EOF >justin-confirm-results.json
{
  "method": "confirm_results",
  "jobsub_id": "$JOBSUBJOBID",
  "output_dids": {
EOF

echo `cat justin-output-dids-rses.txt` | sed 's/ /,/g' >>justin-confirm-results.json

echo '} }' >>justin-confirm-results.json

echo "=====Start justin-confirm-results.json=="
cat justin-confirm-results.json
echo "=====End justin-confirm-results.json=="

http_code=`curl \
--retry 5 \
--retry-max-time 300 \
--max-time 600 \
--user-agent 'justin-generic-job' \
--header "X-Jobid: $JOBSUBJOBID" \
--key $X509_USER_PROXY \
--cert $X509_USER_PROXY \
--cacert $X509_USER_PROXY \
--capath $X509_CERTIFICATES \
--data @justin-confirm-results.json \
--output confirm-results.log \
--write-out "%{http_code}\n" \
https://justin-allocator-pro.dune.hep.ac.uk/api/allocator/confirm_results`

log_line "confirm_results returns HTTP code $http_code"
echo "=====Start confirm-results.log=="
touch confirm-results.log
cat confirm-results.log
echo "=====End confirm-results.log=="

if [ "$http_code" != 200 ] ; then
  job_aborted 0 $http_code confirm_results
fi

log_line '====End of justin-generic-job===='
exit 0

