#!/usr/bin/env python3
#
# justin-job-datasets - make datasets for wrapper job
#
# Copyright 2013-24, Andrew McNab for the University of Manchester
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

import os
import sys
import ssl
import stat
import json
import time
import tempfile

import rucio.client

def executeMetaCatCommand(args):

  for i in range(1, 4):  
    ret = os.system('metacat %s' % args)
    print('metacat %s  returns %d' % (args, ret))
     
    if ret == 0:
      break

    time.sleep(1) 

  return ret

def createOneDataset(dataset):

  # Temporary metadata file to pass to metacat command 
  (fd, metadataFile) = tempfile.mkstemp(text = True)

  try:
    with os.fdopen(fd, 'w') as fp:
      json.dump(dataset['metadata'], fp)

    ret = executeMetaCatCommand("dataset create --metadata %s %s:%s"
                                % (metadataFile, 
                                   dataset['dataset_scope'],
                                   dataset['dataset_name']))
  #Â Carry on regardless if ret != 0 since we can't tell from the metacat 
  # return code if the dataset just already exists or there was a 
  # genuine problem ...
  except Exception as e:
    print('Failed adding dataset %s:%s to Metacat: %s' 
              % (dataset['dataset_scope'], dataset['dataset_name'], str(e)),
          file=sys.stderr)
    os.remove(metadataFile)
    sys.exit(2)

  os.remove(metadataFile)
  
  # Create Rucio dataset
  didClient  = rucio.client.didclient.DIDClient()

  # Try to create the pattern's dataset in Rucio if not already there
  ret = False
  try:
    print('Try to add Rucio dataset %s:%s' 
                   % (dataset['dataset_scope'], dataset['dataset_name']))
    ret = didClient.add_dataset(scope = dataset['dataset_scope'], 
                                name  = dataset['dataset_name'])
  except rucio.common.exception.DataIdentifierAlreadyExists:
    # That's ok! 
    ret = True

  if not ret:
    raise RuntimeException('Failed adding dataset %s:%s' 
                        % (dataset['dataset_scope'], dataset['dataset_name']))

  if 'rse_expression' in dataset and dataset['rse_expression']:
    # Add rule to dataset if requested
    ruleClient = rucio.client.ruleclient.RuleClient()

    print('Try to add rule for %s:%s' % (dataset['dataset_scope'], 
                                                  dataset['dataset_name']))
    ret = False    
    try:
      ret = ruleClient.add_replication_rule(
                     dids = [ {'scope' : dataset['dataset_scope'],
                               'name'  : dataset['dataset_name'] } ], 
                     copies = 1, 
                     rse_expression = dataset['rse_expression'],
                     lifetime = dataset['lifetime_seconds'])
    except rucio.common.exception.DuplicateRule:
      # Cannot create rule now because already exists - dev/int instance?
      print('Failed to create rule, as a duplicate - ignoring')
      ret = True
    except rucio.common.exception.RSEOverQuota:
      # Cannot create rule now because RSE is currently over quota
      print('Failed to create rule as over quota - exiting')
    except rucio.common.exception.InsufficientAccountLimit:
      # Cannot create rule now because RSE is currently over account limit
      print('Failed to create rule, as over account limit - exiting')
    except rucio.common.exception.RSEWriteBlocked:
      # Cannot create rule now because RSE is currently not writeable
      print('Failed to create rule as write disabled - exiting')
  
    if not ret:
      sys.exit(3)

#
# PROGRAM MAIN
#

# We use a hardcoded datasets.json file created by justin-wrapper-job
#
# JSON format [ { 'metadata'         : { METADATA DICTIONARY },
#                 'dataset_scope'    : SCOPE,
#                 'dataset_name'     : NAME,
#                 'rse_expression'   : EXPRESSION,
#                 'lifetime_seconds' : SECONDS
#               }, 
#               {}, {} ]

try:
  with open('datasets.json','r') as f:
    datasetsJSON = json.load(f)
except Exception as e:
  print('Failed to load datasets.json: ' + str(e), file=sys.stderr)
  sys.exit(1)

for dataset in datasetsJSON:
  # If anything fails, there is a sys.exit(<>0) inside createOneDataset()
  createOneDataset(dataset)
  
sys.exit(0)

  