#!/usr/bin/env python3
#
# Check any metadata JSON from jobscript for a given file and add
#Â workflow metadata to it. The output file and its JSON file will be looked
# for in the workspace subdirectory of the container $HOME.

import os
import sys
import json

try:
  fileScope = sys.argv[1]
  fileName  = sys.argv[2]
except:
  print("justin-metadata SCOPE NAME", file=sys.stderr)
  sys.exit(1)
    
try:
  metadata = json.load(open('home/workspace/' + fileName + '.json', 'r'))
except FileNotFoundError:
  metadata = { "metadata" : {} }
except Exception as e:
  print("File home/workspace/%s.json exists but JSON load fails: %s" % 
        (fileName, str(e)))

metadata['size']      = os.path.getsize('home/workspace/' + fileName)
metadata['namespace'] = fileScope
metadata['name']      = fileName
metadata['metadata']['DUNE.workflow'] = {}

metadata['metadata']['DUNE.workflow']['site_name'] \
 = os.environ['JUSTIN_SITE_NAME']
metadata['metadata']['DUNE.workflow']['request_id'] \
 = int(os.environ['JUSTIN_REQUEST_ID'])
metadata['metadata']['DUNE.workflow']['stage_id'] \
 = int(os.environ['JUSTIN_STAGE_ID'])
metadata['metadata']['DUNE.workflow']['hostname'] \
 = os.environ['JUSTIN_HOSTNAME']

metadata['metadata']['DUNE.workflow']['jobscript_start'] \
 = os.environ['JUSTIN_JOBSCRIPT_START']
metadata['metadata']['DUNE.workflow']['jobscript_finish'] \
 = os.environ['JUSTIN_JOBSCRIPT_FINISH']
metadata['metadata']['DUNE.workflow']['jobscript_real_seconds'] \
 = int(float(os.environ['JUSTIN_JOBSCRIPT_REAL_SECONDS']))
metadata['metadata']['DUNE.workflow']['jobscript_cpu_seconds'] \
 = int(float(os.environ['JUSTIN_JOBSCRIPT_USER_SECONDS']) +
       float(os.environ['JUSTIN_JOBSCRIPT_SYS_SECONDS']))

metadata['metadata']['DUNE.workflow']['cpuinfo'] \
 = os.environ['JUSTIN_CPUINFO']
metadata['metadata']['DUNE.workflow']['os_release'] \
 = os.environ['JUSTIN_OS_RELEASE']
metadata['metadata']['DUNE.workflow']['job_id'] \
 = os.environ['JUSTIN_JOBSUB_ID']

print(json.dumps(metadata, indent = 4, sort_keys = True))
